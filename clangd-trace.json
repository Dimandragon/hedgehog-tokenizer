{"displayTimeUnit":"ns","traceEvents":[{"pid":0,"ph":"M","name":"process_name","args":{"name":"clangd"}},{"pid":0,"ph":"M","name":"thread_name","tid":6130,"args":{"name":"clangd"}},{"pid":0,"ph":"i","name":"Log","ts":90.281999999999996,"tid":6130,"args":{"Message":"clangd version 17.0.3 (https://github.com/llvm/llvm-project 888437e1b60011b8a375dd30928ec925b448da57)"}},{"pid":0,"ph":"i","name":"Log","ts":215.81,"tid":6130,"args":{"Message":"Features: linux+grpc"}},{"pid":0,"ph":"i","name":"Log","ts":233.79400000000001,"tid":6130,"args":{"Message":"PID: 6130"}},{"pid":0,"ph":"i","name":"Log","ts":259.25200000000001,"tid":6130,"args":{"Message":"Working directory: /home/dmitry/projects/hedgehog-tokenizer"}},{"pid":0,"ph":"i","name":"Log","ts":268.51999999999998,"tid":6130,"args":{"Message":"argv[0]: /home/dmitry/.config/Code/User/globalStorage/llvm-vs-code-extensions.vscode-clangd/install/17.0.3/clangd_17.0.3/bin/clangd"}},{"pid":0,"ph":"i","name":"Log","ts":297.86500000000001,"tid":6130,"args":{"Message":"Starting LSP over stdin/stdout"}},{"pid":0,"ph":"i","name":"Log","ts":1035.183,"tid":6130,"args":{"Message":"<-- initialize(0)"}},{"pid":0,"ph":"i","name":"Log","ts":2353.3429999999998,"tid":6130,"args":{"Message":"--> reply:initialize(0) 1 ms"}},{"pid":0,"ph":"X","name":"initialize","ts":719.82500000000005,"tid":6130,"dur":1838.7070000000001,"args":{"Params":{"capabilities":{"general":{"markdown":{"parser":"marked","version":"1.1.0"},"positionEncodings":["utf-16"],"regularExpressions":{"engine":"ECMAScript","version":"ES2020"},"staleRequestSupport":{"cancel":true,"retryOnContentModified":["textDocument/semanticTokens/full","textDocument/semanticTokens/range","textDocument/semanticTokens/full/delta"]}},"notebookDocument":{"synchronization":{"dynamicRegistration":true,"executionSummarySupport":true}},"textDocument":{"callHierarchy":{"dynamicRegistration":true},"codeAction":{"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}},"dataSupport":true,"disabledSupport":true,"dynamicRegistration":true,"honorsChangeAnnotations":false,"isPreferredSupport":true,"resolveSupport":{"properties":["edit"]}},"codeLens":{"dynamicRegistration":true},"colorProvider":{"dynamicRegistration":true},"completion":{"completionItem":{"commitCharactersSupport":true,"deprecatedSupport":true,"documentationFormat":["markdown","plaintext"],"insertReplaceSupport":true,"insertTextModeSupport":{"valueSet":[1,2]},"labelDetailsSupport":true,"preselectSupport":true,"resolveSupport":{"properties":["documentation","detail","additionalTextEdits"]},"snippetSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]},"completionList":{"itemDefaults":["commitCharacters","editRange","insertTextFormat","insertTextMode"]},"contextSupport":true,"dynamicRegistration":true,"editsNearCursor":true,"insertTextMode":2},"declaration":{"dynamicRegistration":true,"linkSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"diagnostic":{"dynamicRegistration":true,"relatedDocumentSupport":false},"documentHighlight":{"dynamicRegistration":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"documentSymbol":{"dynamicRegistration":true,"hierarchicalDocumentSymbolSupport":true,"labelSupport":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]}},"foldingRange":{"dynamicRegistration":true,"foldingRange":{"collapsedText":false},"foldingRangeKind":{"valueSet":["comment","imports","region"]},"lineFoldingOnly":true,"rangeLimit":5000},"formatting":{"dynamicRegistration":true},"hover":{"contentFormat":["markdown","plaintext"],"dynamicRegistration":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"inactiveRegionsCapabilities":{"inactiveRegions":true},"inlayHint":{"dynamicRegistration":true,"resolveSupport":{"properties":["tooltip","textEdits","label.tooltip","label.location","label.command"]}},"inlineValue":{"dynamicRegistration":true},"linkedEditingRange":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"publishDiagnostics":{"codeDescriptionSupport":true,"dataSupport":true,"relatedInformation":true,"tagSupport":{"valueSet":[1,2]},"versionSupport":false},"rangeFormatting":{"dynamicRegistration":true},"references":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"honorsChangeAnnotations":true,"prepareSupport":true,"prepareSupportDefaultBehavior":1},"selectionRange":{"dynamicRegistration":true},"semanticTokens":{"augmentsSyntaxTokens":true,"dynamicRegistration":true,"formats":["relative"],"multilineTokenSupport":false,"overlappingTokenSupport":false,"requests":{"full":{"delta":true},"range":true},"serverCancelSupport":true,"tokenModifiers":["declaration","definition","readonly","static","deprecated","abstract","async","modification","documentation","defaultLibrary"],"tokenTypes":["namespace","type","class","enum","interface","struct","typeParameter","parameter","variable","property","enumMember","event","function","method","macro","keyword","modifier","comment","string","number","regexp","operator","decorator"]},"signatureHelp":{"contextSupport":true,"dynamicRegistration":true,"signatureInformation":{"activeParameterSupport":true,"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}}},"synchronization":{"didSave":true,"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"typeHierarchy":{"dynamicRegistration":true}},"window":{"showDocument":{"support":true},"showMessage":{"messageActionItem":{"additionalPropertiesSupport":true}},"workDoneProgress":true},"workspace":{"applyEdit":true,"codeLens":{"refreshSupport":true},"configuration":true,"diagnostics":{"refreshSupport":true},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true,"relativePatternSupport":true},"executeCommand":{"dynamicRegistration":true},"fileOperations":{"didCreate":true,"didDelete":true,"didRename":true,"dynamicRegistration":true,"willCreate":true,"willDelete":true,"willRename":true},"inlayHint":{"refreshSupport":true},"inlineValue":{"refreshSupport":true},"semanticTokens":{"refreshSupport":true},"symbol":{"dynamicRegistration":true,"resolveSupport":{"properties":["location.range"]},"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"tagSupport":{"valueSet":[1]}},"workspaceEdit":{"changeAnnotationSupport":{"groupsOnLabel":true},"documentChanges":true,"failureHandling":"textOnlyTransactional","normalizesLineEndings":true,"resourceOperations":["create","rename","delete"]},"workspaceFolders":true}},"clientInfo":{"name":"Visual Studio Code","version":"1.88.0"},"initializationOptions":{"clangdFileStatus":true,"fallbackFlags":[]},"locale":"ru","processId":4530,"rootPath":"/home/dmitry/projects/hedgehog-tokenizer","rootUri":"file:///home/dmitry/projects/hedgehog-tokenizer","trace":"off","workspaceFolders":[{"name":"hedgehog-tokenizer","uri":"file:///home/dmitry/projects/hedgehog-tokenizer"}]},"Reply":{"capabilities":{"astProvider":true,"callHierarchyProvider":true,"clangdInlayHintsProvider":true,"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"compilationDatabase":{"automaticReload":true},"completionProvider":{"resolveProvider":false,"triggerCharacters":[".","<",">",":","\"","/","*"]},"declarationProvider":true,"definitionProvider":true,"documentFormattingProvider":true,"documentHighlightProvider":true,"documentLinkProvider":{"resolveProvider":false},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n","moreTriggerCharacter":[]},"documentRangeFormattingProvider":true,"documentSymbolProvider":true,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"foldingRangeProvider":true,"hoverProvider":true,"implementationProvider":true,"inactiveRegionsProvider":true,"inlayHintProvider":true,"memoryUsageProvider":true,"referencesProvider":true,"renameProvider":{"prepareProvider":true},"selectionRangeProvider":true,"semanticTokensProvider":{"full":{"delta":true},"legend":{"tokenModifiers":["declaration","definition","deprecated","deduced","readonly","static","abstract","virtual","dependentName","defaultLibrary","usedAsMutableReference","usedAsMutablePointer","constructorOrDestructor","userDefined","functionScope","classScope","fileScope","globalScope"],"tokenTypes":["variable","variable","parameter","function","method","function","property","variable","class","interface","enum","enumMember","type","type","unknown","namespace","typeParameter","concept","type","macro","modifier","operator","bracket","label","comment"]},"range":false},"signatureHelpProvider":{"triggerCharacters":["(",")","{","}","<",">",","]},"standardTypeHierarchyProvider":true,"textDocumentSync":{"change":2,"openClose":true,"save":true},"typeDefinitionProvider":true,"typeHierarchyProvider":true,"workspaceSymbolProvider":true},"serverInfo":{"name":"clangd","version":"clangd version 17.0.3 (https://github.com/llvm/llvm-project 888437e1b60011b8a375dd30928ec925b448da57) linux+grpc x86_64-unknown-linux-gnu"}}}},{"pid":0,"ph":"i","name":"Log","ts":4808.8699999999999,"tid":6130,"args":{"Message":"<-- initialized"}},{"pid":0,"ph":"X","name":"initialized","ts":4800.6239999999998,"tid":6130,"dur":32.440999999999804,"args":{"Params":{}}},{"pid":0,"ph":"i","name":"Log","ts":16128.587,"tid":6130,"args":{"Message":"<-- textDocument/didOpen"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":16269.694,"tid":6130,"dur":124.55600000000049,"args":{}},{"pid":0,"ph":"X","name":"Queued:Update","ts":16613.866999999998,"tid":6130,"dur":3.4459999999999127,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"M","name":"thread_name","tid":6140,"args":{"name":"ker:extractor.i"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":16110.061,"tid":6130,"id":0,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":16748.782999999999,"tid":6140,"bp":"e","id":0,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":16753.472000000002,"tid":6140,"dur":188.70799999999872,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"X","name":"getConfig","ts":16952.269,"tid":6140,"dur":3.3460000000013679,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":17192.493999999999,"tid":6140,"args":{"Message":"Failed to find compilation database for /home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":17213.805,"tid":6140,"dur":34.074000000000524,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":17266.785,"tid":6140,"args":{"Message":"ASTWorker building file /home/dmitry/projects/hedgehog-tokenizer/src/extractor.i version 1 with command clangd fallback\n[/home/dmitry/projects/hedgehog-tokenizer/src]\n/usr/lib/llvm-18/bin/clang -resource-dir=/home/dmitry/.config/Code/User/globalStorage/llvm-vs-code-extensions.vscode-clangd/install/17.0.3/clangd_17.0.3/lib/clang/17 -- /home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"M","name":"thread_name","tid":6141,"args":{"name":"ker:extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":18667.120999999999,"tid":6141,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":16720.75,"tid":6140,"id":1,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":18757.852999999999,"tid":6141,"bp":"e","id":1,"cat":"mock_cat"},{"pid":0,"ph":"i","name":"Log","ts":23432.578000000001,"tid":6130,"args":{"Message":"<-- textDocument/documentSymbol(1)"}},{"pid":0,"ph":"i","name":"Log","ts":24339.147000000001,"tid":6130,"args":{"Message":"<-- textDocument/codeAction(2)"}},{"pid":0,"ph":"i","name":"Log","ts":26142.327000000001,"tid":6141,"args":{"Message":"Built preamble of size 214180 for file /home/dmitry/projects/hedgehog-tokenizer/src/extractor.i version 1 in 0.01 seconds"}},{"pid":0,"ph":"X","name":"Running PreambleCallback","ts":26187.472000000002,"tid":6141,"dur":77.707999999998719,"args":{}},{"pid":0,"ph":"X","name":"BuildPreamble","ts":18747.643,"tid":6141,"dur":7553.6749999999993,"args":{"File":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":26335.853999999999,"tid":6141,"args":{"Message":"--> workspace/semanticTokens/refresh(0)"}},{"pid":0,"ph":"M","name":"thread_name","tid":6142,"args":{"name":"rc/extractor.i1"}},{"pid":0,"ph":"X","name":"getConfig","ts":26382.061000000002,"tid":6140,"dur":11.431999999997061,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"X","name":"PreambleIndexing","ts":26355.07,"tid":6142,"dur":143.37199999999939,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":27518.346000000001,"tid":6130,"args":{"Message":"<-- reply(0)"}},{"pid":0,"ph":"X","name":"CreatePreamblePatch","ts":26472.232,"tid":6140,"dur":2137.6039999999994,"args":{"File":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"X","name":"ClangTidyOpts","ts":28671.812999999998,"tid":6140,"dur":227.73199999999997,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyInit","ts":29356.772000000001,"tid":6140,"dur":1202.7209999999977,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyMatch","ts":31136.427,"tid":6140,"dur":7.9350000000013097,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":31187.904999999999,"tid":6140,"args":{"Message":"IncludeCleaner: Failed to get an entry for resolved path : No such file or directory"}},{"pid":0,"ph":"X","name":"IncludeCleaner::getUnused","ts":33029.457000000002,"tid":6140,"dur":3.5969999999942956,"args":{}},{"pid":0,"ph":"X","name":"include_cleaner::walkUsed","ts":31239.873,"tid":6140,"dur":1807.3070000000007,"args":{}},{"pid":0,"ph":"X","name":"IncludeCleaner::issueIncludeCleanerDiagnostics","ts":33052.440000000002,"tid":6140,"dur":304.14699999999721,"args":{}},{"pid":0,"ph":"X","name":"BuildAST","ts":26418.971000000001,"tid":6140,"dur":7123.6890000000021,"args":{"File":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":33669.389999999999,"tid":6140,"args":{"Message":"--> textDocument/publishDiagnostics"}},{"pid":0,"ph":"i","name":"Log","ts":33752.258000000002,"tid":6140,"args":{"Message":"--> textDocument/inactiveRegions"}},{"pid":0,"ph":"X","name":"ASTSignals::derive","ts":33772.184999999998,"tid":6140,"dur":21.752000000000407,"args":{}},{"pid":0,"ph":"X","name":"Running main AST callback","ts":33586.512999999999,"tid":6140,"dur":211.41100000000006,"args":{}},{"pid":0,"ph":"X","name":"Build AST","ts":26377.793000000001,"tid":6140,"dur":7429.0679999999957,"args":{}},{"pid":0,"ph":"X","name":"Update","ts":16720.75,"tid":6140,"dur":9649.8189999999995,"args":{}},{"pid":0,"ph":"X","name":"textDocument/didOpen","ts":16110.061,"tid":6130,"dur":526.28899999999885,"args":{"Params":{"textDocument":{"languageId":"c","text":"/* File : extractor.i */\n%module extractor\n\n%{\n#include \"modes_extractors.hpp\"\nusing namespace NP_DSP;\nusing namespace NP_DSP::ONE_D;\nusing namespace NP_DSP::ONE_D::MODES_EXTRACTORS;\n%}\n\n%include stl.i\n\nnamespace std {\n    %template(DoubleVector) vector<double>;\n}\n\n//%feature(\"valuewrapper\") Foo;\n%include \"non-parametric-dsp/np_dsp/modes_extractors.hpp\"\n\n//using NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor;\n\n//%extend InstFreqNormSincExtractor{\n//    %template(computeVec) computeVec<std::vector<double>>;\n//};\nnamespace NP_DSP{\n    namespace ONE_D{\n        namespace MODES_EXTRACTORS{\n            %template(computeVec) InstFreqNormSincExtractor::compute<std::vector<double>>;\n        }\n    }\n}\n//%template(computeVec) NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::compute<std::vector<double>>;","uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i","version":1}}}},{"pid":0,"ph":"X","name":"Queued:DocumentSymbols","ts":23470.470000000001,"tid":6130,"dur":4.7589999999981956,"args":{"CurrentRequest":"Update","PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":23418.029999999999,"tid":6130,"id":2,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":33938.25,"tid":6140,"bp":"e","id":2,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":33942.588000000003,"tid":6140,"dur":11.822999999996682,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":33974.870000000003,"tid":6140,"args":{"Message":"--> reply:textDocument/documentSymbol(1) 10 ms"}},{"pid":0,"ph":"X","name":"DocumentSymbols","ts":33857.175999999999,"tid":6140,"dur":136.05900000000111,"args":{}},{"pid":0,"ph":"X","name":"textDocument/documentSymbol","ts":23418.029999999999,"tid":6130,"dur":59.532999999999447,"args":{"Params":{"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"X","name":"Queued:codeAction","ts":24373.121999999999,"tid":6130,"dur":2.7950000000018917,"args":{"CurrentRequest":"Update","PreambleRequestsNames":[],"RequestsNames":["DocumentSymbols"]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":24321.684000000001,"tid":6130,"id":3,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":34020.025000000001,"tid":6140,"bp":"e","id":3,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":34021.959000000003,"tid":6140,"dur":2.5049999999973807,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":34088.205000000002,"tid":6140,"args":{"Message":"--> reply:textDocument/codeAction(2) 9 ms"}},{"pid":0,"ph":"X","name":"codeAction","ts":34016.468999999997,"tid":6140,"dur":99.879000000000815,"args":{}},{"pid":0,"ph":"X","name":"textDocument/codeAction","ts":24321.684000000001,"tid":6130,"dur":57.738999999997759,"args":{"Params":{"context":{"diagnostics":[],"triggerKind":2},"range":{"end":{"character":2,"line":16},"start":{"character":2,"line":16}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":34145.142999999996,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":38032.154000000002,"tid":6130,"args":{"Message":"<-- textDocument/documentLink(3)"}},{"pid":0,"ph":"X","name":"Queued:DocumentLinks","ts":38072.731,"tid":6130,"dur":4.338000000003376,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":38017.436000000002,"tid":6130,"id":4,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":38135.599999999999,"tid":6140,"bp":"e","id":4,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":38142.123,"tid":6140,"dur":10.319000000003143,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":38175.455999999998,"tid":6140,"args":{"Message":"--> reply:textDocument/documentLink(3) 0 ms"}},{"pid":0,"ph":"X","name":"DocumentLinks","ts":38128.567000000003,"tid":6140,"dur":95.67099999999482,"args":{}},{"pid":0,"ph":"X","name":"textDocument/documentLink","ts":38017.436000000002,"tid":6130,"dur":65.394000000000233,"args":{"Params":{"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":38247.932999999997,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":39359.311000000002,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(4)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":39384.038,"tid":6130,"dur":1.7430000000022119,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":39346.205999999998,"tid":6130,"id":5,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":39460.652999999998,"tid":6140,"bp":"e","id":5,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":39475.902000000002,"tid":6140,"dur":4.7690000000002328,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":39590.919999999998,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(4) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":39454.360999999997,"tid":6140,"dur":179.91100000000006,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":39346.205999999998,"tid":6130,"dur":43.853000000002794,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":39668.025999999998,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":44662.368000000002,"tid":6130,"args":{"Message":"<-- textDocument/semanticTokens/full(5)"}},{"pid":0,"ph":"X","name":"Queued:SemanticHighlights","ts":44718.563999999998,"tid":6130,"dur":3.838000000003376,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":44644.925000000003,"tid":6130,"id":6,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":44778.207000000002,"tid":6140,"bp":"e","id":6,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":44786.493000000002,"tid":6140,"dur":11.972999999998137,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":44836.879000000001,"tid":6140,"args":{"Message":"--> reply:textDocument/semanticTokens/full(5) 0 ms"}},{"pid":0,"ph":"X","name":"SemanticHighlights","ts":44768.017999999996,"tid":6140,"dur":109.2870000000039,"args":{}},{"pid":0,"ph":"X","name":"textDocument/semanticTokens/full","ts":44644.925000000003,"tid":6130,"dur":86.362999999997555,"args":{"Params":{"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":{"data":[],"resultId":"1"}}},{"pid":0,"ph":"i","name":"Log","ts":44911.5,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":314291.60100000002,"tid":6130,"args":{"Message":"<-- textDocument/codeAction(6)"}},{"pid":0,"ph":"X","name":"Queued:codeAction","ts":314364.86900000001,"tid":6130,"dur":4.6890000000130385,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":314269.35800000001,"tid":6130,"id":7,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":314446.484,"tid":6140,"bp":"e","id":7,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":314454.40899999999,"tid":6140,"dur":9.4280000000144355,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":314531.70600000001,"tid":6140,"args":{"Message":"--> reply:textDocument/codeAction(6) 0 ms"}},{"pid":0,"ph":"X","name":"codeAction","ts":314435.163,"tid":6140,"dur":124.82699999999022,"args":{}},{"pid":0,"ph":"X","name":"textDocument/codeAction","ts":314269.35800000001,"tid":6130,"dur":108.86699999996927,"args":{"Params":{"context":{"diagnostics":[],"triggerKind":2},"range":{"end":{"character":2,"line":16},"start":{"character":2,"line":16}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":314585.64799999999,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":323394.96399999998,"tid":6130,"args":{"Message":"<-- textDocument/documentSymbol(7)"}},{"pid":0,"ph":"X","name":"Queued:DocumentSymbols","ts":323435.46100000001,"tid":6130,"dur":3.4560000000055879,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":323379.86499999999,"tid":6130,"id":8,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":323503.90000000002,"tid":6140,"bp":"e","id":8,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":323508.549,"tid":6140,"dur":6.1020000000135042,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":323579.15299999999,"tid":6140,"args":{"Message":"--> reply:textDocument/documentSymbol(7) 0 ms"}},{"pid":0,"ph":"X","name":"DocumentSymbols","ts":323497.38799999998,"tid":6140,"dur":108.77600000001257,"args":{}},{"pid":0,"ph":"X","name":"textDocument/documentSymbol","ts":323379.86499999999,"tid":6130,"dur":64.201999999990221,"args":{"Params":{"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":323633.53600000002,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":327285.011,"tid":6130,"args":{"Message":"<-- textDocument/foldingRange(8)"}},{"pid":0,"ph":"M","name":"thread_name","tid":6146,"args":{"name":"FoldingRanges"}},{"pid":0,"ph":"X","name":"WaitForFreeSemaphoreSlot","ts":327426.08899999998,"tid":6146,"dur":10.960000000020955,"args":{}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":327275.39299999998,"tid":6130,"id":9,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":327455.26400000002,"tid":6146,"bp":"e","id":9,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":327447.098,"tid":6146,"dur":19.496999999973923,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":327831.24699999997,"tid":6146,"args":{"Message":"--> reply:textDocument/foldingRange(8) 0 ms"}},{"pid":0,"ph":"X","name":"textDocument/foldingRange","ts":327275.39299999998,"tid":6130,"dur":119.34600000001956,"args":{"Params":{"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[{"endCharacter":1,"endLine":7,"kind":"region","startCharacter":2,"startLine":3},{"endLine":13,"kind":"region","startCharacter":15,"startLine":12},{"endLine":29,"kind":"region","startCharacter":17,"startLine":24},{"endCharacter":4,"endLine":28,"kind":"region","startCharacter":20,"startLine":25},{"endCharacter":8,"endLine":27,"kind":"region","startCharacter":35,"startLine":26},{"endCharacter":4,"endLine":23,"kind":"comment","startCharacter":2,"startLine":21}]}},{"pid":0,"ph":"i","name":"Log","ts":554947.22199999995,"tid":6130,"args":{"Message":"<-- textDocument/hover(9)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":555015.89199999999,"tid":6130,"dur":3.2660000000614673,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":554921.73400000005,"tid":6130,"id":10,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":555090.78399999999,"tid":6140,"bp":"e","id":10,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":555096.25399999996,"tid":6140,"dur":9.3379999999888241,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":555268.79200000002,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(9) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":555082.929,"tid":6140,"dur":248.48100000002887,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":554921.73400000005,"tid":6130,"dur":104.76799999992363,"args":{"Params":{"position":{"character":13,"line":24},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":555359.23300000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":830727.93500000006,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(10)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":830803.03799999994,"tid":6130,"dur":2.6550000000279397,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":830697.36699999997,"tid":6130,"id":11,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":830867.90099999995,"tid":6140,"bp":"e","id":11,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":830876.49699999997,"tid":6140,"dur":15.018000000040047,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":830974.96299999999,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(10) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":830859.41399999999,"tid":6140,"dur":146.38800000003539,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":830697.36699999997,"tid":6130,"dur":114.27700000000186,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":831036.71100000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":3115074.3250000002,"tid":6130,"args":{"Message":"<-- textDocument/hover(11)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":3115130.392,"tid":6130,"dur":2.3640000000596046,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":3115055.52,"tid":6130,"id":12,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":3115202.0269999998,"tid":6140,"bp":"e","id":12,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":3115209.7719999999,"tid":6140,"dur":13.064999999944121,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":3115364.9360000002,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(11) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":3115194.5329999998,"tid":6140,"dur":198.28600000031292,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":3115055.52,"tid":6130,"dur":82.95699999993667,"args":{"Params":{"position":{"character":21,"line":4},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":3115415.2310000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":3268081.9849999999,"tid":6130,"args":{"Message":"<-- textDocument/codeAction(12)"}},{"pid":0,"ph":"X","name":"Queued:codeAction","ts":3268172.2960000001,"tid":6130,"dur":2.4449999998323619,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":3268054.0619999999,"tid":6130,"id":13,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":3268222.892,"tid":6140,"bp":"e","id":13,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":3268232.4399999999,"tid":6140,"dur":17.844000000040978,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":3268295.5299999998,"tid":6140,"args":{"Message":"--> reply:textDocument/codeAction(12) 0 ms"}},{"pid":0,"ph":"X","name":"codeAction","ts":3268215.0469999998,"tid":6140,"dur":113.35499999998137,"args":{}},{"pid":0,"ph":"X","name":"textDocument/codeAction","ts":3268054.0619999999,"tid":6130,"dur":130.98799999989569,"args":{"Params":{"context":{"diagnostics":[{"code":"pp_file_not_found","message":"'modes_extractors.hpp' file not found","range":{"end":{"character":31,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[],"severity":1,"source":"clang"}],"only":["quickfix"],"triggerKind":1},"range":{"end":{"character":31,"line":4},"start":{"character":9,"line":4}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":3268363.1579999998,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":3799072.6800000002,"tid":6130,"args":{"Message":"<-- textDocument/hover(13)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":3799138.645,"tid":6130,"dur":2.8859999999403954,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":3799053.0729999999,"tid":6130,"id":14,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":3799210.4819999998,"tid":6140,"bp":"e","id":14,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":3799280.6850000001,"tid":6140,"dur":8.6959999999962747,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":3799421.4210000001,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(13) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":3799203.318,"tid":6140,"dur":246.80800000019372,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":3799053.0729999999,"tid":6130,"dur":93.848000000230968,"args":{"Params":{"position":{"character":21,"line":4},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":3799472.6379999998,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":3949399.1230000001,"tid":6130,"args":{"Message":"<-- textDocument/codeAction(14)"}},{"pid":0,"ph":"X","name":"Queued:codeAction","ts":3949444.2080000001,"tid":6130,"dur":2.2549999998882413,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":3949364.818,"tid":6130,"id":15,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":3949513.5299999998,"tid":6140,"bp":"e","id":15,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":3949519.952,"tid":6140,"dur":12.023000000044703,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":3949574.7859999998,"tid":6140,"args":{"Message":"--> reply:textDocument/codeAction(14) 0 ms"}},{"pid":0,"ph":"X","name":"codeAction","ts":3949506.7769999998,"tid":6140,"dur":97.735000000335276,"args":{}},{"pid":0,"ph":"X","name":"textDocument/codeAction","ts":3949364.818,"tid":6130,"dur":90.691999999806285,"args":{"Params":{"context":{"diagnostics":[{"code":"pp_file_not_found","message":"'modes_extractors.hpp' file not found","range":{"end":{"character":31,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[],"severity":1,"source":"clang"}],"only":["quickfix"],"triggerKind":1},"range":{"end":{"character":31,"line":4},"start":{"character":9,"line":4}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":3949647.9550000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":4408546.2829999998,"tid":6130,"args":{"Message":"<-- textDocument/hover(15)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":4408625.3329999996,"tid":6130,"dur":2.8660000003874302,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":4408525.7350000003,"tid":6130,"id":16,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":4408711.5870000003,"tid":6140,"bp":"e","id":16,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":4408721.5159999998,"tid":6140,"dur":15.037999999709427,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":4408920.4929999998,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(15) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":4408699.0729999999,"tid":6140,"dur":318.62399999983609,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":4408525.7350000003,"tid":6130,"dur":109.08600000012666,"args":{"Params":{"position":{"character":26,"line":4},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":4409046.4110000003,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":4559298.6279999996,"tid":6130,"args":{"Message":"<-- textDocument/codeAction(16)"}},{"pid":0,"ph":"X","name":"Queued:codeAction","ts":4559384.7609999999,"tid":6130,"dur":2.9860000004991889,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":4559269.0619999999,"tid":6130,"id":17,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":4559437.0700000003,"tid":6140,"bp":"e","id":17,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":4559507.0130000003,"tid":6140,"dur":9.0469999993219972,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":4559568.2889999999,"tid":6140,"args":{"Message":"--> reply:textDocument/codeAction(16) 0 ms"}},{"pid":0,"ph":"X","name":"codeAction","ts":4559429.2549999999,"tid":6140,"dur":178.64900000020862,"args":{}},{"pid":0,"ph":"X","name":"textDocument/codeAction","ts":4559269.0619999999,"tid":6130,"dur":128.39300000015646,"args":{"Params":{"context":{"diagnostics":[{"code":"pp_file_not_found","message":"'modes_extractors.hpp' file not found","range":{"end":{"character":31,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[],"severity":1,"source":"clang"}],"only":["quickfix"],"triggerKind":1},"range":{"end":{"character":31,"line":4},"start":{"character":9,"line":4}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":4559644.9939999999,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":8206890.0769999996,"tid":6130,"args":{"Message":"<-- textDocument/codeAction(17)"}},{"pid":0,"ph":"X","name":"Queued:codeAction","ts":8206965.0180000002,"tid":6130,"dur":2.4249999998137355,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":8206867.8339999998,"tid":6130,"id":18,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":8207014.2819999997,"tid":6140,"bp":"e","id":18,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":8207021.4749999996,"tid":6140,"dur":185.23100000061095,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":8207280.2350000003,"tid":6140,"args":{"Message":"--> reply:textDocument/codeAction(17) 0 ms"}},{"pid":0,"ph":"X","name":"codeAction","ts":8207006.7570000002,"tid":6140,"dur":315.19699999969453,"args":{}},{"pid":0,"ph":"X","name":"textDocument/codeAction","ts":8206867.8339999998,"tid":6130,"dur":106.70200000051409,"args":{"Params":{"context":{"diagnostics":[],"triggerKind":2},"range":{"end":{"character":48,"line":7},"start":{"character":1,"line":5}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":8207356.7300000004,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":8644905.9450000003,"tid":6130,"args":{"Message":"<-- textDocument/codeAction(18)"}},{"pid":0,"ph":"X","name":"Queued:codeAction","ts":8645034.4879999999,"tid":6130,"dur":4.5390000008046627,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":8644857.8039999995,"tid":6130,"id":19,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":8645117.1649999991,"tid":6140,"bp":"e","id":19,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":8645131.8430000003,"tid":6140,"dur":21.671000000089407,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":8645231.8920000009,"tid":6140,"args":{"Message":"--> reply:textDocument/codeAction(18) 0 ms"}},{"pid":0,"ph":"X","name":"codeAction","ts":8645098.8100000005,"tid":6140,"dur":191.93300000019372,"args":{}},{"pid":0,"ph":"X","name":"textDocument/codeAction","ts":8644857.8039999995,"tid":6130,"dur":192.8150000013411,"args":{"Params":{"context":{"diagnostics":[],"triggerKind":2},"range":{"end":{"character":48,"line":7},"start":{"character":0,"line":5}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":8645352.9110000003,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":9419595.0089999996,"tid":6130,"args":{"Message":"<-- textDocument/codeAction(19)"}},{"pid":0,"ph":"X","name":"Queued:codeAction","ts":9419783.1050000004,"tid":6130,"dur":4.5679999999701977,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":9419563.9900000002,"tid":6130,"id":20,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":9419938.9399999995,"tid":6140,"bp":"e","id":20,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":9419947.0250000004,"tid":6140,"dur":12.604000000283122,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":9420153.3259999994,"tid":6140,"args":{"Message":"--> reply:textDocument/codeAction(19) 0 ms"}},{"pid":0,"ph":"X","name":"codeAction","ts":9419923.7909999993,"tid":6140,"dur":340.85500000044703,"args":{}},{"pid":0,"ph":"X","name":"textDocument/codeAction","ts":9419563.9900000002,"tid":6130,"dur":234.20299999974668,"args":{"Params":{"context":{"diagnostics":[],"triggerKind":2},"range":{"end":{"character":2,"line":8},"start":{"character":2,"line":8}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":9420320.4419999998,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":9812741.2520000003,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(20)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":9812833.8770000003,"tid":6130,"dur":2.7949999999254942,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":9812692.2190000005,"tid":6130,"id":21,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":9812882.4790000003,"tid":6140,"bp":"e","id":21,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":9812887.9690000005,"tid":6140,"dur":17.9239999987185,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":9812938.1640000008,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(20) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":9812874.9149999991,"tid":6140,"dur":114.28600000031292,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":9812692.2190000005,"tid":6130,"dur":151.97800000011921,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":9813018.1459999997,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":10034662.813999999,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(21)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":10034787.981000001,"tid":6130,"dur":3.9780000001192093,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":10034634.119999999,"tid":6130,"id":22,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":10034864.466,"tid":6140,"bp":"e","id":22,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":10034878.453,"tid":6140,"dur":26.129000000655651,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":10034940.981000001,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(21) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":10034851.602,"tid":6140,"dur":139.59400000050664,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":10034634.119999999,"tid":6130,"dur":166.5650000013411,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":10035034.538000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":10134776.089,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(22)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":10134909.432,"tid":6130,"dur":2.6750000007450581,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":10134755.33,"tid":6130,"id":23,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":10134960.989,"tid":6140,"bp":"e","id":23,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":10134966.66,"tid":6140,"dur":10.75,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":10135012.988,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(22) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":10134951.151000001,"tid":6140,"dur":96.561999998986721,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":10134755.33,"tid":6130,"dur":163.03900000080466,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":10135095.203,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":10375039.339,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(23)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":10375124.49,"tid":6130,"dur":2.5549999997019768,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":10375008.731000001,"tid":6130,"id":24,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":10375288.24,"tid":6140,"bp":"e","id":24,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":10375295.893999999,"tid":6140,"dur":25.49800000153482,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":10375397.857000001,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(23) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":10375254.225,"tid":6140,"dur":216.9510000012815,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":10375008.731000001,"tid":6130,"dur":127.87199999950826,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":10375548.352,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":10429367.630999999,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(24)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":10429460.245999999,"tid":6130,"dur":3.2259999997913837,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":10429338.766000001,"tid":6130,"id":25,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":10429554.393999999,"tid":6140,"bp":"e","id":25,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":10429561.959000001,"tid":6140,"dur":12.273000000044703,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":10429603.698000001,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(24) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":10429541.981000001,"tid":6140,"dur":97.754999998956919,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":10429338.766000001,"tid":6130,"dur":134.375,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":10429675.664000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":11767319.842,"tid":6130,"args":{"Message":"<-- textDocument/codeAction(25)"}},{"pid":0,"ph":"X","name":"Queued:codeAction","ts":11767399.773,"tid":6130,"dur":3.7970000002533197,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":11767289.063999999,"tid":6130,"id":26,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":11767608.919,"tid":6140,"bp":"e","id":26,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":11767616.333000001,"tid":6140,"dur":11.512000000104308,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":11767684.562000001,"tid":6140,"args":{"Message":"--> reply:textDocument/codeAction(25) 0 ms"}},{"pid":0,"ph":"X","name":"codeAction","ts":11767598.66,"tid":6140,"dur":136.93899999931455,"args":{}},{"pid":0,"ph":"X","name":"textDocument/codeAction","ts":11767289.063999999,"tid":6130,"dur":125.02600000053644,"args":{"Params":{"context":{"diagnostics":[],"triggerKind":2},"range":{"end":{"character":0,"line":11},"start":{"character":0,"line":11}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":11767766.738,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":12964204.751,"tid":6130,"args":{"Message":"<-- textDocument/hover(26)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":12964274.673,"tid":6130,"dur":1.9639999996870756,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":12964187.858999999,"tid":6130,"id":27,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":12964358.311000001,"tid":6140,"bp":"e","id":27,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":12964363.651000001,"tid":6140,"dur":9.2180000003427267,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":12964530.647,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(26) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":12964350.727,"tid":6140,"dur":215.10700000077486,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":12964187.858999999,"tid":6130,"dur":94.028000000864267,"args":{"Params":{"position":{"character":12,"line":10},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":12964592.494000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":13244695.579,"tid":6130,"args":{"Message":"<-- textDocument/hover(27)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":13244757.737,"tid":6130,"dur":2.1140000000596046,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":13244679.357999999,"tid":6130,"id":28,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":13244841.635,"tid":6140,"bp":"e","id":28,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":13244847.325999999,"tid":6140,"dur":179.0990000013262,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":13245175.237,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(27) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":13244833.139,"tid":6140,"dur":377.53500000014901,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":13244679.357999999,"tid":6130,"dur":85.562000000849366,"args":{"Params":{"position":{"character":11,"line":13},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":13245237.645,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":13466781.911,"tid":6130,"args":{"Message":"<-- textDocument/hover(28)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":13466846.162,"tid":6130,"dur":2.7149999998509884,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":13466754.759,"tid":6130,"id":29,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":13466959.426999999,"tid":6140,"bp":"e","id":29,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":13467060.187000001,"tid":6140,"dur":33.18299999833107,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":13467380.273,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(28) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":13466951.682,"tid":6140,"dur":473.01500000059605,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":13466754.759,"tid":6130,"dur":100.63100000098348,"args":{"Params":{"position":{"character":11,"line":13},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":13467451.528000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":13942206.981000001,"tid":6130,"args":{"Message":"<-- textDocument/hover(29)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":13942262.886,"tid":6130,"dur":2.3350000008940697,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":13942189.057,"tid":6130,"id":30,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":13942341.775,"tid":6140,"bp":"e","id":30,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":13942349.26,"tid":6140,"dur":16.831000000238419,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":13942521.035,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(29) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":13942333.309,"tid":6140,"dur":255.47399999946356,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":13942189.057,"tid":6130,"dur":81.884999999776483,"args":{"Params":{"position":{"character":27,"line":13},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":13942614.602,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":14450781.560000001,"tid":6130,"args":{"Message":"<-- textDocument/hover(30)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":14450838.277000001,"tid":6130,"dur":2.375,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":14450758.827,"tid":6130,"id":31,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":14450901.005999999,"tid":6140,"bp":"e","id":31,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":14450914.852,"tid":6140,"dur":13.505999999120831,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":14451080.145,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(30) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":14450888.602,"tid":6140,"dur":233.9429999999702,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":14450758.827,"tid":6130,"dur":87.8260000012815,"args":{"Params":{"position":{"character":34,"line":13},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":14451149.827,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":15905536.784,"tid":6130,"args":{"Message":"<-- textDocument/hover(31)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":15905603.369999999,"tid":6130,"dur":2.4040000010281801,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":15905509.162,"tid":6130,"id":32,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":15905653.304,"tid":6140,"bp":"e","id":32,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":15905663.954,"tid":6140,"dur":17.263000000268221,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":15905864.062999999,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(31) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":15905644.838,"tid":6140,"dur":313.37299999967217,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":15905509.162,"tid":6130,"dur":102.05299999937415,"args":{"Params":{"position":{"character":10,"line":13},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":15905991.764,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":19228231.103,"tid":6130,"args":{"Message":"<-- textDocument/hover(32)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":19228292.339000002,"tid":6130,"dur":2.3439999967813492,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":19228205.313999999,"tid":6130,"id":33,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":19228343.916000001,"tid":6140,"bp":"e","id":33,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":19228354.846999999,"tid":6140,"dur":187.80499999970198,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":19228680.102000002,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(32) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":19228335.469999999,"tid":6140,"dur":386.77100000157952,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":19228205.313999999,"tid":6130,"dur":95.731000002473593,"args":{"Params":{"position":{"character":15,"line":17},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":19228757.738000002,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":19699911.421999998,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(33)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":19699970.524,"tid":6130,"dur":2.7250000014901161,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":19699881.826000001,"tid":6130,"id":34,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":19700021.25,"tid":6140,"bp":"e","id":34,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":19700030.026000001,"tid":6140,"dur":16.000999998301268,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":19700074.129999999,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(33) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":19700013.184,"tid":6140,"dur":92.625999998301268,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":19699881.826000001,"tid":6130,"dur":97.544999998062849,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":19700134.293000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":21642618.734000001,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(34)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":21642702.541999999,"tid":6130,"dur":3.0859999991953373,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":21642597.342999998,"tid":6130,"id":35,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":21642767.905999999,"tid":6140,"bp":"e","id":35,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":21642780.409000002,"tid":6140,"dur":21.189999997615814,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":21642839.511,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(34) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":21642757.094999999,"tid":6140,"dur":119.78600000217557,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":21642597.342999998,"tid":6130,"dur":118.02300000190735,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":21643024.761,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":22698889.094000001,"tid":6130,"args":{"Message":"<-- textDocument/hover(35)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":22698958.806000002,"tid":6130,"dur":2.3939999975264072,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":22698870.568999998,"tid":6130,"id":36,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":22699016.004000001,"tid":6140,"bp":"e","id":36,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":22699026.052999999,"tid":6140,"dur":16.681000001728535,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":22699240.368000001,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(35) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":22699007.888999999,"tid":6140,"dur":275.42000000178814,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":22698870.568999998,"tid":6130,"dur":96.692999999970198,"args":{"Params":{"position":{"character":21,"line":4},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":22699315.009,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":22850116.447000001,"tid":6130,"args":{"Message":"<-- textDocument/codeAction(36)"}},{"pid":0,"ph":"X","name":"Queued:codeAction","ts":22850199.693999998,"tid":6130,"dur":2.4950000010430813,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":22850087.171,"tid":6130,"id":37,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":22850302.136999998,"tid":6140,"bp":"e","id":37,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":22850307.738000002,"tid":6140,"dur":9.2479999996721745,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":22850411.745000001,"tid":6140,"args":{"Message":"--> reply:textDocument/codeAction(36) 0 ms"}},{"pid":0,"ph":"X","name":"codeAction","ts":22850263.013999999,"tid":6140,"dur":241.83600000292063,"args":{}},{"pid":0,"ph":"X","name":"textDocument/codeAction","ts":22850087.171,"tid":6130,"dur":124.80600000172853,"args":{"Params":{"context":{"diagnostics":[{"code":"pp_file_not_found","message":"'modes_extractors.hpp' file not found","range":{"end":{"character":31,"line":4},"start":{"character":9,"line":4}},"relatedInformation":[],"severity":1,"source":"clang"}],"only":["quickfix"],"triggerKind":1},"range":{"end":{"character":31,"line":4},"start":{"character":9,"line":4}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":22850569.302000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":23378135.778000001,"tid":6130,"args":{"Message":"<-- textDocument/hover(37)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":23378201.932999998,"tid":6130,"dur":3.1260000020265579,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":23378111.362,"tid":6130,"id":38,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":23378255.504999999,"tid":6140,"bp":"e","id":38,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":23378263.278999999,"tid":6140,"dur":17.032000001519918,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":23378430.024,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(37) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":23378246.908,"tid":6140,"dur":224.50400000065565,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":23378111.362,"tid":6130,"dur":99.026999998837709,"args":{"Params":{"position":{"character":21,"line":6},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":23378536.135000002,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":24122689.083000001,"tid":6130,"args":{"Message":"<-- textDocument/hover(38)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":24122746.431000002,"tid":6130,"dur":2.8459999971091747,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":24122671.068999998,"tid":6130,"id":39,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":24122824.168000001,"tid":6140,"bp":"e","id":39,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":24122831.522,"tid":6140,"dur":16.331000000238419,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":24122999.138999999,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(38) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":24122816.133000001,"tid":6140,"dur":230.14499999955297,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":24122671.068999998,"tid":6130,"dur":84.209000002592802,"args":{"Params":{"position":{"character":10,"line":16},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":24123072.497000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":24391339.579,"tid":6130,"args":{"Message":"<-- textDocument/hover(39)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":24391411.044,"tid":6130,"dur":2.8760000020265579,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":24391321.385000002,"tid":6130,"id":40,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":24391538.405000001,"tid":6140,"bp":"e","id":40,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":24391544.355999999,"tid":6140,"dur":284.11700000241399,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":24391970.831999999,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(39) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":24391518.938000001,"tid":6140,"dur":486.32899999991059,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":24391321.385000002,"tid":6130,"dur":98.315999999642372,"args":{"Params":{"position":{"character":10,"line":17},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":24392032.188000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":25008603.969000001,"tid":6130,"args":{"Message":"<-- textDocument/hover(40)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":25008686.515000001,"tid":6130,"dur":3.1959999985992908,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":25008585.193,"tid":6130,"id":41,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":25008760.193999998,"tid":6140,"bp":"e","id":41,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":25008768.901000001,"tid":6140,"dur":16.760999999940395,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":25008938.331,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(40) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":25008751.528000001,"tid":6140,"dur":219.3640000000596,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":25008585.193,"tid":6130,"dur":110.73000000044703,"args":{"Params":{"position":{"character":45,"line":19},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":25014400.028000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":28019333.287999999,"tid":6130,"args":{"Message":"<-- textDocument/hover(41)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":28019410.655000001,"tid":6130,"dur":2.2839999981224537,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":28019314.192000002,"tid":6130,"id":42,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":28019498.149999999,"tid":6140,"bp":"e","id":42,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":28019508.149,"tid":6140,"dur":12.342999998480082,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":28019736.109000001,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(41) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":28019479.263999999,"tid":6140,"dur":314.94500000029802,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":28019314.192000002,"tid":6130,"dur":105.57999999821186,"args":{"Params":{"position":{"character":33,"line":17},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":28019847.640000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":28764704.820999999,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(42)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":28764796.313000001,"tid":6130,"dur":3.2870000004768372,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":28764671.888999999,"tid":6130,"id":43,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":28764909.958000001,"tid":6140,"bp":"e","id":43,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":28764920.607999999,"tid":6140,"dur":18.846000000834465,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":28765001.431000002,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(42) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":28764896.392000001,"tid":6140,"dur":164.57099999859929,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":28764671.888999999,"tid":6130,"dur":136.56700000166893,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":28765118.442000002,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":28838323.234999999,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(43)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":28838393.658,"tid":6130,"dur":2.375,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":28838302.576000001,"tid":6130,"id":44,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":28838466.675999999,"tid":6140,"bp":"e","id":44,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":28838481.513999999,"tid":6140,"dur":17.43300000205636,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":28838531.798999999,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(43) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":28838455.484999999,"tid":6140,"dur":115.85900000110269,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":28838302.576000001,"tid":6130,"dur":99.277999997138977,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":28838661.824999999,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":29053130.447999999,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(44)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":29053222.291999999,"tid":6130,"dur":3.7870000004768372,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":29053086.916000001,"tid":6130,"id":45,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":29053290,"tid":6140,"bp":"e","id":45,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":29053297.473999999,"tid":6140,"dur":15.659000001847744,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":29053348.741,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(44) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":29053280.000999998,"tid":6140,"dur":106.89200000092387,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":29053086.916000001,"tid":6130,"dur":148.18999999761581,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":29053425.045000002,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":29092724.089000002,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(45)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":29092798.350000001,"tid":6130,"dur":2.625,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":29092702.638999999,"tid":6130,"id":46,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":29092869.232999999,"tid":6140,"bp":"e","id":46,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":29092881.767000001,"tid":6140,"dur":17.853999998420477,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":29092931.460999999,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(45) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":29092855.157000002,"tid":6140,"dur":133.10099999979138,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":29092702.638999999,"tid":6130,"dur":104.28700000047684,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":29093027.833000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":32258543.127,"tid":6130,"args":{"Message":"<-- textDocument/codeAction(46)"}},{"pid":0,"ph":"X","name":"Queued:codeAction","ts":32258612.638,"tid":6130,"dur":2.0240000002086163,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":32258522.578000002,"tid":6130,"id":47,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":32258701.585999999,"tid":6140,"bp":"e","id":47,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":32258709.471000001,"tid":6140,"dur":202.57200000062585,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":32258983.798999999,"tid":6140,"args":{"Message":"--> reply:textDocument/codeAction(46) 0 ms"}},{"pid":0,"ph":"X","name":"codeAction","ts":32258689.673,"tid":6140,"dur":323.84200000017881,"args":{}},{"pid":0,"ph":"X","name":"textDocument/codeAction","ts":32258522.578000002,"tid":6130,"dur":98.485999997705221,"args":{"Params":{"context":{"diagnostics":[],"triggerKind":2},"range":{"end":{"character":9,"line":28},"start":{"character":9,"line":28}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":32259040.736000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":32672482.102000002,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(47)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":32672556.261999998,"tid":6130,"dur":2.4240000024437904,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":32672461.272,"tid":6130,"id":48,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":32672621.004000001,"tid":6140,"bp":"e","id":48,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":32672634.388999999,"tid":6140,"dur":19.086000002920628,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":32672683.993000001,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(47) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":32672609.842999998,"tid":6140,"dur":116.85000000149012,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":32672461.272,"tid":6130,"dur":103.26500000059605,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":32672763.502999999,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":32749080.956999999,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(48)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":32749158.412999999,"tid":6130,"dur":2.0540000014007092,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":32749056.840999998,"tid":6130,"id":49,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":32749245.046999998,"tid":6140,"bp":"e","id":49,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":32749252.932,"tid":6140,"dur":11.94200000166893,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":32749296.162999999,"tid":6140,"args":{"Message":"--> reply:textDocument/inlayHint(48) 0 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":32749231.852000002,"tid":6140,"dur":106.39099999889731,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":32749056.840999998,"tid":6130,"dur":109.527000002563,"args":{"Params":{"range":{"end":{"character":113,"line":31},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":32749375.122000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":33753979.137000002,"tid":6130,"args":{"Message":"<-- textDocument/hover(49)"}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":33754084.825999998,"tid":6130,"dur":4.5790000036358833,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":33753954.200000003,"tid":6130,"id":50,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":33754219.149999999,"tid":6140,"bp":"e","id":50,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":33754230.702,"tid":6140,"dur":16.009999997913837,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},{"pid":0,"ph":"i","name":"Log","ts":33754553.401000001,"tid":6140,"args":{"Message":"--> reply:textDocument/hover(49) 0 ms"}},{"pid":0,"ph":"X","name":"Hover","ts":33754185.887000002,"tid":6140,"dur":433.46899999678135,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":33753954.200000003,"tid":6130,"dur":143.64099999517202,"args":{"Params":{"position":{"character":14,"line":27},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/src/extractor.i"}},"Reply":null}},{"pid":0,"ph":"i","name":"Log","ts":33754681.743000001,"tid":6140,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":57548402.200999998,"tid":6130,"args":{"Message":"<-- textDocument/didOpen"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":57549881.980999999,"tid":6130,"dur":59.241999998688698,"args":{}},{"pid":0,"ph":"X","name":"Queued:Update","ts":57550743.925999999,"tid":6130,"dur":3.9479999989271164,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"M","name":"thread_name","tid":6237,"args":{"name":"r:extractor.cpp"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":57548079.162,"tid":6130,"id":51,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":57550813.026000001,"tid":6237,"bp":"e","id":51,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":57550818.016000003,"tid":6237,"dur":171.81399999558926,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"X","name":"getConfig","ts":57551000.310000002,"tid":6237,"dur":3.596000000834465,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":57551161.042999998,"tid":6237,"args":{"Message":"Failed to find compilation database for /home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"X","name":"AdjustCompileFlags","ts":57551185.689000003,"tid":6237,"dur":28.132999993860722,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":57551534.467,"tid":6237,"args":{"Message":"ASTWorker building file /home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp version 1 with command clangd fallback\n[/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64]\n/usr/lib/llvm-18/bin/clang -resource-dir=/home/dmitry/.config/Code/User/globalStorage/llvm-vs-code-extensions.vscode-clangd/install/17.0.3/clangd_17.0.3/lib/clang/17 -- /home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"M","name":"thread_name","tid":6238,"args":{"name":"r:extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":57553184.005999997,"tid":6238,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":57550799.189999998,"tid":6237,"id":52,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":57553301.958999999,"tid":6238,"bp":"e","id":52,"cat":"mock_cat"},{"pid":0,"ph":"i","name":"Log","ts":57561102.134000003,"tid":6130,"args":{"Message":"<-- textDocument/codeAction(50)"}},{"pid":0,"ph":"i","name":"Log","ts":57561603.420000002,"tid":6130,"args":{"Message":"<-- textDocument/documentSymbol(51)"}},{"pid":0,"ph":"i","name":"Log","ts":57561837.961999997,"tid":6238,"args":{"Message":"Built preamble of size 229488 for file /home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp version 1 in 0.01 seconds"}},{"pid":0,"ph":"X","name":"Running PreambleCallback","ts":57561866.075000003,"tid":6238,"dur":217.37999999523163,"args":{}},{"pid":0,"ph":"X","name":"BuildPreamble","ts":57553292.450999998,"tid":6238,"dur":8798.8990000039339,"args":{"File":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":57562121.446000002,"tid":6238,"args":{"Message":"--> workspace/semanticTokens/refresh(1)"}},{"pid":0,"ph":"M","name":"thread_name","tid":6240,"args":{"name":"/extractor.cpp1"}},{"pid":0,"ph":"M","name":"thread_name","tid":6239,"args":{"name":"IndexStdlib"}},{"pid":0,"ph":"X","name":"getConfig","ts":57562200.174999997,"tid":6237,"dur":20.218000002205372,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":57562232.215000004,"tid":6239,"args":{"Message":"Indexing c++17 standard library in the context of /home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":57562604.256999999,"tid":6130,"args":{"Message":"<-- reply(1)"}},{"pid":0,"ph":"X","name":"PreambleIndexing","ts":57562164.627999999,"tid":6240,"dur":908.07200000435114,"args":{}},{"pid":0,"ph":"X","name":"CreatePreamblePatch","ts":57562442.281000003,"tid":6237,"dur":3526.5989999994636,"args":{"File":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"X","name":"ClangTidyOpts","ts":57566120.206,"tid":6237,"dur":116.64999999850988,"args":{}},{"pid":0,"ph":"X","name":"ClangTidyInit","ts":57566686.483000003,"tid":6237,"dur":5664.2889999970794,"args":{}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":57582275.603,"tid":6237,"dur":9.7990000024437904,"args":{"results":0}},{"pid":0,"ph":"X","name":"Dex fuzzyFind","ts":57582312.061999999,"tid":6237,"dur":20.398000001907349,"args":{"query":"false"}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57582269.821999997,"tid":6237,"dur":69.521000005304813,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":57582346.366999999,"tid":6237,"dur":1.4519999995827675,"args":{"results":0}},{"pid":0,"ph":"X","name":"ProjectAwareIndex::fuzzyFind","ts":57582351.376000002,"tid":6237,"dur":2.3339999988675117,"args":{}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57582344.784000002,"tid":6237,"dur":12.052000001072884,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57582265.123000003,"tid":6237,"dur":96.000999994575977,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":57583621.380000003,"tid":6237,"dur":7.1039999946951866,"args":{"results":0}},{"pid":0,"ph":"X","name":"Dex fuzzyFind","ts":57583645.045000002,"tid":6237,"dur":15.598999999463558,"args":{"query":"false"}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57583613.906000003,"tid":6237,"dur":51.576999999582767,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":57583670.934,"tid":6237,"dur":1.3519999980926514,"args":{"results":0}},{"pid":0,"ph":"X","name":"ProjectAwareIndex::fuzzyFind","ts":57583675.452,"tid":6237,"dur":1.4629999995231628,"args":{}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57583670.022,"tid":6237,"dur":9.9790000021457672,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57583611.662,"tid":6237,"dur":72.086000002920628,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":57584967.056999996,"tid":6237,"dur":18.465000003576279,"args":{"results":0}},{"pid":0,"ph":"X","name":"Dex fuzzyFind","ts":57584999.248000003,"tid":6237,"dur":14.897999994456768,"args":{"query":"false"}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57584965.254000001,"tid":6237,"dur":53.471000000834465,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":57585023.924999997,"tid":6237,"dur":1.3020000010728836,"args":{"results":0}},{"pid":0,"ph":"X","name":"ProjectAwareIndex::fuzzyFind","ts":57585028.332999997,"tid":6237,"dur":1.1420000046491623,"args":{}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57585023.012999997,"tid":6237,"dur":9.448000006377697,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57584963.409999996,"tid":6237,"dur":72.888000003993511,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":57585426.723999999,"tid":6237,"dur":1.6630000025033951,"args":{"results":0}},{"pid":0,"ph":"X","name":"Dex fuzzyFind","ts":57585433.045999996,"tid":6237,"dur":9.4880000054836273,"args":{"query":"false"}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57585425.692000002,"tid":6237,"dur":20.519000001251698,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":57585451.020000003,"tid":6237,"dur":1.2719999998807907,"args":{"results":0}},{"pid":0,"ph":"X","name":"ProjectAwareIndex::fuzzyFind","ts":57585455.267999999,"tid":6237,"dur":0.91099999845027924,"args":{}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57585450.088,"tid":6237,"dur":9.3580000028014183,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57585424.239,"tid":6237,"dur":82.755999997258186,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":57586348.120999999,"tid":6237,"dur":1.5729999989271164,"args":{"results":0}},{"pid":0,"ph":"X","name":"Dex fuzzyFind","ts":57586354.343000002,"tid":6237,"dur":12.973999999463558,"args":{"query":"false"}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57586346.979000002,"tid":6237,"dur":24.195000000298023,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MemIndex fuzzyFind","ts":57586375.813000001,"tid":6237,"dur":1.2829999998211861,"args":{"results":0}},{"pid":0,"ph":"X","name":"ProjectAwareIndex::fuzzyFind","ts":57586380.081,"tid":6237,"dur":1.0219999998807907,"args":{}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57586374.921999998,"tid":6237,"dur":9.0970000028610229,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"X","name":"MergedIndex fuzzyFind","ts":57586345.486000001,"tid":6237,"dur":41.979000002145767,"args":{"dynamic":0,"merged":0,"static":0,"static_dropped":0}},{"pid":0,"ph":"i","name":"Log","ts":57595966.755000003,"tid":6130,"args":{"Message":"<-- textDocument/semanticTokens/full(52)"}},{"pid":0,"ph":"i","name":"Log","ts":57611828.288000003,"tid":6130,"args":{"Message":"<-- textDocument/documentLink(53)"}},{"pid":0,"ph":"i","name":"Log","ts":57611945.579999998,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(54)"}},{"pid":0,"ph":"i","name":"Log","ts":57684040.269000001,"tid":6130,"args":{"Message":"<-- $/cancelRequest"}},{"pid":0,"ph":"X","name":"$/cancelRequest","ts":57684022.134999998,"tid":6130,"dur":70.412000000476837,"args":{"Params":{"id":51}}},{"pid":0,"ph":"i","name":"Log","ts":57684500.495999999,"tid":6130,"args":{"Message":"<-- textDocument/documentSymbol(55)"}},{"pid":0,"ph":"i","name":"Log","ts":57952343.218000002,"tid":6130,"args":{"Message":"<-- textDocument/documentSymbol(56)"}},{"pid":0,"ph":"i","name":"Log","ts":57983408.344999999,"tid":6130,"args":{"Message":"<-- textDocument/foldingRange(57)"}},{"pid":0,"ph":"M","name":"thread_name","tid":6245,"args":{"name":"FoldingRanges"}},{"pid":0,"ph":"X","name":"WaitForFreeSemaphoreSlot","ts":57983618.872000001,"tid":6245,"dur":11.53099999576807,"args":{}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":57983391.202,"tid":6130,"id":53,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":57983655.410999998,"tid":6245,"bp":"e","id":53,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":57983647.244999997,"tid":6245,"dur":18.255000002682209,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58153350.215000004,"tid":6130,"args":{"Message":"<-- textDocument/hover(58)"}},{"pid":0,"ph":"i","name":"Log","ts":58194936.476999998,"tid":6130,"args":{"Message":"<-- $/cancelRequest"}},{"pid":0,"ph":"X","name":"$/cancelRequest","ts":58194917.741999999,"tid":6130,"dur":69.631000004708767,"args":{"Params":{"id":58}}},{"pid":0,"ph":"i","name":"Log","ts":58255392.454000004,"tid":6245,"args":{"Message":"--> reply:textDocument/foldingRange(57) 271 ms"}},{"pid":0,"ph":"X","name":"textDocument/foldingRange","ts":57983391.202,"tid":6130,"dur":196.28000000119209,"args":{"Params":{"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},"Reply":[{"endLine":347,"kind":"region","startCharacter":42,"startLine":346},{"endLine":350,"kind":"region","startCharacter":45,"startLine":349},{"endLine":752,"kind":"region","startCharacter":12,"startLine":361},{"endLine":374,"kind":"region","startCharacter":31,"startLine":368},{"endLine":382,"kind":"region","startCharacter":31,"startLine":378},{"endLine":394,"kind":"region","startCharacter":33,"startLine":388},{"endLine":412,"kind":"region","startCharacter":37,"startLine":406},{"endCharacter":2,"endLine":410,"kind":"region","startCharacter":47,"startLine":407},{"endLine":431,"kind":"region","startCharacter":46,"startLine":420},{"endCharacter":2,"endLine":429,"kind":"region","startCharacter":29,"startLine":424},{"endCharacter":4,"endLine":426,"kind":"region","startCharacter":30,"startLine":425},{"endLine":440,"kind":"region","startCharacter":48,"startLine":439},{"endLine":467,"kind":"region","startCharacter":51,"startLine":447},{"endCharacter":2,"endLine":465,"kind":"region","startCharacter":11,"startLine":448},{"endCharacter":4,"endLine":464,"kind":"region","startCharacter":18,"startLine":450},{"endCharacter":6,"endLine":462,"kind":"region","startCharacter":45,"startLine":451},{"endLine":494,"kind":"region","startCharacter":70,"startLine":474},{"endCharacter":2,"endLine":492,"kind":"region","startCharacter":11,"startLine":475},{"endCharacter":4,"endLine":491,"kind":"region","startCharacter":18,"startLine":477},{"endCharacter":6,"endLine":489,"kind":"region","startCharacter":31,"startLine":478},{"endLine":502,"kind":"region","startCharacter":62,"startLine":501},{"endLine":516,"kind":"region","startCharacter":54,"startLine":509},{"endCharacter":2,"endLine":514,"kind":"region","startCharacter":29,"startLine":512},{"endLine":524,"kind":"region","startCharacter":41,"startLine":523},{"endLine":546,"kind":"region","startCharacter":49,"startLine":532},{"endCharacter":2,"endLine":543,"kind":"region","startCharacter":26,"startLine":538},{"endLine":566,"kind":"region","startCharacter":59,"startLine":553},{"endCharacter":2,"endLine":565,"kind":"region","startCharacter":16,"startLine":558},{"endCharacter":4,"endLine":563,"kind":"region","startCharacter":27,"startLine":559},{"endCharacter":6,"endLine":562,"kind":"region","startCharacter":28,"startLine":561},{"endLine":571,"kind":"region","startCharacter":62,"startLine":569},{"endCharacter":30,"endLine":584,"kind":"region","startCharacter":28,"startLine":583},{"endLine":615,"kind":"region","startCharacter":33,"startLine":585},{"endCharacter":2,"endLine":613,"kind":"region","startCharacter":6,"startLine":587},{"endCharacter":4,"endLine":611,"kind":"region","startCharacter":21,"startLine":588},{"endCharacter":6,"endLine":610,"kind":"region","startCharacter":10,"startLine":591},{"endCharacter":1,"endLine":607,"kind":"region","startCharacter":13,"startLine":595},{"endCharacter":3,"endLine":598,"kind":"region","startCharacter":22,"startLine":597},{"endCharacter":3,"endLine":604,"kind":"region","startCharacter":28,"startLine":599},{"endCharacter":5,"endLine":601,"kind":"region","startCharacter":13,"startLine":600},{"endCharacter":5,"endLine":603,"kind":"region","startCharacter":13,"startLine":602},{"endCharacter":3,"endLine":606,"kind":"region","startCharacter":28,"startLine":605},{"endCharacter":1,"endLine":609,"kind":"region","startCharacter":9,"startLine":608},{"endCharacter":23,"endLine":629,"kind":"region","startCharacter":21,"startLine":628},{"endLine":650,"kind":"region","startCharacter":26,"startLine":630},{"endCharacter":2,"endLine":634,"kind":"region","startCharacter":12,"startLine":633},{"endCharacter":2,"endLine":646,"kind":"region","startCharacter":10,"startLine":635},{"endCharacter":4,"endLine":645,"kind":"region","startCharacter":8,"startLine":639},{"endCharacter":6,"endLine":643,"kind":"region","startCharacter":35,"startLine":641},{"endLine":666,"kind":"region","startCharacter":46,"startLine":657},{"endCharacter":2,"endLine":664,"kind":"region","startCharacter":24,"startLine":661},{"endLine":694,"kind":"region","startCharacter":54,"startLine":673},{"endCharacter":2,"endLine":692,"kind":"region","startCharacter":24,"startLine":676},{"endLine":708,"kind":"region","startCharacter":71,"startLine":701},{"endLine":721,"kind":"region","startCharacter":65,"startLine":712},{"endCharacter":2,"endLine":719,"kind":"region","startCharacter":18,"startLine":713},{"endCharacter":4,"endLine":716,"kind":"region","startCharacter":32,"startLine":714},{"endCharacter":4,"endLine":718,"kind":"region","startCharacter":12,"startLine":717},{"endLine":736,"kind":"region","startCharacter":83,"startLine":725},{"endCharacter":2,"endLine":732,"kind":"region","startCharacter":14,"startLine":731},{"endCharacter":2,"endLine":734,"kind":"region","startCharacter":10,"startLine":733},{"endLine":749,"kind":"region","startCharacter":76,"startLine":740},{"endCharacter":2,"endLine":747,"kind":"region","startCharacter":18,"startLine":741},{"endCharacter":4,"endLine":744,"kind":"region","startCharacter":32,"startLine":742},{"endCharacter":4,"endLine":746,"kind":"region","startCharacter":12,"startLine":745},{"endLine":811,"kind":"region","startCharacter":1,"startLine":806},{"endLine":826,"kind":"region","startCharacter":1,"startLine":821},{"endLine":892,"kind":"region","startCharacter":33,"startLine":853},{"endCharacter":2,"endLine":890,"kind":"region","startCharacter":16,"startLine":855},{"endLine":918,"kind":"region","startCharacter":1,"startLine":898},{"endCharacter":2,"endLine":915,"kind":"region","startCharacter":14,"startLine":905},{"endCharacter":2,"endLine":917,"kind":"region","startCharacter":10,"startLine":916},{"endLine":928,"kind":"region","startCharacter":1,"startLine":923},{"endLine":953,"kind":"region","startCharacter":1,"startLine":933},{"endCharacter":2,"endLine":949,"kind":"region","startCharacter":44,"startLine":934},{"endCharacter":4,"endLine":946,"kind":"region","startCharacter":19,"startLine":944},{"endCharacter":4,"endLine":948,"kind":"region","startCharacter":12,"startLine":947},{"endCharacter":2,"endLine":952,"kind":"region","startCharacter":10,"startLine":950},{"endCharacter":7,"endLine":980,"kind":"region","startCharacter":39,"startLine":974},{"endCharacter":7,"endLine":988,"kind":"region","startCharacter":39,"startLine":982},{"endLine":1051,"kind":"region","startCharacter":12,"startLine":1030},{"endLine":1048,"kind":"region","startCharacter":32,"startLine":1042},{"endLine":1131,"kind":"region","startCharacter":59,"startLine":1127},{"endLine":1138,"kind":"region","startCharacter":61,"startLine":1135},{"endLine":1151,"kind":"region","startCharacter":63,"startLine":1148},{"endLine":1159,"kind":"region","startCharacter":99,"startLine":1155},{"endLine":1195,"kind":"region","startCharacter":59,"startLine":1175},{"endCharacter":2,"endLine":1177,"kind":"region","startCharacter":16,"startLine":1176},{"endCharacter":2,"endLine":1180,"kind":"region","startCharacter":33,"startLine":1178},{"endCharacter":2,"endLine":1193,"kind":"region","startCharacter":10,"startLine":1181},{"endCharacter":4,"endLine":1190,"kind":"region","startCharacter":32,"startLine":1182},{"endCharacter":6,"endLine":1186,"kind":"region","startCharacter":19,"startLine":1185},{"endCharacter":6,"endLine":1189,"kind":"region","startCharacter":14,"startLine":1187},{"endLine":1243,"kind":"region","startCharacter":1,"startLine":1202},{"endCharacter":2,"endLine":1210,"kind":"region","startCharacter":14,"startLine":1203},{"endCharacter":4,"endLine":1205,"kind":"region","startCharacter":23,"startLine":1204},{"endCharacter":4,"endLine":1209,"kind":"region","startCharacter":12,"startLine":1206},{"endCharacter":2,"endLine":1222,"kind":"region","startCharacter":29,"startLine":1212},{"endCharacter":4,"endLine":1219,"kind":"region","startCharacter":31,"startLine":1213},{"endCharacter":6,"endLine":1217,"kind":"region","startCharacter":33,"startLine":1216},{"endCharacter":2,"endLine":1242,"kind":"region","startCharacter":10,"startLine":1223},{"endCharacter":4,"endLine":1228,"kind":"region","startCharacter":18,"startLine":1225},{"endCharacter":4,"endLine":1232,"kind":"region","startCharacter":25,"startLine":1229},{"endCharacter":4,"endLine":1241,"kind":"region","startCharacter":12,"startLine":1233},{"endCharacter":6,"endLine":1236,"kind":"region","startCharacter":31,"startLine":1235},{"endCharacter":6,"endLine":1239,"kind":"region","startCharacter":28,"startLine":1238},{"endLine":1256,"kind":"region","startCharacter":65,"startLine":1247},{"endCharacter":2,"endLine":1254,"kind":"region","startCharacter":15,"startLine":1249},{"endCharacter":4,"endLine":1253,"kind":"region","startCharacter":34,"startLine":1251},{"endLine":1500,"kind":"region","startCharacter":12,"startLine":1273},{"endLine":1289,"kind":"region","startCharacter":31,"startLine":1285},{"endLine":1294,"kind":"region","startCharacter":35,"startLine":1292},{"endLine":1303,"kind":"region","startCharacter":48,"startLine":1298},{"endLine":1342,"kind":"region","startCharacter":31,"startLine":1307},{"endCharacter":2,"endLine":1326,"kind":"region","startCharacter":43,"startLine":1314},{"endCharacter":4,"endLine":1325,"kind":"region","startCharacter":20,"startLine":1320},{"endLine":1354,"kind":"region","startCharacter":35,"startLine":1346},{"endCharacter":2,"endLine":1353,"kind":"region","startCharacter":15,"startLine":1349},{"endLine":1372,"kind":"region","startCharacter":44,"startLine":1358},{"endCharacter":2,"endLine":1367,"kind":"region","startCharacter":15,"startLine":1362},{"endCharacter":4,"endLine":1365,"kind":"region","startCharacter":35,"startLine":1363},{"endCharacter":2,"endLine":1370,"kind":"region","startCharacter":41,"startLine":1369},{"endLine":1390,"kind":"region","startCharacter":57,"startLine":1376},{"endCharacter":2,"endLine":1385,"kind":"region","startCharacter":15,"startLine":1380},{"endCharacter":4,"endLine":1383,"kind":"region","startCharacter":35,"startLine":1381},{"endCharacter":2,"endLine":1388,"kind":"region","startCharacter":38,"startLine":1387},{"endLine":1459,"kind":"region","startCharacter":25,"startLine":1394},{"endCharacter":2,"endLine":1457,"kind":"region","startCharacter":19,"startLine":1398},{"endCharacter":4,"endLine":1452,"kind":"region","startCharacter":30,"startLine":1399},{"endLine":1469,"kind":"region","startCharacter":30,"startLine":1464},{"endCharacter":2,"endLine":1467,"kind":"region","startCharacter":15,"startLine":1466},{"endLine":1486,"kind":"region","startCharacter":114,"startLine":1473},{"endCharacter":2,"endLine":1484,"kind":"region","startCharacter":11,"startLine":1476},{"endCharacter":4,"endLine":1483,"kind":"region","startCharacter":19,"startLine":1479},{"endLine":1497,"kind":"region","startCharacter":20,"startLine":1493},{"endCharacter":2,"endLine":1495,"kind":"region","startCharacter":36,"startLine":1494},{"endLine":2966,"kind":"region","startCharacter":12,"startLine":1518},{"endLine":1528,"kind":"region","startCharacter":1,"startLine":1525},{"endLine":1540,"kind":"region","startCharacter":16,"startLine":1533},{"endLine":1550,"kind":"region","startCharacter":1,"startLine":1545},{"endLine":1557,"kind":"region","startCharacter":49,"startLine":1554},{"endLine":1608,"kind":"region","startCharacter":1,"startLine":1563},{"endCharacter":2,"endLine":1565,"kind":"region","startCharacter":13,"startLine":1564},{"endCharacter":2,"endLine":1607,"kind":"region","startCharacter":10,"startLine":1566},{"endCharacter":4,"endLine":1575,"kind":"region","startCharacter":29,"startLine":1572},{"endCharacter":4,"endLine":1592,"kind":"region","startCharacter":12,"startLine":1576},{"endCharacter":6,"endLine":1588,"kind":"region","startCharacter":25,"startLine":1578},{"endCharacter":8,"endLine":1582,"kind":"region","startCharacter":28,"startLine":1580},{"endCharacter":8,"endLine":1587,"kind":"region","startCharacter":16,"startLine":1583},{"endCharacter":6,"endLine":1591,"kind":"region","startCharacter":14,"startLine":1589},{"endCharacter":4,"endLine":1598,"kind":"region","startCharacter":27,"startLine":1596},{"endCharacter":4,"endLine":1601,"kind":"region","startCharacter":24,"startLine":1600},{"endCharacter":4,"endLine":1603,"kind":"region","startCharacter":12,"startLine":1602},{"endLine":1618,"kind":"region","startCharacter":1,"startLine":1613},{"endLine":1631,"kind":"region","startCharacter":16,"startLine":1623},{"endLine":1646,"kind":"region","startCharacter":1,"startLine":1639},{"endLine":1654,"kind":"region","startCharacter":1,"startLine":1653},{"endLine":1679,"kind":"region","startCharacter":1,"startLine":1659},{"endCharacter":2,"endLine":1677,"kind":"region","startCharacter":13,"startLine":1662},{"endCharacter":4,"endLine":1675,"kind":"region","startCharacter":14,"startLine":1664},{"endCharacter":6,"endLine":1674,"kind":"region","startCharacter":17,"startLine":1668},{"endLine":1685,"kind":"region","startCharacter":1,"startLine":1684},{"endLine":1691,"kind":"region","startCharacter":1,"startLine":1690},{"endLine":1715,"kind":"region","startCharacter":1,"startLine":1696},{"endCharacter":2,"endLine":1713,"kind":"region","startCharacter":24,"startLine":1699},{"endCharacter":4,"endLine":1709,"kind":"region","startCharacter":15,"startLine":1701},{"endCharacter":4,"endLine":1712,"kind":"region","startCharacter":12,"startLine":1710},{"endLine":1723,"kind":"region","startCharacter":1,"startLine":1722},{"endLine":1731,"kind":"region","startCharacter":1,"startLine":1728},{"endLine":1744,"kind":"region","startCharacter":1,"startLine":1737},{"endCharacter":2,"endLine":1741,"kind":"region","startCharacter":36,"startLine":1739},{"endLine":1759,"kind":"region","startCharacter":25,"startLine":1753},{"endLine":1779,"kind":"region","startCharacter":34,"startLine":1770},{"endLine":1843,"kind":"region","startCharacter":1,"startLine":1789},{"endCharacter":2,"endLine":1837,"kind":"region","startCharacter":38,"startLine":1792},{"endCharacter":4,"endLine":1829,"kind":"region","startCharacter":18,"startLine":1796},{"endCharacter":6,"endLine":1818,"kind":"region","startCharacter":26,"startLine":1810},{"endCharacter":8,"endLine":1814,"kind":"region","startCharacter":18,"startLine":1813},{"endCharacter":8,"endLine":1816,"kind":"region","startCharacter":16,"startLine":1815},{"endCharacter":6,"endLine":1822,"kind":"region","startCharacter":14,"startLine":1819},{"endCharacter":4,"endLine":1834,"kind":"region","startCharacter":10,"startLine":1832},{"endLine":1857,"kind":"region","startCharacter":1,"startLine":1848},{"endCharacter":2,"endLine":1852,"kind":"region","startCharacter":34,"startLine":1850},{"endLine":1869,"kind":"region","startCharacter":1,"startLine":1862},{"endCharacter":2,"endLine":1866,"kind":"region","startCharacter":19,"startLine":1864},{"endCharacter":2,"endLine":1868,"kind":"region","startCharacter":10,"startLine":1867},{"endLine":1877,"kind":"region","startCharacter":1,"startLine":1874},{"endLine":1885,"kind":"region","startCharacter":1,"startLine":1882},{"endLine":1905,"kind":"region","startCharacter":1,"startLine":1890},{"endCharacter":2,"endLine":1893,"kind":"region","startCharacter":52,"startLine":1892},{"endCharacter":2,"endLine":1904,"kind":"region","startCharacter":10,"startLine":1894},{"endCharacter":4,"endLine":1902,"kind":"region","startCharacter":14,"startLine":1897},{"endCharacter":6,"endLine":1899,"kind":"region","startCharacter":33,"startLine":1898},{"endCharacter":6,"endLine":1901,"kind":"region","startCharacter":14,"startLine":1900},{"endLine":1916,"kind":"region","startCharacter":24,"startLine":1909},{"endLine":2053,"kind":"region","startCharacter":29,"startLine":1920},{"endCharacter":2,"endLine":1964,"kind":"region","startCharacter":51,"startLine":1923},{"endCharacter":2,"endLine":2051,"kind":"region","startCharacter":19,"startLine":1969},{"endCharacter":4,"endLine":2046,"kind":"region","startCharacter":30,"startLine":1970},{"endLine":2075,"kind":"region","startCharacter":1,"startLine":2058},{"endCharacter":2,"endLine":2073,"kind":"region","startCharacter":13,"startLine":2060},{"endCharacter":4,"endLine":2072,"kind":"region","startCharacter":34,"startLine":2068},{"endLine":2086,"kind":"region","startCharacter":16,"startLine":2082},{"endLine":2097,"kind":"region","startCharacter":1,"startLine":2091},{"endCharacter":2,"endLine":2094,"kind":"region","startCharacter":71,"startLine":2093},{"endCharacter":2,"endLine":2096,"kind":"region","startCharacter":10,"startLine":2095},{"endLine":2108,"kind":"region","startCharacter":1,"startLine":2102},{"endCharacter":2,"endLine":2105,"kind":"region","startCharacter":70,"startLine":2104},{"endCharacter":2,"endLine":2107,"kind":"region","startCharacter":10,"startLine":2106},{"endLine":2117,"kind":"region","startCharacter":1,"startLine":2113},{"endLine":2125,"kind":"region","startCharacter":25,"startLine":2123},{"endLine":2131,"kind":"region","startCharacter":34,"startLine":2129},{"endLine":2141,"kind":"region","startCharacter":1,"startLine":2136},{"endCharacter":2,"endLine":2139,"kind":"region","startCharacter":30,"startLine":2137},{"endLine":2233,"kind":"region","startCharacter":29,"startLine":2145},{"endCharacter":2,"endLine":2231,"kind":"region","startCharacter":19,"startLine":2149},{"endCharacter":4,"endLine":2226,"kind":"region","startCharacter":30,"startLine":2150},{"endLine":2252,"kind":"region","startCharacter":1,"startLine":2238},{"endCharacter":2,"endLine":2250,"kind":"region","startCharacter":13,"startLine":2240},{"endCharacter":4,"endLine":2246,"kind":"region","startCharacter":15,"startLine":2242},{"endCharacter":4,"endLine":2249,"kind":"region","startCharacter":12,"startLine":2247},{"endLine":2265,"kind":"region","startCharacter":1,"startLine":2257},{"endCharacter":2,"endLine":2262,"kind":"region","startCharacter":32,"startLine":2258},{"endCharacter":2,"endLine":2264,"kind":"region","startCharacter":10,"startLine":2263},{"endLine":2279,"kind":"region","startCharacter":1,"startLine":2276},{"endLine":2350,"kind":"region","startCharacter":1,"startLine":2291},{"endCharacter":2,"endLine":2313,"kind":"region","startCharacter":32,"startLine":2312},{"endCharacter":2,"endLine":2333,"kind":"region","startCharacter":10,"startLine":2314},{"endCharacter":4,"endLine":2318,"kind":"region","startCharacter":26,"startLine":2316},{"endCharacter":4,"endLine":2332,"kind":"region","startCharacter":12,"startLine":2319},{"endCharacter":6,"endLine":2323,"kind":"region","startCharacter":40,"startLine":2321},{"endCharacter":6,"endLine":2328,"kind":"region","startCharacter":16,"startLine":2327},{"endCharacter":6,"endLine":2331,"kind":"region","startCharacter":14,"startLine":2329},{"endCharacter":2,"endLine":2347,"kind":"region","startCharacter":40,"startLine":2344},{"endLine":2365,"kind":"region","startCharacter":48,"startLine":2356},{"endCharacter":2,"endLine":2363,"kind":"region","startCharacter":32,"startLine":2357},{"endCharacter":4,"endLine":2362,"kind":"region","startCharacter":15,"startLine":2359},{"endLine":2477,"kind":"region","startCharacter":98,"startLine":2371},{"endCharacter":2,"endLine":2381,"kind":"region","startCharacter":41,"startLine":2378},{"endCharacter":2,"endLine":2417,"kind":"region","startCharacter":16,"startLine":2389},{"endCharacter":4,"endLine":2413,"kind":"region","startCharacter":13,"startLine":2391},{"endCharacter":6,"endLine":2396,"kind":"region","startCharacter":21,"startLine":2393},{"endCharacter":6,"endLine":2412,"kind":"region","startCharacter":14,"startLine":2397},{"endCharacter":8,"endLine":2400,"kind":"region","startCharacter":18,"startLine":2399},{"endCharacter":8,"endLine":2411,"kind":"region","startCharacter":16,"startLine":2401},{"endCharacter":10,"endLine":2409,"kind":"region","startCharacter":20,"startLine":2402},{"endCharacter":12,"endLine":2408,"kind":"region","startCharacter":52,"startLine":2405},{"endCharacter":4,"endLine":2416,"kind":"region","startCharacter":12,"startLine":2414},{"endCharacter":2,"endLine":2432,"kind":"region","startCharacter":13,"startLine":2419},{"endCharacter":4,"endLine":2421,"kind":"region","startCharacter":81,"startLine":2420},{"endCharacter":4,"endLine":2431,"kind":"region","startCharacter":12,"startLine":2422},{"endCharacter":6,"endLine":2426,"kind":"region","startCharacter":40,"startLine":2425},{"endCharacter":6,"endLine":2429,"kind":"region","startCharacter":39,"startLine":2428},{"endCharacter":2,"endLine":2475,"kind":"region","startCharacter":10,"startLine":2433},{"endCharacter":4,"endLine":2474,"kind":"region","startCharacter":24,"startLine":2434},{"endCharacter":6,"endLine":2466,"kind":"region","startCharacter":40,"startLine":2436},{"endCharacter":8,"endLine":2465,"kind":"region","startCharacter":20,"startLine":2438},{"endCharacter":10,"endLine":2445,"kind":"region","startCharacter":33,"startLine":2443},{"endCharacter":10,"endLine":2464,"kind":"region","startCharacter":24,"startLine":2447},{"endCharacter":12,"endLine":2462,"kind":"region","startCharacter":23,"startLine":2449},{"endCharacter":14,"endLine":2461,"kind":"region","startCharacter":35,"startLine":2452},{"endCharacter":16,"endLine":2458,"kind":"region","startCharacter":26,"startLine":2453},{"endCharacter":16,"endLine":2460,"kind":"region","startCharacter":24,"startLine":2459},{"endCharacter":6,"endLine":2473,"kind":"region","startCharacter":46,"startLine":2468},{"endLine":2506,"kind":"region","startCharacter":79,"startLine":2483},{"endCharacter":2,"endLine":2485,"kind":"region","startCharacter":32,"startLine":2484},{"endCharacter":2,"endLine":2505,"kind":"region","startCharacter":10,"startLine":2486},{"endCharacter":4,"endLine":2501,"kind":"region","startCharacter":13,"startLine":2498},{"endCharacter":4,"endLine":2503,"kind":"region","startCharacter":12,"startLine":2502},{"endLine":2522,"kind":"region","startCharacter":84,"startLine":2512},{"endCharacter":2,"endLine":2520,"kind":"region","startCharacter":11,"startLine":2515},{"endCharacter":4,"endLine":2519,"kind":"region","startCharacter":19,"startLine":2516},{"endLine":2592,"kind":"region","startCharacter":1,"startLine":2536},{"endCharacter":2,"endLine":2563,"kind":"region","startCharacter":15,"startLine":2539},{"endCharacter":4,"endLine":2562,"kind":"region","startCharacter":15,"startLine":2541},{"endCharacter":6,"endLine":2555,"kind":"region","startCharacter":28,"startLine":2544},{"endCharacter":8,"endLine":2548,"kind":"region","startCharacter":27,"startLine":2546},{"endCharacter":8,"endLine":2551,"kind":"region","startCharacter":19,"startLine":2550},{"endCharacter":8,"endLine":2554,"kind":"region","startCharacter":15,"startLine":2552},{"endCharacter":2,"endLine":2590,"kind":"region","startCharacter":10,"startLine":2564},{"endCharacter":4,"endLine":2581,"kind":"region","startCharacter":21,"startLine":2567},{"endCharacter":6,"endLine":2579,"kind":"region","startCharacter":25,"startLine":2569},{"endCharacter":8,"endLine":2578,"kind":"region","startCharacter":19,"startLine":2572},{"endCharacter":10,"endLine":2575,"kind":"region","startCharacter":69,"startLine":2573},{"endCharacter":10,"endLine":2577,"kind":"region","startCharacter":18,"startLine":2576},{"endLine":2613,"kind":"region","startCharacter":1,"startLine":2597},{"endCharacter":2,"endLine":2610,"kind":"region","startCharacter":24,"startLine":2600},{"endCharacter":4,"endLine":2604,"kind":"region","startCharacter":23,"startLine":2602},{"endCharacter":4,"endLine":2607,"kind":"region","startCharacter":15,"startLine":2606},{"endCharacter":4,"endLine":2609,"kind":"region","startCharacter":11,"startLine":2608},{"endLine":2631,"kind":"region","startCharacter":48,"startLine":2618},{"endCharacter":2,"endLine":2621,"kind":"region","startCharacter":62,"startLine":2620},{"endCharacter":2,"endLine":2630,"kind":"region","startCharacter":10,"startLine":2622},{"endCharacter":4,"endLine":2625,"kind":"region","startCharacter":16,"startLine":2624},{"endCharacter":4,"endLine":2628,"kind":"region","startCharacter":12,"startLine":2626},{"endLine":2687,"kind":"region","startCharacter":87,"startLine":2637},{"endCharacter":2,"endLine":2676,"kind":"region","startCharacter":41,"startLine":2647},{"endCharacter":4,"endLine":2660,"kind":"region","startCharacter":39,"startLine":2649},{"endCharacter":6,"endLine":2659,"kind":"region","startCharacter":24,"startLine":2651},{"endCharacter":4,"endLine":2667,"kind":"region","startCharacter":12,"startLine":2661},{"endCharacter":6,"endLine":2665,"kind":"region","startCharacter":19,"startLine":2664},{"endCharacter":4,"endLine":2674,"kind":"region","startCharacter":17,"startLine":2669},{"endCharacter":2,"endLine":2685,"kind":"region","startCharacter":63,"startLine":2682},{"endLine":2694,"kind":"region","startCharacter":70,"startLine":2693},{"endLine":2713,"kind":"region","startCharacter":29,"startLine":2709},{"endCharacter":2,"endLine":2711,"kind":"region","startCharacter":38,"startLine":2710},{"endLine":2731,"kind":"region","startCharacter":57,"startLine":2717},{"endCharacter":2,"endLine":2728,"kind":"region","startCharacter":25,"startLine":2726},{"endLine":2759,"kind":"region","startCharacter":1,"startLine":2739},{"endCharacter":2,"endLine":2751,"kind":"region","startCharacter":42,"startLine":2745},{"endCharacter":4,"endLine":2750,"kind":"region","startCharacter":22,"startLine":2747},{"endLine":2781,"kind":"region","startCharacter":54,"startLine":2763},{"endCharacter":2,"endLine":2778,"kind":"region","startCharacter":26,"startLine":2772},{"endCharacter":4,"endLine":2775,"kind":"region","startCharacter":77,"startLine":2773},{"endCharacter":4,"endLine":2777,"kind":"region","startCharacter":12,"startLine":2776},{"endCharacter":2,"endLine":2780,"kind":"region","startCharacter":10,"startLine":2779},{"endLine":2805,"kind":"region","startCharacter":1,"startLine":2786},{"endCharacter":2,"endLine":2792,"kind":"region","startCharacter":12,"startLine":2791},{"endCharacter":2,"endLine":2802,"kind":"region","startCharacter":10,"startLine":2793},{"endCharacter":4,"endLine":2801,"kind":"region","startCharacter":21,"startLine":2796},{"endCharacter":6,"endLine":2800,"kind":"region","startCharacter":16,"startLine":2798},{"endLine":2839,"kind":"region","startCharacter":1,"startLine":2817},{"endCharacter":2,"endLine":2836,"kind":"region","startCharacter":25,"startLine":2818},{"endCharacter":4,"endLine":2834,"kind":"region","startCharacter":16,"startLine":2823},{"endCharacter":6,"endLine":2830,"kind":"region","startCharacter":20,"startLine":2829},{"endCharacter":6,"endLine":2832,"kind":"region","startCharacter":14,"startLine":2831},{"endCharacter":2,"endLine":2838,"kind":"region","startCharacter":10,"startLine":2837},{"endLine":2852,"kind":"region","startCharacter":1,"startLine":2844},{"endCharacter":2,"endLine":2849,"kind":"region","startCharacter":25,"startLine":2845},{"endCharacter":2,"endLine":2851,"kind":"region","startCharacter":10,"startLine":2850},{"endLine":2860,"kind":"region","startCharacter":1,"startLine":2857},{"endLine":2896,"kind":"region","startCharacter":1,"startLine":2865},{"endCharacter":2,"endLine":2893,"kind":"region","startCharacter":13,"startLine":2866},{"endCharacter":4,"endLine":2874,"kind":"region","startCharacter":41,"startLine":2868},{"endCharacter":6,"endLine":2873,"kind":"region","startCharacter":18,"startLine":2870},{"endCharacter":4,"endLine":2891,"kind":"region","startCharacter":5,"startLine":2877},{"endCharacter":6,"endLine":2890,"kind":"region","startCharacter":18,"startLine":2879},{"endCharacter":1,"endLine":2884,"kind":"region","startCharacter":12,"startLine":2882},{"endCharacter":1,"endLine":2887,"kind":"region","startCharacter":9,"startLine":2885},{"endCharacter":2,"endLine":2895,"kind":"region","startCharacter":10,"startLine":2894},{"endLine":2907,"kind":"region","startCharacter":98,"startLine":2902},{"endCharacter":2,"endLine":2905,"kind":"region","startCharacter":62,"startLine":2904},{"endLine":2961,"kind":"region","startCharacter":79,"startLine":2912},{"endCharacter":2,"endLine":2923,"kind":"region","startCharacter":29,"startLine":2920},{"endCharacter":2,"endLine":2930,"kind":"region","startCharacter":3,"startLine":2928},{"endCharacter":2,"endLine":2932,"kind":"region","startCharacter":10,"startLine":2931},{"endCharacter":2,"endLine":2937,"kind":"region","startCharacter":21,"startLine":2935},{"endCharacter":2,"endLine":2954,"kind":"region","startCharacter":11,"startLine":2944},{"endCharacter":4,"endLine":2947,"kind":"region","startCharacter":31,"startLine":2945},{"endCharacter":4,"endLine":2951,"kind":"region","startCharacter":12,"startLine":2948},{"endCharacter":2,"endLine":2956,"kind":"region","startCharacter":10,"startLine":2955},{"endLine":3052,"kind":"region","startCharacter":45,"startLine":3032},{"endCharacter":2,"endLine":3038,"kind":"region","startCharacter":27,"startLine":3033},{"endLine":3065,"kind":"region","startCharacter":41,"startLine":3064},{"endLine":3136,"kind":"region","startCharacter":16,"startLine":3084},{"endCharacter":2,"endLine":3135,"kind":"region","startCharacter":26,"startLine":3085},{"endCharacter":4,"endLine":3098,"kind":"region","startCharacter":5,"startLine":3095},{"endCharacter":4,"endLine":3107,"kind":"region","startCharacter":5,"startLine":3102},{"endCharacter":6,"endLine":3106,"kind":"region","startCharacter":24,"startLine":3103},{"endCharacter":4,"endLine":3117,"kind":"region","startCharacter":5,"startLine":3111},{"endCharacter":4,"endLine":3124,"kind":"region","startCharacter":5,"startLine":3121},{"endCharacter":4,"endLine":3129,"kind":"region","startCharacter":5,"startLine":3128},{"endCharacter":4,"endLine":3134,"kind":"region","startCharacter":5,"startLine":3133},{"endLine":3150,"kind":"region","startCharacter":16,"startLine":3140},{"endCharacter":2,"endLine":3149,"kind":"region","startCharacter":46,"startLine":3141},{"endCharacter":4,"endLine":3148,"kind":"region","startCharacter":5,"startLine":3145},{"endLine":3309,"kind":"region","startCharacter":16,"startLine":3186},{"endCharacter":2,"endLine":3300,"kind":"region","startCharacter":25,"startLine":3190},{"endCharacter":4,"endLine":3211,"kind":"region","startCharacter":5,"startLine":3210},{"endCharacter":4,"endLine":3217,"kind":"region","startCharacter":5,"startLine":3216},{"endCharacter":4,"endLine":3222,"kind":"region","startCharacter":5,"startLine":3221},{"endCharacter":4,"endLine":3234,"kind":"region","startCharacter":5,"startLine":3229},{"endCharacter":4,"endLine":3240,"kind":"region","startCharacter":5,"startLine":3239},{"endCharacter":4,"endLine":3249,"kind":"region","startCharacter":5,"startLine":3244},{"endCharacter":4,"endLine":3254,"kind":"region","startCharacter":5,"startLine":3253},{"endCharacter":4,"endLine":3259,"kind":"region","startCharacter":5,"startLine":3258},{"endCharacter":4,"endLine":3264,"kind":"region","startCharacter":5,"startLine":3263},{"endCharacter":4,"endLine":3269,"kind":"region","startCharacter":5,"startLine":3268},{"endCharacter":4,"endLine":3274,"kind":"region","startCharacter":5,"startLine":3273},{"endCharacter":4,"endLine":3279,"kind":"region","startCharacter":5,"startLine":3278},{"endCharacter":4,"endLine":3284,"kind":"region","startCharacter":5,"startLine":3283},{"endCharacter":4,"endLine":3289,"kind":"region","startCharacter":5,"startLine":3288},{"endCharacter":4,"endLine":3299,"kind":"region","startCharacter":41,"startLine":3292},{"endCharacter":6,"endLine":3297,"kind":"region","startCharacter":18,"startLine":3295},{"endCharacter":2,"endLine":3307,"kind":"region","startCharacter":3,"startLine":3305},{"endLine":3355,"kind":"region","startCharacter":1,"startLine":3315},{"endCharacter":2,"endLine":3320,"kind":"region","startCharacter":27,"startLine":3317},{"endCharacter":2,"endLine":3324,"kind":"region","startCharacter":32,"startLine":3321},{"endCharacter":2,"endLine":3332,"kind":"region","startCharacter":33,"startLine":3325},{"endCharacter":4,"endLine":3329,"kind":"region","startCharacter":28,"startLine":3327},{"endCharacter":4,"endLine":3331,"kind":"region","startCharacter":12,"startLine":3330},{"endCharacter":2,"endLine":3352,"kind":"region","startCharacter":3,"startLine":3335},{"endCharacter":4,"endLine":3340,"kind":"region","startCharacter":28,"startLine":3338},{"endCharacter":4,"endLine":3342,"kind":"region","startCharacter":12,"startLine":3341},{"endCharacter":4,"endLine":3351,"kind":"region","startCharacter":20,"startLine":3344},{"endCharacter":6,"endLine":3348,"kind":"region","startCharacter":30,"startLine":3346},{"endCharacter":6,"endLine":3350,"kind":"region","startCharacter":14,"startLine":3349},{"endLine":3391,"kind":"region","startCharacter":58,"startLine":3366},{"endCharacter":2,"endLine":3389,"kind":"region","startCharacter":31,"startLine":3368},{"endCharacter":3,"endLine":3373,"kind":"region","startCharacter":46,"startLine":3372},{"endCharacter":3,"endLine":3388,"kind":"region","startCharacter":11,"startLine":3374},{"endCharacter":5,"endLine":3377,"kind":"region","startCharacter":18,"startLine":3376},{"endCharacter":5,"endLine":3379,"kind":"region","startCharacter":25,"startLine":3378},{"endCharacter":5,"endLine":3381,"kind":"region","startCharacter":13,"startLine":3380},{"endCharacter":5,"endLine":3387,"kind":"region","startCharacter":32,"startLine":3385},{"endLine":3439,"kind":"region","startCharacter":1,"startLine":3397},{"endCharacter":2,"endLine":3406,"kind":"region","startCharacter":25,"startLine":3399},{"endCharacter":4,"endLine":3403,"kind":"region","startCharacter":17,"startLine":3401},{"endCharacter":4,"endLine":3405,"kind":"region","startCharacter":12,"startLine":3404},{"endCharacter":2,"endLine":3417,"kind":"region","startCharacter":26,"startLine":3409},{"endCharacter":4,"endLine":3413,"kind":"region","startCharacter":28,"startLine":3411},{"endCharacter":4,"endLine":3416,"kind":"region","startCharacter":12,"startLine":3414},{"endCharacter":2,"endLine":3436,"kind":"region","startCharacter":3,"startLine":3420},{"endCharacter":4,"endLine":3425,"kind":"region","startCharacter":28,"startLine":3423},{"endCharacter":4,"endLine":3427,"kind":"region","startCharacter":12,"startLine":3426},{"endCharacter":4,"endLine":3435,"kind":"region","startCharacter":20,"startLine":3429},{"endCharacter":6,"endLine":3434,"kind":"region","startCharacter":70,"startLine":3432},{"endLine":3494,"kind":"region","startCharacter":1,"startLine":3461},{"endCharacter":2,"endLine":3471,"kind":"region","startCharacter":26,"startLine":3463},{"endCharacter":4,"endLine":3467,"kind":"region","startCharacter":28,"startLine":3465},{"endCharacter":4,"endLine":3470,"kind":"region","startCharacter":12,"startLine":3468},{"endCharacter":2,"endLine":3478,"kind":"region","startCharacter":10,"startLine":3472},{"endCharacter":4,"endLine":3477,"kind":"region","startCharacter":25,"startLine":3475},{"endCharacter":2,"endLine":3491,"kind":"region","startCharacter":3,"startLine":3481},{"endCharacter":4,"endLine":3489,"kind":"region","startCharacter":67,"startLine":3487},{"endLine":3516,"kind":"region","startCharacter":1,"startLine":3501},{"endCharacter":2,"endLine":3509,"kind":"region","startCharacter":48,"startLine":3504},{"endCharacter":2,"endLine":3513,"kind":"region","startCharacter":60,"startLine":3510},{"endLine":3528,"kind":"region","startCharacter":1,"startLine":3526},{"endLine":3545,"kind":"region","startCharacter":1,"startLine":3535},{"endCharacter":2,"endLine":3540,"kind":"region","startCharacter":42,"startLine":3537},{"endCharacter":2,"endLine":3543,"kind":"region","startCharacter":10,"startLine":3541},{"endLine":3552,"kind":"region","startCharacter":1,"startLine":3551},{"endLine":3595,"kind":"region","startCharacter":1,"startLine":3558},{"endCharacter":2,"endLine":3562,"kind":"region","startCharacter":25,"startLine":3560},{"endCharacter":2,"endLine":3573,"kind":"region","startCharacter":26,"startLine":3565},{"endCharacter":4,"endLine":3569,"kind":"region","startCharacter":28,"startLine":3567},{"endCharacter":4,"endLine":3572,"kind":"region","startCharacter":12,"startLine":3570},{"endCharacter":2,"endLine":3592,"kind":"region","startCharacter":3,"startLine":3576},{"endCharacter":4,"endLine":3581,"kind":"region","startCharacter":28,"startLine":3579},{"endCharacter":4,"endLine":3583,"kind":"region","startCharacter":12,"startLine":3582},{"endCharacter":4,"endLine":3591,"kind":"region","startCharacter":20,"startLine":3585},{"endCharacter":6,"endLine":3590,"kind":"region","startCharacter":76,"startLine":3588},{"endLine":3636,"kind":"region","startCharacter":1,"startLine":3602},{"endCharacter":2,"endLine":3612,"kind":"region","startCharacter":26,"startLine":3604},{"endCharacter":4,"endLine":3608,"kind":"region","startCharacter":28,"startLine":3606},{"endCharacter":4,"endLine":3611,"kind":"region","startCharacter":12,"startLine":3609},{"endCharacter":2,"endLine":3619,"kind":"region","startCharacter":10,"startLine":3613},{"endCharacter":4,"endLine":3618,"kind":"region","startCharacter":25,"startLine":3616},{"endCharacter":2,"endLine":3633,"kind":"region","startCharacter":3,"startLine":3622},{"endCharacter":4,"endLine":3631,"kind":"region","startCharacter":74,"startLine":3629},{"endLine":3658,"kind":"region","startCharacter":1,"startLine":3643},{"endCharacter":2,"endLine":3651,"kind":"region","startCharacter":42,"startLine":3646},{"endCharacter":2,"endLine":3655,"kind":"region","startCharacter":54,"startLine":3652},{"endLine":3755,"kind":"region","startCharacter":16,"startLine":3677},{"endCharacter":2,"endLine":3680,"kind":"region","startCharacter":25,"startLine":3679},{"endCharacter":2,"endLine":3685,"kind":"region","startCharacter":37,"startLine":3684},{"endCharacter":2,"endLine":3701,"kind":"region","startCharacter":34,"startLine":3700},{"endCharacter":2,"endLine":3712,"kind":"region","startCharacter":44,"startLine":3704},{"endCharacter":4,"endLine":3707,"kind":"region","startCharacter":57,"startLine":3705},{"endCharacter":4,"endLine":3711,"kind":"region","startCharacter":40,"startLine":3709},{"endCharacter":2,"endLine":3726,"kind":"region","startCharacter":52,"startLine":3718},{"endCharacter":4,"endLine":3721,"kind":"region","startCharacter":57,"startLine":3719},{"endCharacter":4,"endLine":3725,"kind":"region","startCharacter":40,"startLine":3723},{"endCharacter":2,"endLine":3731,"kind":"region","startCharacter":38,"startLine":3730},{"endCharacter":2,"endLine":3747,"kind":"region","startCharacter":48,"startLine":3737},{"endCharacter":4,"endLine":3742,"kind":"region","startCharacter":56,"startLine":3739},{"endCharacter":4,"endLine":3746,"kind":"region","startCharacter":36,"startLine":3744},{"endLine":3950,"kind":"region","startCharacter":16,"startLine":3759},{"endCharacter":2,"endLine":3766,"kind":"region","startCharacter":48,"startLine":3763},{"endCharacter":4,"endLine":3765,"kind":"region","startCharacter":53,"startLine":3764},{"endCharacter":2,"endLine":3772,"kind":"region","startCharacter":44,"startLine":3769},{"endCharacter":4,"endLine":3771,"kind":"region","startCharacter":44,"startLine":3770},{"endCharacter":2,"endLine":3778,"kind":"region","startCharacter":52,"startLine":3775},{"endCharacter":4,"endLine":3777,"kind":"region","startCharacter":38,"startLine":3776},{"endCharacter":2,"endLine":3784,"kind":"region","startCharacter":58,"startLine":3781},{"endCharacter":4,"endLine":3783,"kind":"region","startCharacter":44,"startLine":3782},{"endCharacter":2,"endLine":3790,"kind":"region","startCharacter":42,"startLine":3789},{"endCharacter":2,"endLine":3795,"kind":"region","startCharacter":51,"startLine":3794},{"endCharacter":2,"endLine":3820,"kind":"region","startCharacter":23,"startLine":3802},{"endCharacter":4,"endLine":3819,"kind":"region","startCharacter":49,"startLine":3803},{"endCharacter":6,"endLine":3815,"kind":"region","startCharacter":16,"startLine":3806},{"endCharacter":8,"endLine":3814,"kind":"region","startCharacter":29,"startLine":3810},{"endCharacter":10,"endLine":3812,"kind":"region","startCharacter":46,"startLine":3811},{"endCharacter":6,"endLine":3817,"kind":"region","startCharacter":14,"startLine":3816},{"endCharacter":2,"endLine":3825,"kind":"region","startCharacter":48,"startLine":3824},{"endCharacter":2,"endLine":3849,"kind":"region","startCharacter":23,"startLine":3829},{"endCharacter":4,"endLine":3848,"kind":"region","startCharacter":48,"startLine":3830},{"endCharacter":6,"endLine":3845,"kind":"region","startCharacter":16,"startLine":3831},{"endCharacter":1,"endLine":3842,"kind":"region","startCharacter":9,"startLine":3835},{"endCharacter":3,"endLine":3840,"kind":"region","startCharacter":27,"startLine":3838},{"endCharacter":1,"endLine":3844,"kind":"region","startCharacter":9,"startLine":3843},{"endCharacter":6,"endLine":3847,"kind":"region","startCharacter":14,"startLine":3846},{"endCharacter":2,"endLine":3865,"kind":"region","startCharacter":52,"startLine":3852},{"endCharacter":4,"endLine":3864,"kind":"region","startCharacter":49,"startLine":3853},{"endCharacter":6,"endLine":3861,"kind":"region","startCharacter":16,"startLine":3854},{"endCharacter":1,"endLine":3859,"kind":"region","startCharacter":29,"startLine":3858},{"endCharacter":6,"endLine":3863,"kind":"region","startCharacter":14,"startLine":3862},{"endCharacter":2,"endLine":3870,"kind":"region","startCharacter":46,"startLine":3869},{"endCharacter":2,"endLine":3885,"kind":"region","startCharacter":42,"startLine":3874},{"endCharacter":4,"endLine":3884,"kind":"region","startCharacter":35,"startLine":3875},{"endCharacter":6,"endLine":3882,"kind":"region","startCharacter":36,"startLine":3878},{"endCharacter":1,"endLine":3880,"kind":"region","startCharacter":25,"startLine":3879},{"endCharacter":2,"endLine":3907,"kind":"region","startCharacter":44,"startLine":3889},{"endCharacter":4,"endLine":3906,"kind":"region","startCharacter":35,"startLine":3890},{"endCharacter":6,"endLine":3900,"kind":"region","startCharacter":32,"startLine":3893},{"endCharacter":1,"endLine":3897,"kind":"region","startCharacter":26,"startLine":3894},{"endCharacter":1,"endLine":3899,"kind":"region","startCharacter":9,"startLine":3898},{"endCharacter":6,"endLine":3905,"kind":"region","startCharacter":14,"startLine":3901},{"endCharacter":1,"endLine":3903,"kind":"region","startCharacter":25,"startLine":3902},{"endCharacter":2,"endLine":3923,"kind":"region","startCharacter":45,"startLine":3911},{"endCharacter":4,"endLine":3922,"kind":"region","startCharacter":36,"startLine":3912},{"endCharacter":6,"endLine":3916,"kind":"region","startCharacter":27,"startLine":3915},{"endCharacter":6,"endLine":3921,"kind":"region","startCharacter":14,"startLine":3917},{"endCharacter":1,"endLine":3919,"kind":"region","startCharacter":25,"startLine":3918},{"endCharacter":2,"endLine":3928,"kind":"region","startCharacter":33,"startLine":3927},{"endCharacter":2,"endLine":3936,"kind":"region","startCharacter":45,"startLine":3932},{"endCharacter":4,"endLine":3935,"kind":"region","startCharacter":38,"startLine":3933},{"endCharacter":2,"endLine":3944,"kind":"region","startCharacter":47,"startLine":3940},{"endCharacter":4,"endLine":3943,"kind":"region","startCharacter":38,"startLine":3941},{"endCharacter":2,"endLine":3949,"kind":"region","startCharacter":36,"startLine":3948},{"endLine":4001,"kind":"region","startCharacter":15,"startLine":3956},{"endCharacter":2,"endLine":3979,"kind":"region","startCharacter":3,"startLine":3959},{"endCharacter":4,"endLine":3978,"kind":"region","startCharacter":5,"startLine":3962},{"endCharacter":6,"endLine":3975,"kind":"region","startCharacter":7,"startLine":3971},{"endCharacter":2,"endLine":3989,"kind":"region","startCharacter":3,"startLine":3984},{"endCharacter":4,"endLine":3988,"kind":"region","startCharacter":5,"startLine":3987},{"endCharacter":2,"endLine":3999,"kind":"region","startCharacter":3,"startLine":3994},{"endCharacter":4,"endLine":3998,"kind":"region","startCharacter":5,"startLine":3997},{"endLine":4032,"kind":"region","startCharacter":16,"startLine":4004},{"endCharacter":2,"endLine":4007,"kind":"region","startCharacter":41,"startLine":4005},{"endCharacter":2,"endLine":4015,"kind":"region","startCharacter":49,"startLine":4010},{"endCharacter":4,"endLine":4014,"kind":"region","startCharacter":54,"startLine":4012},{"endCharacter":2,"endLine":4022,"kind":"region","startCharacter":51,"startLine":4019},{"endCharacter":4,"endLine":4021,"kind":"region","startCharacter":35,"startLine":4020},{"endCharacter":2,"endLine":4030,"kind":"region","startCharacter":47,"startLine":4025},{"endCharacter":4,"endLine":4029,"kind":"region","startCharacter":50,"startLine":4027},{"endLine":4261,"kind":"region","startCharacter":16,"startLine":4035},{"endCharacter":2,"endLine":4047,"kind":"region","startCharacter":63,"startLine":4038},{"endCharacter":4,"endLine":4041,"kind":"region","startCharacter":18,"startLine":4039},{"endCharacter":4,"endLine":4043,"kind":"region","startCharacter":37,"startLine":4042},{"endCharacter":4,"endLine":4045,"kind":"region","startCharacter":48,"startLine":4044},{"endCharacter":2,"endLine":4087,"kind":"region","startCharacter":127,"startLine":4052},{"endCharacter":4,"endLine":4054,"kind":"region","startCharacter":20,"startLine":4053},{"endCharacter":4,"endLine":4070,"kind":"region","startCharacter":26,"startLine":4055},{"endCharacter":6,"endLine":4058,"kind":"region","startCharacter":18,"startLine":4057},{"endCharacter":6,"endLine":4060,"kind":"region","startCharacter":40,"startLine":4059},{"endCharacter":6,"endLine":4062,"kind":"region","startCharacter":53,"startLine":4061},{"endCharacter":6,"endLine":4065,"kind":"region","startCharacter":18,"startLine":4064},{"endCharacter":6,"endLine":4067,"kind":"region","startCharacter":14,"startLine":4066},{"endCharacter":4,"endLine":4086,"kind":"region","startCharacter":12,"startLine":4071},{"endCharacter":6,"endLine":4074,"kind":"region","startCharacter":19,"startLine":4073},{"endCharacter":6,"endLine":4076,"kind":"region","startCharacter":41,"startLine":4075},{"endCharacter":6,"endLine":4078,"kind":"region","startCharacter":45,"startLine":4077},{"endCharacter":6,"endLine":4081,"kind":"region","startCharacter":19,"startLine":4080},{"endCharacter":6,"endLine":4083,"kind":"region","startCharacter":14,"startLine":4082},{"endCharacter":2,"endLine":4095,"kind":"region","startCharacter":41,"startLine":4092},{"endCharacter":2,"endLine":4103,"kind":"region","startCharacter":48,"startLine":4100},{"endCharacter":2,"endLine":4109,"kind":"region","startCharacter":69,"startLine":4108},{"endCharacter":2,"endLine":4116,"kind":"region","startCharacter":25,"startLine":4113},{"endCharacter":4,"endLine":4115,"kind":"region","startCharacter":81,"startLine":4114},{"endCharacter":2,"endLine":4159,"kind":"region","startCharacter":79,"startLine":4121},{"endCharacter":4,"endLine":4144,"kind":"region","startCharacter":19,"startLine":4127},{"endCharacter":6,"endLine":4133,"kind":"region","startCharacter":22,"startLine":4132},{"endCharacter":6,"endLine":4143,"kind":"region","startCharacter":14,"startLine":4134},{"endCharacter":8,"endLine":4141,"kind":"region","startCharacter":24,"startLine":4138},{"endCharacter":4,"endLine":4158,"kind":"region","startCharacter":12,"startLine":4145},{"endCharacter":6,"endLine":4156,"kind":"region","startCharacter":22,"startLine":4153},{"endCharacter":2,"endLine":4222,"kind":"region","startCharacter":106,"startLine":4164},{"endCharacter":4,"endLine":4206,"kind":"region","startCharacter":19,"startLine":4169},{"endCharacter":6,"endLine":4190,"kind":"region","startCharacter":22,"startLine":4170},{"endCharacter":8,"endLine":4179,"kind":"region","startCharacter":33,"startLine":4172},{"endCharacter":8,"endLine":4189,"kind":"region","startCharacter":16,"startLine":4180},{"endCharacter":6,"endLine":4205,"kind":"region","startCharacter":14,"startLine":4191},{"endCharacter":8,"endLine":4196,"kind":"region","startCharacter":40,"startLine":4193},{"endCharacter":8,"endLine":4204,"kind":"region","startCharacter":71,"startLine":4201},{"endCharacter":4,"endLine":4221,"kind":"region","startCharacter":12,"startLine":4207},{"endCharacter":6,"endLine":4212,"kind":"region","startCharacter":38,"startLine":4209},{"endCharacter":6,"endLine":4220,"kind":"region","startCharacter":70,"startLine":4217},{"endCharacter":2,"endLine":4260,"kind":"region","startCharacter":73,"startLine":4227},{"endCharacter":4,"endLine":4248,"kind":"region","startCharacter":19,"startLine":4232},{"endCharacter":6,"endLine":4238,"kind":"region","startCharacter":22,"startLine":4235},{"endCharacter":6,"endLine":4247,"kind":"region","startCharacter":14,"startLine":4239},{"endCharacter":8,"endLine":4246,"kind":"region","startCharacter":26,"startLine":4242},{"endCharacter":4,"endLine":4259,"kind":"region","startCharacter":12,"startLine":4249},{"endCharacter":6,"endLine":4258,"kind":"region","startCharacter":24,"startLine":4254},{"endLine":4302,"kind":"region","startCharacter":15,"startLine":4274},{"endCharacter":2,"endLine":4278,"kind":"region","startCharacter":26,"startLine":4276},{"endCharacter":2,"endLine":4284,"kind":"region","startCharacter":98,"startLine":4282},{"endCharacter":2,"endLine":4290,"kind":"region","startCharacter":30,"startLine":4288},{"endCharacter":2,"endLine":4301,"kind":"region","startCharacter":3,"startLine":4296},{"endCharacter":4,"endLine":4299,"kind":"region","startCharacter":31,"startLine":4298},{"endLine":4530,"kind":"region","startCharacter":16,"startLine":4307},{"endCharacter":2,"endLine":4348,"kind":"region","startCharacter":3,"startLine":4310},{"endCharacter":4,"endLine":4323,"kind":"region","startCharacter":5,"startLine":4322},{"endCharacter":4,"endLine":4334,"kind":"region","startCharacter":5,"startLine":4328},{"endCharacter":6,"endLine":4331,"kind":"region","startCharacter":18,"startLine":4330},{"endCharacter":6,"endLine":4333,"kind":"region","startCharacter":14,"startLine":4332},{"endCharacter":4,"endLine":4344,"kind":"region","startCharacter":5,"startLine":4338},{"endCharacter":6,"endLine":4341,"kind":"region","startCharacter":18,"startLine":4340},{"endCharacter":6,"endLine":4343,"kind":"region","startCharacter":14,"startLine":4342},{"endCharacter":2,"endLine":4359,"kind":"region","startCharacter":3,"startLine":4353},{"endCharacter":4,"endLine":4358,"kind":"region","startCharacter":5,"startLine":4357},{"endCharacter":2,"endLine":4395,"kind":"region","startCharacter":3,"startLine":4366},{"endCharacter":4,"endLine":4380,"kind":"region","startCharacter":29,"startLine":4379},{"endCharacter":4,"endLine":4385,"kind":"region","startCharacter":5,"startLine":4384},{"endCharacter":4,"endLine":4393,"kind":"region","startCharacter":5,"startLine":4389},{"endCharacter":6,"endLine":4391,"kind":"region","startCharacter":19,"startLine":4390},{"endCharacter":2,"endLine":4421,"kind":"region","startCharacter":3,"startLine":4402},{"endCharacter":4,"endLine":4420,"kind":"region","startCharacter":5,"startLine":4416},{"endCharacter":6,"endLine":4418,"kind":"region","startCharacter":19,"startLine":4417},{"endCharacter":2,"endLine":4468,"kind":"region","startCharacter":3,"startLine":4428},{"endCharacter":4,"endLine":4446,"kind":"region","startCharacter":29,"startLine":4441},{"endCharacter":6,"endLine":4443,"kind":"region","startCharacter":33,"startLine":4442},{"endCharacter":6,"endLine":4445,"kind":"region","startCharacter":14,"startLine":4444},{"endCharacter":4,"endLine":4451,"kind":"region","startCharacter":5,"startLine":4450},{"endCharacter":4,"endLine":4463,"kind":"region","startCharacter":5,"startLine":4455},{"endCharacter":6,"endLine":4461,"kind":"region","startCharacter":19,"startLine":4456},{"endCharacter":1,"endLine":4458,"kind":"region","startCharacter":28,"startLine":4457},{"endCharacter":1,"endLine":4460,"kind":"region","startCharacter":9,"startLine":4459},{"endCharacter":2,"endLine":4499,"kind":"region","startCharacter":3,"startLine":4475},{"endCharacter":4,"endLine":4498,"kind":"region","startCharacter":5,"startLine":4490},{"endCharacter":6,"endLine":4496,"kind":"region","startCharacter":19,"startLine":4491},{"endCharacter":1,"endLine":4493,"kind":"region","startCharacter":37,"startLine":4492},{"endCharacter":1,"endLine":4495,"kind":"region","startCharacter":9,"startLine":4494},{"endCharacter":2,"endLine":4507,"kind":"region","startCharacter":3,"startLine":4506},{"endCharacter":2,"endLine":4514,"kind":"region","startCharacter":3,"startLine":4513},{"endCharacter":2,"endLine":4521,"kind":"region","startCharacter":3,"startLine":4520},{"endCharacter":2,"endLine":4528,"kind":"region","startCharacter":3,"startLine":4527},{"endLine":4758,"kind":"region","startCharacter":1,"startLine":4535},{"endCharacter":2,"endLine":4569,"kind":"region","startCharacter":3,"startLine":4538},{"endCharacter":4,"endLine":4558,"kind":"region","startCharacter":5,"startLine":4545},{"endCharacter":6,"endLine":4548,"kind":"region","startCharacter":11,"startLine":4547},{"endCharacter":6,"endLine":4557,"kind":"region","startCharacter":48,"startLine":4549},{"endCharacter":1,"endLine":4553,"kind":"region","startCharacter":25,"startLine":4552},{"endCharacter":4,"endLine":4564,"kind":"region","startCharacter":5,"startLine":4562},{"endCharacter":2,"endLine":4578,"kind":"region","startCharacter":3,"startLine":4574},{"endCharacter":2,"endLine":4673,"kind":"region","startCharacter":3,"startLine":4583},{"endCharacter":4,"endLine":4603,"kind":"region","startCharacter":5,"startLine":4602},{"endCharacter":4,"endLine":4608,"kind":"region","startCharacter":24,"startLine":4607},{"endCharacter":4,"endLine":4613,"kind":"region","startCharacter":5,"startLine":4612},{"endCharacter":4,"endLine":4618,"kind":"region","startCharacter":5,"startLine":4617},{"endCharacter":4,"endLine":4624,"kind":"region","startCharacter":5,"startLine":4622},{"endCharacter":4,"endLine":4630,"kind":"region","startCharacter":5,"startLine":4628},{"endCharacter":4,"endLine":4636,"kind":"region","startCharacter":5,"startLine":4634},{"endCharacter":4,"endLine":4641,"kind":"region","startCharacter":5,"startLine":4640},{"endCharacter":4,"endLine":4647,"kind":"region","startCharacter":5,"startLine":4645},{"endCharacter":4,"endLine":4652,"kind":"region","startCharacter":5,"startLine":4651},{"endCharacter":4,"endLine":4657,"kind":"region","startCharacter":5,"startLine":4656},{"endCharacter":4,"endLine":4662,"kind":"region","startCharacter":5,"startLine":4661},{"endCharacter":4,"endLine":4668,"kind":"region","startCharacter":5,"startLine":4667},{"endCharacter":2,"endLine":4756,"kind":"region","startCharacter":3,"startLine":4679},{"endCharacter":4,"endLine":4696,"kind":"region","startCharacter":5,"startLine":4691},{"endCharacter":6,"endLine":4693,"kind":"region","startCharacter":35,"startLine":4692},{"endCharacter":4,"endLine":4701,"kind":"region","startCharacter":5,"startLine":4700},{"endCharacter":4,"endLine":4706,"kind":"region","startCharacter":5,"startLine":4705},{"endCharacter":4,"endLine":4711,"kind":"region","startCharacter":5,"startLine":4710},{"endCharacter":4,"endLine":4716,"kind":"region","startCharacter":5,"startLine":4715},{"endCharacter":4,"endLine":4721,"kind":"region","startCharacter":5,"startLine":4720},{"endCharacter":4,"endLine":4726,"kind":"region","startCharacter":5,"startLine":4725},{"endCharacter":4,"endLine":4731,"kind":"region","startCharacter":5,"startLine":4730},{"endCharacter":4,"endLine":4736,"kind":"region","startCharacter":5,"startLine":4735},{"endCharacter":4,"endLine":4741,"kind":"region","startCharacter":5,"startLine":4740},{"endCharacter":4,"endLine":4752,"kind":"region","startCharacter":5,"startLine":4745},{"endCharacter":6,"endLine":4750,"kind":"region","startCharacter":42,"startLine":4747},{"endLine":4781,"kind":"region","startCharacter":16,"startLine":4765},{"endCharacter":2,"endLine":4768,"kind":"region","startCharacter":39,"startLine":4766},{"endCharacter":2,"endLine":4774,"kind":"region","startCharacter":46,"startLine":4770},{"endCharacter":4,"endLine":4773,"kind":"region","startCharacter":54,"startLine":4772},{"endCharacter":2,"endLine":4780,"kind":"region","startCharacter":45,"startLine":4776},{"endCharacter":4,"endLine":4779,"kind":"region","startCharacter":50,"startLine":4778},{"endLine":4861,"kind":"region","startCharacter":16,"startLine":4785},{"endCharacter":2,"endLine":4794,"kind":"region","startCharacter":48,"startLine":4788},{"endCharacter":4,"endLine":4793,"kind":"region","startCharacter":40,"startLine":4792},{"endCharacter":2,"endLine":4831,"kind":"region","startCharacter":30,"startLine":4798},{"endCharacter":4,"endLine":4830,"kind":"region","startCharacter":53,"startLine":4802},{"endCharacter":6,"endLine":4809,"kind":"region","startCharacter":59,"startLine":4803},{"endCharacter":1,"endLine":4808,"kind":"region","startCharacter":83,"startLine":4806},{"endCharacter":6,"endLine":4828,"kind":"region","startCharacter":41,"startLine":4810},{"endCharacter":1,"endLine":4820,"kind":"region","startCharacter":6,"startLine":4811},{"endCharacter":3,"endLine":4817,"kind":"region","startCharacter":13,"startLine":4813},{"endCharacter":3,"endLine":4819,"kind":"region","startCharacter":11,"startLine":4818},{"endCharacter":1,"endLine":4827,"kind":"region","startCharacter":30,"startLine":4821},{"endCharacter":3,"endLine":4825,"kind":"region","startCharacter":13,"startLine":4822},{"endCharacter":5,"endLine":4824,"kind":"region","startCharacter":29,"startLine":4823},{"endCharacter":2,"endLine":4860,"kind":"region","startCharacter":29,"startLine":4835},{"endCharacter":4,"endLine":4859,"kind":"region","startCharacter":48,"startLine":4841},{"endCharacter":6,"endLine":4845,"kind":"region","startCharacter":37,"startLine":4844},{"endCharacter":6,"endLine":4855,"kind":"region","startCharacter":39,"startLine":4849},{"endCharacter":1,"endLine":4853,"kind":"region","startCharacter":68,"startLine":4852},{"endCharacter":6,"endLine":4858,"kind":"region","startCharacter":14,"startLine":4856},{"endCharacter":2,"endLine":4885,"kind":"region","startCharacter":18,"startLine":4865},{"endCharacter":4,"endLine":4870,"kind":"region","startCharacter":44,"startLine":4867},{"endCharacter":6,"endLine":4869,"kind":"region","startCharacter":86,"startLine":4868},{"endCharacter":4,"endLine":4877,"kind":"region","startCharacter":43,"startLine":4874},{"endCharacter":6,"endLine":4876,"kind":"region","startCharacter":61,"startLine":4875},{"endCharacter":4,"endLine":4884,"kind":"region","startCharacter":41,"startLine":4881},{"endCharacter":6,"endLine":4883,"kind":"region","startCharacter":56,"startLine":4882},{"endCharacter":6,"endLine":4895,"kind":"region","startCharacter":22,"startLine":4889},{"endCharacter":1,"endLine":4894,"kind":"region","startCharacter":79,"startLine":4890},{"endCharacter":3,"endLine":4893,"kind":"region","startCharacter":35,"startLine":4892},{"endCharacter":4,"endLine":4899,"kind":"region","startCharacter":119,"startLine":4898},{"endCharacter":4,"endLine":4902,"kind":"region","startCharacter":88,"startLine":4901},{"endCharacter":4,"endLine":4905,"kind":"region","startCharacter":85,"startLine":4904},{"endCharacter":4,"endLine":4908,"kind":"region","startCharacter":112,"startLine":4907},{"endLine":4915,"kind":"region","startCharacter":1,"startLine":4913},{"endLine":4924,"kind":"region","startCharacter":1,"startLine":4922},{"endLine":4941,"kind":"region","startCharacter":1,"startLine":4931},{"endCharacter":2,"endLine":4936,"kind":"region","startCharacter":48,"startLine":4933},{"endCharacter":2,"endLine":4939,"kind":"region","startCharacter":10,"startLine":4937},{"endCharacter":4,"endLine":4945,"kind":"region","startCharacter":208,"startLine":4944},{"endCharacter":4,"endLine":4948,"kind":"region","startCharacter":173,"startLine":4947},{"endCharacter":4,"endLine":4951,"kind":"region","startCharacter":229,"startLine":4950},{"endCharacter":4,"endLine":4954,"kind":"region","startCharacter":165,"startLine":4953},{"endCharacter":4,"endLine":4957,"kind":"region","startCharacter":131,"startLine":4956},{"endCharacter":4,"endLine":4968,"kind":"region","startCharacter":154,"startLine":4959},{"endCharacter":6,"endLine":4963,"kind":"region","startCharacter":35,"startLine":4961},{"endCharacter":4,"endLine":4979,"kind":"region","startCharacter":167,"startLine":4970},{"endCharacter":6,"endLine":4974,"kind":"region","startCharacter":35,"startLine":4972},{"endCharacter":4,"endLine":4990,"kind":"region","startCharacter":111,"startLine":4981},{"endCharacter":6,"endLine":4985,"kind":"region","startCharacter":35,"startLine":4983},{"endCharacter":4,"endLine":5001,"kind":"region","startCharacter":111,"startLine":4992},{"endCharacter":6,"endLine":4996,"kind":"region","startCharacter":35,"startLine":4994},{"endCharacter":4,"endLine":5004,"kind":"region","startCharacter":173,"startLine":5003},{"endLine":5038,"kind":"region","startCharacter":16,"startLine":5007},{"endCharacter":2,"endLine":5010,"kind":"region","startCharacter":48,"startLine":5008},{"endCharacter":2,"endLine":5019,"kind":"region","startCharacter":26,"startLine":5014},{"endCharacter":4,"endLine":5018,"kind":"region","startCharacter":74,"startLine":5017},{"endCharacter":2,"endLine":5037,"kind":"region","startCharacter":50,"startLine":5023},{"endCharacter":4,"endLine":5036,"kind":"region","startCharacter":66,"startLine":5031},{"endCharacter":6,"endLine":5034,"kind":"region","startCharacter":79,"startLine":5033},{"endCharacter":4,"endLine":5042,"kind":"region","startCharacter":174,"startLine":5041},{"endCharacter":4,"endLine":5049,"kind":"region","startCharacter":103,"startLine":5044},{"endCharacter":4,"endLine":5052,"kind":"region","startCharacter":120,"startLine":5051},{"endLine":5062,"kind":"region","startCharacter":1,"startLine":5061},{"endLine":5078,"kind":"region","startCharacter":1,"startLine":5068},{"endCharacter":2,"endLine":5076,"kind":"region","startCharacter":23,"startLine":5071},{"endCharacter":4,"endLine":5073,"kind":"region","startCharacter":39,"startLine":5072},{"endCharacter":4,"endLine":5075,"kind":"region","startCharacter":12,"startLine":5074},{"endLine":9311,"kind":"region","startCharacter":12,"startLine":5082},{"endLine":5102,"kind":"region","startCharacter":82,"startLine":5084},{"endCharacter":2,"endLine":5095,"kind":"region","startCharacter":25,"startLine":5094},{"endLine":5133,"kind":"region","startCharacter":81,"startLine":5106},{"endCharacter":2,"endLine":5118,"kind":"region","startCharacter":25,"startLine":5117},{"endCharacter":2,"endLine":5122,"kind":"region","startCharacter":7,"startLine":5121},{"endCharacter":2,"endLine":5128,"kind":"region","startCharacter":37,"startLine":5123},{"endCharacter":4,"endLine":5127,"kind":"region","startCharacter":5,"startLine":5124},{"endLine":5170,"kind":"region","startCharacter":111,"startLine":5137},{"endCharacter":2,"endLine":5150,"kind":"region","startCharacter":25,"startLine":5149},{"endCharacter":2,"endLine":5155,"kind":"region","startCharacter":27,"startLine":5154},{"endCharacter":2,"endLine":5159,"kind":"region","startCharacter":7,"startLine":5158},{"endCharacter":2,"endLine":5165,"kind":"region","startCharacter":37,"startLine":5160},{"endCharacter":4,"endLine":5164,"kind":"region","startCharacter":5,"startLine":5161},{"endLine":5199,"kind":"region","startCharacter":111,"startLine":5174},{"endCharacter":2,"endLine":5184,"kind":"region","startCharacter":25,"startLine":5183},{"endCharacter":2,"endLine":5188,"kind":"region","startCharacter":7,"startLine":5187},{"endCharacter":2,"endLine":5194,"kind":"region","startCharacter":37,"startLine":5189},{"endCharacter":4,"endLine":5193,"kind":"region","startCharacter":5,"startLine":5190},{"endLine":5241,"kind":"region","startCharacter":80,"startLine":5203},{"endCharacter":2,"endLine":5206,"kind":"region","startCharacter":23,"startLine":5205},{"endCharacter":2,"endLine":5218,"kind":"region","startCharacter":18,"startLine":5211},{"endCharacter":4,"endLine":5217,"kind":"region","startCharacter":13,"startLine":5216},{"endCharacter":2,"endLine":5233,"kind":"region","startCharacter":18,"startLine":5220},{"endCharacter":4,"endLine":5232,"kind":"region","startCharacter":13,"startLine":5225},{"endCharacter":6,"endLine":5228,"kind":"region","startCharacter":7,"startLine":5226},{"endCharacter":6,"endLine":5231,"kind":"region","startCharacter":15,"startLine":5230},{"endCharacter":40,"endLine":5239,"kind":"region","startCharacter":37,"startLine":5237},{"endLine":5278,"kind":"region","startCharacter":111,"startLine":5245},{"endCharacter":2,"endLine":5258,"kind":"region","startCharacter":25,"startLine":5257},{"endCharacter":2,"endLine":5263,"kind":"region","startCharacter":27,"startLine":5262},{"endCharacter":2,"endLine":5267,"kind":"region","startCharacter":7,"startLine":5266},{"endCharacter":2,"endLine":5273,"kind":"region","startCharacter":37,"startLine":5268},{"endCharacter":4,"endLine":5272,"kind":"region","startCharacter":5,"startLine":5269},{"endLine":5307,"kind":"region","startCharacter":111,"startLine":5282},{"endCharacter":2,"endLine":5292,"kind":"region","startCharacter":25,"startLine":5291},{"endCharacter":2,"endLine":5296,"kind":"region","startCharacter":7,"startLine":5295},{"endCharacter":2,"endLine":5302,"kind":"region","startCharacter":37,"startLine":5297},{"endCharacter":4,"endLine":5301,"kind":"region","startCharacter":5,"startLine":5298},{"endLine":5349,"kind":"region","startCharacter":80,"startLine":5311},{"endCharacter":2,"endLine":5314,"kind":"region","startCharacter":23,"startLine":5313},{"endCharacter":2,"endLine":5326,"kind":"region","startCharacter":18,"startLine":5319},{"endCharacter":4,"endLine":5325,"kind":"region","startCharacter":13,"startLine":5324},{"endCharacter":2,"endLine":5341,"kind":"region","startCharacter":18,"startLine":5328},{"endCharacter":4,"endLine":5340,"kind":"region","startCharacter":13,"startLine":5333},{"endCharacter":6,"endLine":5336,"kind":"region","startCharacter":7,"startLine":5334},{"endCharacter":6,"endLine":5339,"kind":"region","startCharacter":15,"startLine":5338},{"endCharacter":40,"endLine":5347,"kind":"region","startCharacter":37,"startLine":5345},{"endLine":5386,"kind":"region","startCharacter":84,"startLine":5353},{"endCharacter":2,"endLine":5367,"kind":"region","startCharacter":25,"startLine":5366},{"endCharacter":2,"endLine":5372,"kind":"region","startCharacter":25,"startLine":5371},{"endCharacter":2,"endLine":5375,"kind":"region","startCharacter":15,"startLine":5374},{"endCharacter":2,"endLine":5379,"kind":"region","startCharacter":7,"startLine":5378},{"endCharacter":2,"endLine":5381,"kind":"region","startCharacter":38,"startLine":5380},{"endLine":5423,"kind":"region","startCharacter":81,"startLine":5390},{"endCharacter":2,"endLine":5404,"kind":"region","startCharacter":25,"startLine":5403},{"endCharacter":2,"endLine":5409,"kind":"region","startCharacter":25,"startLine":5408},{"endCharacter":2,"endLine":5412,"kind":"region","startCharacter":15,"startLine":5411},{"endCharacter":2,"endLine":5416,"kind":"region","startCharacter":7,"startLine":5415},{"endCharacter":2,"endLine":5418,"kind":"region","startCharacter":38,"startLine":5417},{"endLine":5446,"kind":"region","startCharacter":80,"startLine":5427},{"endCharacter":2,"endLine":5439,"kind":"region","startCharacter":25,"startLine":5438},{"endLine":5477,"kind":"region","startCharacter":80,"startLine":5450},{"endCharacter":2,"endLine":5462,"kind":"region","startCharacter":25,"startLine":5461},{"endCharacter":2,"endLine":5466,"kind":"region","startCharacter":7,"startLine":5465},{"endCharacter":2,"endLine":5472,"kind":"region","startCharacter":37,"startLine":5467},{"endCharacter":4,"endLine":5471,"kind":"region","startCharacter":5,"startLine":5468},{"endLine":5508,"kind":"region","startCharacter":84,"startLine":5481},{"endCharacter":2,"endLine":5493,"kind":"region","startCharacter":25,"startLine":5492},{"endCharacter":2,"endLine":5497,"kind":"region","startCharacter":7,"startLine":5496},{"endCharacter":2,"endLine":5503,"kind":"region","startCharacter":37,"startLine":5498},{"endCharacter":4,"endLine":5502,"kind":"region","startCharacter":5,"startLine":5499},{"endLine":5539,"kind":"region","startCharacter":84,"startLine":5512},{"endCharacter":2,"endLine":5524,"kind":"region","startCharacter":25,"startLine":5523},{"endCharacter":2,"endLine":5528,"kind":"region","startCharacter":7,"startLine":5527},{"endCharacter":2,"endLine":5534,"kind":"region","startCharacter":37,"startLine":5529},{"endCharacter":4,"endLine":5533,"kind":"region","startCharacter":5,"startLine":5530},{"endLine":5577,"kind":"region","startCharacter":83,"startLine":5543},{"endCharacter":2,"endLine":5557,"kind":"region","startCharacter":25,"startLine":5556},{"endCharacter":2,"endLine":5562,"kind":"region","startCharacter":27,"startLine":5561},{"endCharacter":2,"endLine":5566,"kind":"region","startCharacter":7,"startLine":5565},{"endCharacter":2,"endLine":5572,"kind":"region","startCharacter":37,"startLine":5567},{"endCharacter":4,"endLine":5571,"kind":"region","startCharacter":5,"startLine":5568},{"endLine":5612,"kind":"region","startCharacter":82,"startLine":5581},{"endCharacter":2,"endLine":5595,"kind":"region","startCharacter":25,"startLine":5594},{"endCharacter":2,"endLine":5600,"kind":"region","startCharacter":25,"startLine":5599},{"endCharacter":2,"endLine":5603,"kind":"region","startCharacter":15,"startLine":5602},{"endLine":5647,"kind":"region","startCharacter":82,"startLine":5616},{"endCharacter":2,"endLine":5630,"kind":"region","startCharacter":25,"startLine":5629},{"endCharacter":2,"endLine":5635,"kind":"region","startCharacter":25,"startLine":5634},{"endCharacter":2,"endLine":5638,"kind":"region","startCharacter":15,"startLine":5637},{"endLine":5685,"kind":"region","startCharacter":84,"startLine":5651},{"endCharacter":2,"endLine":5665,"kind":"region","startCharacter":25,"startLine":5664},{"endCharacter":2,"endLine":5670,"kind":"region","startCharacter":27,"startLine":5669},{"endCharacter":2,"endLine":5674,"kind":"region","startCharacter":7,"startLine":5673},{"endCharacter":2,"endLine":5680,"kind":"region","startCharacter":37,"startLine":5675},{"endCharacter":4,"endLine":5679,"kind":"region","startCharacter":5,"startLine":5676},{"endLine":5723,"kind":"region","startCharacter":84,"startLine":5689},{"endCharacter":2,"endLine":5703,"kind":"region","startCharacter":25,"startLine":5702},{"endCharacter":2,"endLine":5708,"kind":"region","startCharacter":27,"startLine":5707},{"endCharacter":2,"endLine":5712,"kind":"region","startCharacter":7,"startLine":5711},{"endCharacter":2,"endLine":5718,"kind":"region","startCharacter":37,"startLine":5713},{"endCharacter":4,"endLine":5717,"kind":"region","startCharacter":5,"startLine":5714},{"endLine":5763,"kind":"region","startCharacter":83,"startLine":5727},{"endCharacter":2,"endLine":5741,"kind":"region","startCharacter":25,"startLine":5740},{"endCharacter":2,"endLine":5746,"kind":"region","startCharacter":27,"startLine":5745},{"endCharacter":2,"endLine":5750,"kind":"region","startCharacter":7,"startLine":5749},{"endCharacter":2,"endLine":5756,"kind":"region","startCharacter":37,"startLine":5751},{"endCharacter":4,"endLine":5755,"kind":"region","startCharacter":5,"startLine":5752},{"endLine":5802,"kind":"region","startCharacter":114,"startLine":5767},{"endCharacter":2,"endLine":5780,"kind":"region","startCharacter":25,"startLine":5779},{"endCharacter":2,"endLine":5785,"kind":"region","startCharacter":27,"startLine":5784},{"endCharacter":2,"endLine":5789,"kind":"region","startCharacter":7,"startLine":5788},{"endCharacter":2,"endLine":5795,"kind":"region","startCharacter":37,"startLine":5790},{"endCharacter":4,"endLine":5794,"kind":"region","startCharacter":5,"startLine":5791},{"endLine":5836,"kind":"region","startCharacter":114,"startLine":5806},{"endCharacter":2,"endLine":5819,"kind":"region","startCharacter":25,"startLine":5818},{"endCharacter":2,"endLine":5824,"kind":"region","startCharacter":25,"startLine":5823},{"endCharacter":2,"endLine":5827,"kind":"region","startCharacter":15,"startLine":5826},{"endLine":5879,"kind":"region","startCharacter":83,"startLine":5840},{"endCharacter":2,"endLine":5843,"kind":"region","startCharacter":23,"startLine":5842},{"endCharacter":2,"endLine":5859,"kind":"region","startCharacter":18,"startLine":5848},{"endCharacter":4,"endLine":5858,"kind":"region","startCharacter":13,"startLine":5853},{"endCharacter":6,"endLine":5857,"kind":"region","startCharacter":15,"startLine":5856},{"endCharacter":2,"endLine":5874,"kind":"region","startCharacter":18,"startLine":5861},{"endCharacter":4,"endLine":5873,"kind":"region","startCharacter":13,"startLine":5866},{"endCharacter":6,"endLine":5869,"kind":"region","startCharacter":7,"startLine":5867},{"endCharacter":6,"endLine":5872,"kind":"region","startCharacter":15,"startLine":5871},{"endLine":5887,"kind":"region","startCharacter":98,"startLine":5883},{"endLine":5911,"kind":"region","startCharacter":82,"startLine":5890},{"endCharacter":2,"endLine":5904,"kind":"region","startCharacter":25,"startLine":5903},{"endLine":5934,"kind":"region","startCharacter":85,"startLine":5915},{"endCharacter":2,"endLine":5927,"kind":"region","startCharacter":25,"startLine":5926},{"endLine":5957,"kind":"region","startCharacter":82,"startLine":5938},{"endCharacter":2,"endLine":5950,"kind":"region","startCharacter":25,"startLine":5949},{"endLine":5980,"kind":"region","startCharacter":81,"startLine":5961},{"endCharacter":2,"endLine":5973,"kind":"region","startCharacter":25,"startLine":5972},{"endLine":6024,"kind":"region","startCharacter":86,"startLine":5984},{"endCharacter":2,"endLine":6001,"kind":"region","startCharacter":25,"startLine":6000},{"endCharacter":2,"endLine":6006,"kind":"region","startCharacter":27,"startLine":6005},{"endCharacter":2,"endLine":6011,"kind":"region","startCharacter":27,"startLine":6010},{"endCharacter":2,"endLine":6015,"kind":"region","startCharacter":7,"startLine":6014},{"endCharacter":2,"endLine":6017,"kind":"region","startCharacter":34,"startLine":6016},{"endCharacter":2,"endLine":6019,"kind":"region","startCharacter":38,"startLine":6018},{"endLine":6066,"kind":"region","startCharacter":117,"startLine":6028},{"endCharacter":2,"endLine":6043,"kind":"region","startCharacter":25,"startLine":6042},{"endCharacter":2,"endLine":6048,"kind":"region","startCharacter":27,"startLine":6047},{"endCharacter":2,"endLine":6053,"kind":"region","startCharacter":27,"startLine":6052},{"endCharacter":2,"endLine":6057,"kind":"region","startCharacter":7,"startLine":6056},{"endCharacter":2,"endLine":6059,"kind":"region","startCharacter":34,"startLine":6058},{"endCharacter":2,"endLine":6061,"kind":"region","startCharacter":38,"startLine":6060},{"endLine":6123,"kind":"region","startCharacter":117,"startLine":6070},{"endCharacter":2,"endLine":6087,"kind":"region","startCharacter":25,"startLine":6086},{"endCharacter":2,"endLine":6092,"kind":"region","startCharacter":27,"startLine":6091},{"endCharacter":2,"endLine":6097,"kind":"region","startCharacter":27,"startLine":6096},{"endCharacter":2,"endLine":6109,"kind":"region","startCharacter":3,"startLine":6100},{"endCharacter":4,"endLine":6104,"kind":"region","startCharacter":27,"startLine":6103},{"endCharacter":4,"endLine":6107,"kind":"region","startCharacter":15,"startLine":6106},{"endCharacter":2,"endLine":6112,"kind":"region","startCharacter":7,"startLine":6111},{"endCharacter":2,"endLine":6114,"kind":"region","startCharacter":34,"startLine":6113},{"endCharacter":2,"endLine":6116,"kind":"region","startCharacter":38,"startLine":6115},{"endLine":6185,"kind":"region","startCharacter":86,"startLine":6127},{"endCharacter":2,"endLine":6130,"kind":"region","startCharacter":23,"startLine":6129},{"endCharacter":2,"endLine":6153,"kind":"region","startCharacter":18,"startLine":6135},{"endCharacter":4,"endLine":6152,"kind":"region","startCharacter":13,"startLine":6139},{"endCharacter":6,"endLine":6142,"kind":"region","startCharacter":7,"startLine":6140},{"endCharacter":6,"endLine":6151,"kind":"region","startCharacter":15,"startLine":6144},{"endCharacter":8,"endLine":6147,"kind":"region","startCharacter":9,"startLine":6145},{"endCharacter":8,"endLine":6150,"kind":"region","startCharacter":17,"startLine":6149},{"endCharacter":2,"endLine":6177,"kind":"region","startCharacter":18,"startLine":6155},{"endCharacter":4,"endLine":6176,"kind":"region","startCharacter":13,"startLine":6159},{"endCharacter":6,"endLine":6162,"kind":"region","startCharacter":7,"startLine":6160},{"endCharacter":6,"endLine":6175,"kind":"region","startCharacter":15,"startLine":6164},{"endCharacter":8,"endLine":6167,"kind":"region","startCharacter":9,"startLine":6165},{"endCharacter":8,"endLine":6174,"kind":"region","startCharacter":17,"startLine":6169},{"endCharacter":10,"endLine":6173,"kind":"region","startCharacter":19,"startLine":6172},{"endCharacter":181,"endLine":6183,"kind":"region","startCharacter":37,"startLine":6181},{"endLine":6228,"kind":"region","startCharacter":86,"startLine":6189},{"endCharacter":2,"endLine":6205,"kind":"region","startCharacter":25,"startLine":6204},{"endCharacter":2,"endLine":6210,"kind":"region","startCharacter":27,"startLine":6209},{"endCharacter":2,"endLine":6215,"kind":"region","startCharacter":27,"startLine":6214},{"endCharacter":2,"endLine":6219,"kind":"region","startCharacter":7,"startLine":6218},{"endCharacter":2,"endLine":6221,"kind":"region","startCharacter":34,"startLine":6220},{"endCharacter":2,"endLine":6223,"kind":"region","startCharacter":38,"startLine":6222},{"endLine":6262,"kind":"region","startCharacter":116,"startLine":6232},{"endCharacter":2,"endLine":6244,"kind":"region","startCharacter":25,"startLine":6243},{"endCharacter":2,"endLine":6249,"kind":"region","startCharacter":27,"startLine":6248},{"endCharacter":2,"endLine":6253,"kind":"region","startCharacter":7,"startLine":6252},{"endCharacter":2,"endLine":6255,"kind":"region","startCharacter":34,"startLine":6254},{"endCharacter":2,"endLine":6257,"kind":"region","startCharacter":38,"startLine":6256},{"endLine":6296,"kind":"region","startCharacter":116,"startLine":6266},{"endCharacter":2,"endLine":6277,"kind":"region","startCharacter":25,"startLine":6276},{"endCharacter":2,"endLine":6284,"kind":"region","startCharacter":3,"startLine":6280},{"endCharacter":4,"endLine":6282,"kind":"region","startCharacter":38,"startLine":6281},{"endCharacter":2,"endLine":6287,"kind":"region","startCharacter":7,"startLine":6286},{"endCharacter":2,"endLine":6289,"kind":"region","startCharacter":34,"startLine":6288},{"endCharacter":2,"endLine":6291,"kind":"region","startCharacter":38,"startLine":6290},{"endLine":6344,"kind":"region","startCharacter":116,"startLine":6300},{"endCharacter":2,"endLine":6312,"kind":"region","startCharacter":25,"startLine":6311},{"endCharacter":2,"endLine":6319,"kind":"region","startCharacter":3,"startLine":6315},{"endCharacter":4,"endLine":6317,"kind":"region","startCharacter":38,"startLine":6316},{"endCharacter":2,"endLine":6330,"kind":"region","startCharacter":3,"startLine":6321},{"endCharacter":4,"endLine":6325,"kind":"region","startCharacter":27,"startLine":6324},{"endCharacter":4,"endLine":6328,"kind":"region","startCharacter":15,"startLine":6327},{"endCharacter":2,"endLine":6333,"kind":"region","startCharacter":7,"startLine":6332},{"endCharacter":2,"endLine":6335,"kind":"region","startCharacter":34,"startLine":6334},{"endCharacter":2,"endLine":6337,"kind":"region","startCharacter":38,"startLine":6336},{"endLine":6377,"kind":"region","startCharacter":116,"startLine":6348},{"endCharacter":2,"endLine":6358,"kind":"region","startCharacter":25,"startLine":6357},{"endCharacter":2,"endLine":6365,"kind":"region","startCharacter":3,"startLine":6361},{"endCharacter":4,"endLine":6363,"kind":"region","startCharacter":38,"startLine":6362},{"endCharacter":2,"endLine":6368,"kind":"region","startCharacter":7,"startLine":6367},{"endCharacter":2,"endLine":6370,"kind":"region","startCharacter":34,"startLine":6369},{"endCharacter":2,"endLine":6372,"kind":"region","startCharacter":38,"startLine":6371},{"endLine":6410,"kind":"region","startCharacter":116,"startLine":6381},{"endCharacter":2,"endLine":6391,"kind":"region","startCharacter":25,"startLine":6390},{"endCharacter":2,"endLine":6398,"kind":"region","startCharacter":3,"startLine":6394},{"endCharacter":4,"endLine":6396,"kind":"region","startCharacter":38,"startLine":6395},{"endCharacter":2,"endLine":6401,"kind":"region","startCharacter":7,"startLine":6400},{"endCharacter":2,"endLine":6403,"kind":"region","startCharacter":34,"startLine":6402},{"endCharacter":2,"endLine":6405,"kind":"region","startCharacter":38,"startLine":6404},{"endLine":6455,"kind":"region","startCharacter":85,"startLine":6414},{"endCharacter":2,"endLine":6417,"kind":"region","startCharacter":23,"startLine":6416},{"endCharacter":2,"endLine":6433,"kind":"region","startCharacter":18,"startLine":6422},{"endCharacter":4,"endLine":6432,"kind":"region","startCharacter":13,"startLine":6426},{"endCharacter":6,"endLine":6428,"kind":"region","startCharacter":7,"startLine":6427},{"endCharacter":6,"endLine":6431,"kind":"region","startCharacter":15,"startLine":6430},{"endCharacter":2,"endLine":6447,"kind":"region","startCharacter":18,"startLine":6435},{"endCharacter":4,"endLine":6446,"kind":"region","startCharacter":13,"startLine":6439},{"endCharacter":6,"endLine":6442,"kind":"region","startCharacter":7,"startLine":6440},{"endCharacter":6,"endLine":6445,"kind":"region","startCharacter":15,"startLine":6444},{"endCharacter":63,"endLine":6453,"kind":"region","startCharacter":37,"startLine":6451},{"endLine":6489,"kind":"region","startCharacter":116,"startLine":6459},{"endCharacter":2,"endLine":6472,"kind":"region","startCharacter":25,"startLine":6471},{"endCharacter":2,"endLine":6477,"kind":"region","startCharacter":27,"startLine":6476},{"endCharacter":2,"endLine":6481,"kind":"region","startCharacter":7,"startLine":6480},{"endCharacter":2,"endLine":6483,"kind":"region","startCharacter":34,"startLine":6482},{"endLine":6534,"kind":"region","startCharacter":85,"startLine":6493},{"endCharacter":2,"endLine":6496,"kind":"region","startCharacter":23,"startLine":6495},{"endCharacter":2,"endLine":6512,"kind":"region","startCharacter":18,"startLine":6501},{"endCharacter":4,"endLine":6511,"kind":"region","startCharacter":13,"startLine":6505},{"endCharacter":6,"endLine":6507,"kind":"region","startCharacter":7,"startLine":6506},{"endCharacter":6,"endLine":6510,"kind":"region","startCharacter":15,"startLine":6509},{"endCharacter":2,"endLine":6526,"kind":"region","startCharacter":18,"startLine":6514},{"endCharacter":4,"endLine":6525,"kind":"region","startCharacter":13,"startLine":6518},{"endCharacter":6,"endLine":6521,"kind":"region","startCharacter":7,"startLine":6519},{"endCharacter":6,"endLine":6524,"kind":"region","startCharacter":15,"startLine":6523},{"endCharacter":92,"endLine":6532,"kind":"region","startCharacter":37,"startLine":6530},{"endLine":6576,"kind":"region","startCharacter":116,"startLine":6538},{"endCharacter":2,"endLine":6554,"kind":"region","startCharacter":25,"startLine":6553},{"endCharacter":2,"endLine":6559,"kind":"region","startCharacter":27,"startLine":6558},{"endCharacter":2,"endLine":6564,"kind":"region","startCharacter":27,"startLine":6563},{"endCharacter":2,"endLine":6569,"kind":"region","startCharacter":7,"startLine":6568},{"endCharacter":2,"endLine":6571,"kind":"region","startCharacter":34,"startLine":6570},{"endLine":6645,"kind":"region","startCharacter":85,"startLine":6580},{"endCharacter":2,"endLine":6583,"kind":"region","startCharacter":23,"startLine":6582},{"endCharacter":2,"endLine":6599,"kind":"region","startCharacter":18,"startLine":6588},{"endCharacter":4,"endLine":6598,"kind":"region","startCharacter":13,"startLine":6592},{"endCharacter":6,"endLine":6594,"kind":"region","startCharacter":7,"startLine":6593},{"endCharacter":6,"endLine":6597,"kind":"region","startCharacter":15,"startLine":6596},{"endCharacter":2,"endLine":6616,"kind":"region","startCharacter":18,"startLine":6601},{"endCharacter":4,"endLine":6615,"kind":"region","startCharacter":13,"startLine":6605},{"endCharacter":6,"endLine":6607,"kind":"region","startCharacter":7,"startLine":6606},{"endCharacter":6,"endLine":6614,"kind":"region","startCharacter":15,"startLine":6609},{"endCharacter":8,"endLine":6613,"kind":"region","startCharacter":17,"startLine":6612},{"endCharacter":2,"endLine":6636,"kind":"region","startCharacter":18,"startLine":6618},{"endCharacter":4,"endLine":6635,"kind":"region","startCharacter":13,"startLine":6622},{"endCharacter":6,"endLine":6625,"kind":"region","startCharacter":7,"startLine":6623},{"endCharacter":6,"endLine":6634,"kind":"region","startCharacter":15,"startLine":6627},{"endCharacter":8,"endLine":6630,"kind":"region","startCharacter":9,"startLine":6628},{"endCharacter":8,"endLine":6633,"kind":"region","startCharacter":17,"startLine":6632},{"endCharacter":128,"endLine":6643,"kind":"region","startCharacter":37,"startLine":6640},{"endLine":6672,"kind":"region","startCharacter":77,"startLine":6649},{"endCharacter":2,"endLine":6661,"kind":"region","startCharacter":25,"startLine":6660},{"endCharacter":2,"endLine":6665,"kind":"region","startCharacter":7,"startLine":6664},{"endCharacter":2,"endLine":6667,"kind":"region","startCharacter":34,"startLine":6666},{"endLine":6703,"kind":"region","startCharacter":80,"startLine":6676},{"endCharacter":2,"endLine":6690,"kind":"region","startCharacter":25,"startLine":6689},{"endCharacter":2,"endLine":6695,"kind":"region","startCharacter":27,"startLine":6694},{"endLine":6716,"kind":"region","startCharacter":124,"startLine":6707},{"endLine":6744,"kind":"region","startCharacter":108,"startLine":6720},{"endCharacter":2,"endLine":6736,"kind":"region","startCharacter":3,"startLine":6727},{"endCharacter":4,"endLine":6731,"kind":"region","startCharacter":27,"startLine":6730},{"endCharacter":4,"endLine":6734,"kind":"region","startCharacter":15,"startLine":6733},{"endLine":6767,"kind":"region","startCharacter":79,"startLine":6748},{"endCharacter":2,"endLine":6760,"kind":"region","startCharacter":25,"startLine":6759},{"endLine":6790,"kind":"region","startCharacter":78,"startLine":6771},{"endCharacter":2,"endLine":6783,"kind":"region","startCharacter":25,"startLine":6782},{"endLine":6822,"kind":"region","startCharacter":78,"startLine":6794},{"endCharacter":2,"endLine":6807,"kind":"region","startCharacter":25,"startLine":6806},{"endCharacter":2,"endLine":6812,"kind":"region","startCharacter":25,"startLine":6811},{"endCharacter":2,"endLine":6815,"kind":"region","startCharacter":15,"startLine":6814},{"endLine":6846,"kind":"region","startCharacter":79,"startLine":6826},{"endCharacter":2,"endLine":6838,"kind":"region","startCharacter":25,"startLine":6837},{"endLine":6870,"kind":"region","startCharacter":77,"startLine":6850},{"endCharacter":2,"endLine":6862,"kind":"region","startCharacter":25,"startLine":6861},{"endLine":6894,"kind":"region","startCharacter":80,"startLine":6874},{"endCharacter":2,"endLine":6886,"kind":"region","startCharacter":25,"startLine":6885},{"endLine":6918,"kind":"region","startCharacter":78,"startLine":6898},{"endCharacter":2,"endLine":6910,"kind":"region","startCharacter":25,"startLine":6909},{"endLine":6940,"kind":"region","startCharacter":79,"startLine":6922},{"endCharacter":2,"endLine":6933,"kind":"region","startCharacter":25,"startLine":6932},{"endLine":6963,"kind":"region","startCharacter":87,"startLine":6944},{"endCharacter":2,"endLine":6956,"kind":"region","startCharacter":25,"startLine":6955},{"endLine":6984,"kind":"region","startCharacter":108,"startLine":6967},{"endCharacter":2,"endLine":6977,"kind":"region","startCharacter":27,"startLine":6976},{"endLine":7006,"kind":"region","startCharacter":82,"startLine":6988},{"endCharacter":2,"endLine":6999,"kind":"region","startCharacter":25,"startLine":6998},{"endLine":7034,"kind":"region","startCharacter":111,"startLine":7010},{"endCharacter":2,"endLine":7022,"kind":"region","startCharacter":25,"startLine":7021},{"endCharacter":2,"endLine":7027,"kind":"region","startCharacter":27,"startLine":7026},{"endLine":7070,"kind":"region","startCharacter":110,"startLine":7038},{"endCharacter":2,"endLine":7051,"kind":"region","startCharacter":25,"startLine":7050},{"endCharacter":2,"endLine":7056,"kind":"region","startCharacter":35,"startLine":7055},{"endCharacter":2,"endLine":7063,"kind":"region","startCharacter":10,"startLine":7057},{"endCharacter":4,"endLine":7060,"kind":"region","startCharacter":17,"startLine":7059},{"endCharacter":4,"endLine":7062,"kind":"region","startCharacter":12,"startLine":7061},{"endLine":7120,"kind":"region","startCharacter":110,"startLine":7074},{"endCharacter":2,"endLine":7090,"kind":"region","startCharacter":25,"startLine":7089},{"endCharacter":2,"endLine":7095,"kind":"region","startCharacter":35,"startLine":7094},{"endCharacter":2,"endLine":7102,"kind":"region","startCharacter":10,"startLine":7096},{"endCharacter":4,"endLine":7099,"kind":"region","startCharacter":17,"startLine":7098},{"endCharacter":4,"endLine":7101,"kind":"region","startCharacter":12,"startLine":7100},{"endCharacter":2,"endLine":7106,"kind":"region","startCharacter":35,"startLine":7105},{"endCharacter":2,"endLine":7113,"kind":"region","startCharacter":10,"startLine":7107},{"endCharacter":4,"endLine":7110,"kind":"region","startCharacter":17,"startLine":7109},{"endCharacter":4,"endLine":7112,"kind":"region","startCharacter":12,"startLine":7111},{"endLine":7169,"kind":"region","startCharacter":79,"startLine":7124},{"endCharacter":2,"endLine":7127,"kind":"region","startCharacter":23,"startLine":7126},{"endCharacter":2,"endLine":7143,"kind":"region","startCharacter":18,"startLine":7132},{"endCharacter":4,"endLine":7142,"kind":"region","startCharacter":13,"startLine":7136},{"endCharacter":6,"endLine":7141,"kind":"region","startCharacter":15,"startLine":7140},{"endCharacter":2,"endLine":7161,"kind":"region","startCharacter":18,"startLine":7145},{"endCharacter":4,"endLine":7160,"kind":"region","startCharacter":13,"startLine":7149},{"endCharacter":6,"endLine":7159,"kind":"region","startCharacter":15,"startLine":7153},{"endCharacter":8,"endLine":7158,"kind":"region","startCharacter":17,"startLine":7157},{"endCharacter":105,"endLine":7167,"kind":"region","startCharacter":37,"startLine":7165},{"endLine":7200,"kind":"region","startCharacter":108,"startLine":7173},{"endCharacter":2,"endLine":7187,"kind":"region","startCharacter":27,"startLine":7186},{"endCharacter":2,"endLine":7192,"kind":"region","startCharacter":27,"startLine":7191},{"endLine":7257,"kind":"region","startCharacter":77,"startLine":7204},{"endCharacter":2,"endLine":7207,"kind":"region","startCharacter":23,"startLine":7206},{"endCharacter":2,"endLine":7213,"kind":"region","startCharacter":18,"startLine":7212},{"endCharacter":2,"endLine":7223,"kind":"region","startCharacter":18,"startLine":7215},{"endCharacter":4,"endLine":7219,"kind":"region","startCharacter":5,"startLine":7217},{"endCharacter":4,"endLine":7222,"kind":"region","startCharacter":13,"startLine":7221},{"endCharacter":2,"endLine":7231,"kind":"region","startCharacter":18,"startLine":7225},{"endCharacter":4,"endLine":7230,"kind":"region","startCharacter":13,"startLine":7229},{"endCharacter":2,"endLine":7247,"kind":"region","startCharacter":18,"startLine":7233},{"endCharacter":4,"endLine":7237,"kind":"region","startCharacter":5,"startLine":7235},{"endCharacter":4,"endLine":7246,"kind":"region","startCharacter":13,"startLine":7239},{"endCharacter":6,"endLine":7242,"kind":"region","startCharacter":7,"startLine":7240},{"endCharacter":6,"endLine":7245,"kind":"region","startCharacter":15,"startLine":7244},{"endCharacter":117,"endLine":7255,"kind":"region","startCharacter":37,"startLine":7251},{"endLine":7288,"kind":"region","startCharacter":83,"startLine":7261},{"endCharacter":2,"endLine":7275,"kind":"region","startCharacter":25,"startLine":7274},{"endCharacter":2,"endLine":7280,"kind":"region","startCharacter":27,"startLine":7279},{"endLine":7312,"kind":"region","startCharacter":79,"startLine":7292},{"endCharacter":2,"endLine":7304,"kind":"region","startCharacter":25,"startLine":7303},{"endLine":7336,"kind":"region","startCharacter":78,"startLine":7316},{"endCharacter":2,"endLine":7328,"kind":"region","startCharacter":25,"startLine":7327},{"endLine":7375,"kind":"region","startCharacter":80,"startLine":7340},{"endCharacter":2,"endLine":7357,"kind":"region","startCharacter":25,"startLine":7356},{"endCharacter":2,"endLine":7362,"kind":"region","startCharacter":27,"startLine":7361},{"endCharacter":2,"endLine":7367,"kind":"region","startCharacter":27,"startLine":7366},{"endLine":7413,"kind":"region","startCharacter":111,"startLine":7379},{"endCharacter":2,"endLine":7395,"kind":"region","startCharacter":25,"startLine":7394},{"endCharacter":2,"endLine":7400,"kind":"region","startCharacter":27,"startLine":7399},{"endCharacter":2,"endLine":7405,"kind":"region","startCharacter":27,"startLine":7404},{"endLine":7465,"kind":"region","startCharacter":80,"startLine":7417},{"endCharacter":2,"endLine":7420,"kind":"region","startCharacter":23,"startLine":7419},{"endCharacter":2,"endLine":7437,"kind":"region","startCharacter":18,"startLine":7425},{"endCharacter":4,"endLine":7436,"kind":"region","startCharacter":13,"startLine":7429},{"endCharacter":6,"endLine":7432,"kind":"region","startCharacter":7,"startLine":7430},{"endCharacter":6,"endLine":7435,"kind":"region","startCharacter":15,"startLine":7434},{"endCharacter":2,"endLine":7457,"kind":"region","startCharacter":18,"startLine":7439},{"endCharacter":4,"endLine":7456,"kind":"region","startCharacter":13,"startLine":7443},{"endCharacter":6,"endLine":7446,"kind":"region","startCharacter":7,"startLine":7444},{"endCharacter":6,"endLine":7455,"kind":"region","startCharacter":15,"startLine":7448},{"endCharacter":8,"endLine":7451,"kind":"region","startCharacter":9,"startLine":7449},{"endCharacter":8,"endLine":7454,"kind":"region","startCharacter":17,"startLine":7453},{"endCharacter":117,"endLine":7463,"kind":"region","startCharacter":37,"startLine":7461},{"endLine":7511,"kind":"region","startCharacter":111,"startLine":7469},{"endCharacter":2,"endLine":7486,"kind":"region","startCharacter":25,"startLine":7485},{"endCharacter":2,"endLine":7491,"kind":"region","startCharacter":35,"startLine":7490},{"endCharacter":2,"endLine":7498,"kind":"region","startCharacter":10,"startLine":7492},{"endCharacter":4,"endLine":7495,"kind":"region","startCharacter":17,"startLine":7494},{"endCharacter":4,"endLine":7497,"kind":"region","startCharacter":12,"startLine":7496},{"endCharacter":2,"endLine":7502,"kind":"region","startCharacter":27,"startLine":7501},{"endLine":7563,"kind":"region","startCharacter":111,"startLine":7515},{"endCharacter":2,"endLine":7534,"kind":"region","startCharacter":25,"startLine":7533},{"endCharacter":2,"endLine":7539,"kind":"region","startCharacter":35,"startLine":7538},{"endCharacter":2,"endLine":7546,"kind":"region","startCharacter":10,"startLine":7540},{"endCharacter":4,"endLine":7543,"kind":"region","startCharacter":17,"startLine":7542},{"endCharacter":4,"endLine":7545,"kind":"region","startCharacter":12,"startLine":7544},{"endCharacter":2,"endLine":7550,"kind":"region","startCharacter":27,"startLine":7549},{"endCharacter":2,"endLine":7555,"kind":"region","startCharacter":27,"startLine":7554},{"endLine":7625,"kind":"region","startCharacter":80,"startLine":7567},{"endCharacter":2,"endLine":7570,"kind":"region","startCharacter":23,"startLine":7569},{"endCharacter":2,"endLine":7592,"kind":"region","startCharacter":18,"startLine":7575},{"endCharacter":4,"endLine":7591,"kind":"region","startCharacter":13,"startLine":7579},{"endCharacter":6,"endLine":7590,"kind":"region","startCharacter":15,"startLine":7583},{"endCharacter":8,"endLine":7586,"kind":"region","startCharacter":9,"startLine":7584},{"endCharacter":8,"endLine":7589,"kind":"region","startCharacter":17,"startLine":7588},{"endCharacter":2,"endLine":7617,"kind":"region","startCharacter":18,"startLine":7594},{"endCharacter":4,"endLine":7616,"kind":"region","startCharacter":13,"startLine":7598},{"endCharacter":6,"endLine":7615,"kind":"region","startCharacter":15,"startLine":7602},{"endCharacter":8,"endLine":7605,"kind":"region","startCharacter":9,"startLine":7603},{"endCharacter":8,"endLine":7614,"kind":"region","startCharacter":17,"startLine":7607},{"endCharacter":10,"endLine":7610,"kind":"region","startCharacter":11,"startLine":7608},{"endCharacter":10,"endLine":7613,"kind":"region","startCharacter":19,"startLine":7612},{"endCharacter":149,"endLine":7623,"kind":"region","startCharacter":37,"startLine":7621},{"endLine":7654,"kind":"region","startCharacter":81,"startLine":7629},{"endCharacter":2,"endLine":7642,"kind":"region","startCharacter":25,"startLine":7641},{"endCharacter":2,"endLine":7647,"kind":"region","startCharacter":27,"startLine":7646},{"endLine":7677,"kind":"region","startCharacter":82,"startLine":7658},{"endCharacter":2,"endLine":7670,"kind":"region","startCharacter":25,"startLine":7669},{"endLine":7699,"kind":"region","startCharacter":80,"startLine":7681},{"endCharacter":2,"endLine":7692,"kind":"region","startCharacter":25,"startLine":7691},{"endLine":7707,"kind":"region","startCharacter":96,"startLine":7703},{"endLine":7711,"kind":"region","startCharacter":92,"startLine":7710},{"endLine":7747,"kind":"region","startCharacter":95,"startLine":7714},{"endCharacter":2,"endLine":7727,"kind":"region","startCharacter":25,"startLine":7726},{"endCharacter":2,"endLine":7741,"kind":"region","startCharacter":3,"startLine":7730},{"endCharacter":4,"endLine":7733,"kind":"region","startCharacter":27,"startLine":7732},{"endCharacter":4,"endLine":7736,"kind":"region","startCharacter":17,"startLine":7735},{"endCharacter":4,"endLine":7740,"kind":"region","startCharacter":12,"startLine":7737},{"endLine":7770,"kind":"region","startCharacter":95,"startLine":7751},{"endCharacter":2,"endLine":7763,"kind":"region","startCharacter":25,"startLine":7762},{"endLine":7807,"kind":"region","startCharacter":102,"startLine":7774},{"endCharacter":2,"endLine":7787,"kind":"region","startCharacter":25,"startLine":7786},{"endCharacter":2,"endLine":7801,"kind":"region","startCharacter":3,"startLine":7790},{"endCharacter":4,"endLine":7793,"kind":"region","startCharacter":27,"startLine":7792},{"endCharacter":4,"endLine":7796,"kind":"region","startCharacter":17,"startLine":7795},{"endCharacter":4,"endLine":7800,"kind":"region","startCharacter":12,"startLine":7797},{"endLine":7830,"kind":"region","startCharacter":102,"startLine":7811},{"endCharacter":2,"endLine":7823,"kind":"region","startCharacter":25,"startLine":7822},{"endLine":7867,"kind":"region","startCharacter":105,"startLine":7834},{"endCharacter":2,"endLine":7847,"kind":"region","startCharacter":25,"startLine":7846},{"endCharacter":2,"endLine":7861,"kind":"region","startCharacter":3,"startLine":7850},{"endCharacter":4,"endLine":7853,"kind":"region","startCharacter":27,"startLine":7852},{"endCharacter":4,"endLine":7856,"kind":"region","startCharacter":17,"startLine":7855},{"endCharacter":4,"endLine":7860,"kind":"region","startCharacter":12,"startLine":7857},{"endLine":7890,"kind":"region","startCharacter":105,"startLine":7871},{"endCharacter":2,"endLine":7883,"kind":"region","startCharacter":25,"startLine":7882},{"endLine":7927,"kind":"region","startCharacter":106,"startLine":7894},{"endCharacter":2,"endLine":7907,"kind":"region","startCharacter":25,"startLine":7906},{"endCharacter":2,"endLine":7921,"kind":"region","startCharacter":3,"startLine":7910},{"endCharacter":4,"endLine":7913,"kind":"region","startCharacter":27,"startLine":7912},{"endCharacter":4,"endLine":7916,"kind":"region","startCharacter":17,"startLine":7915},{"endCharacter":4,"endLine":7920,"kind":"region","startCharacter":12,"startLine":7917},{"endLine":7950,"kind":"region","startCharacter":106,"startLine":7931},{"endCharacter":2,"endLine":7943,"kind":"region","startCharacter":25,"startLine":7942},{"endLine":7979,"kind":"region","startCharacter":96,"startLine":7954},{"endCharacter":2,"endLine":7967,"kind":"region","startCharacter":25,"startLine":7966},{"endCharacter":2,"endLine":7972,"kind":"region","startCharacter":25,"startLine":7971},{"endLine":8002,"kind":"region","startCharacter":96,"startLine":7983},{"endCharacter":2,"endLine":7995,"kind":"region","startCharacter":25,"startLine":7994},{"endLine":8031,"kind":"region","startCharacter":101,"startLine":8006},{"endCharacter":2,"endLine":8019,"kind":"region","startCharacter":25,"startLine":8018},{"endCharacter":2,"endLine":8024,"kind":"region","startCharacter":25,"startLine":8023},{"endLine":8054,"kind":"region","startCharacter":101,"startLine":8035},{"endCharacter":2,"endLine":8047,"kind":"region","startCharacter":25,"startLine":8046},{"endLine":8083,"kind":"region","startCharacter":101,"startLine":8058},{"endCharacter":2,"endLine":8071,"kind":"region","startCharacter":25,"startLine":8070},{"endCharacter":2,"endLine":8076,"kind":"region","startCharacter":25,"startLine":8075},{"endLine":8106,"kind":"region","startCharacter":101,"startLine":8087},{"endCharacter":2,"endLine":8099,"kind":"region","startCharacter":25,"startLine":8098},{"endLine":8135,"kind":"region","startCharacter":97,"startLine":8110},{"endCharacter":2,"endLine":8123,"kind":"region","startCharacter":25,"startLine":8122},{"endCharacter":2,"endLine":8128,"kind":"region","startCharacter":25,"startLine":8127},{"endLine":8158,"kind":"region","startCharacter":97,"startLine":8139},{"endCharacter":2,"endLine":8151,"kind":"region","startCharacter":25,"startLine":8150},{"endLine":8187,"kind":"region","startCharacter":100,"startLine":8162},{"endCharacter":2,"endLine":8175,"kind":"region","startCharacter":25,"startLine":8174},{"endCharacter":2,"endLine":8180,"kind":"region","startCharacter":25,"startLine":8179},{"endLine":8210,"kind":"region","startCharacter":100,"startLine":8191},{"endCharacter":2,"endLine":8203,"kind":"region","startCharacter":25,"startLine":8202},{"endLine":8239,"kind":"region","startCharacter":106,"startLine":8214},{"endCharacter":2,"endLine":8227,"kind":"region","startCharacter":25,"startLine":8226},{"endCharacter":2,"endLine":8232,"kind":"region","startCharacter":25,"startLine":8231},{"endLine":8262,"kind":"region","startCharacter":106,"startLine":8243},{"endCharacter":2,"endLine":8255,"kind":"region","startCharacter":25,"startLine":8254},{"endLine":8291,"kind":"region","startCharacter":104,"startLine":8266},{"endCharacter":2,"endLine":8279,"kind":"region","startCharacter":25,"startLine":8278},{"endCharacter":2,"endLine":8284,"kind":"region","startCharacter":27,"startLine":8283},{"endLine":8314,"kind":"region","startCharacter":104,"startLine":8295},{"endCharacter":2,"endLine":8307,"kind":"region","startCharacter":25,"startLine":8306},{"endLine":8343,"kind":"region","startCharacter":105,"startLine":8318},{"endCharacter":2,"endLine":8331,"kind":"region","startCharacter":25,"startLine":8330},{"endCharacter":2,"endLine":8336,"kind":"region","startCharacter":27,"startLine":8335},{"endLine":8366,"kind":"region","startCharacter":105,"startLine":8347},{"endCharacter":2,"endLine":8359,"kind":"region","startCharacter":25,"startLine":8358},{"endLine":8403,"kind":"region","startCharacter":101,"startLine":8370},{"endCharacter":2,"endLine":8383,"kind":"region","startCharacter":25,"startLine":8382},{"endCharacter":2,"endLine":8397,"kind":"region","startCharacter":3,"startLine":8386},{"endCharacter":4,"endLine":8389,"kind":"region","startCharacter":27,"startLine":8388},{"endCharacter":4,"endLine":8392,"kind":"region","startCharacter":17,"startLine":8391},{"endCharacter":4,"endLine":8396,"kind":"region","startCharacter":12,"startLine":8393},{"endLine":8426,"kind":"region","startCharacter":101,"startLine":8407},{"endCharacter":2,"endLine":8419,"kind":"region","startCharacter":25,"startLine":8418},{"endLine":8463,"kind":"region","startCharacter":100,"startLine":8430},{"endCharacter":2,"endLine":8443,"kind":"region","startCharacter":25,"startLine":8442},{"endCharacter":2,"endLine":8457,"kind":"region","startCharacter":3,"startLine":8446},{"endCharacter":4,"endLine":8449,"kind":"region","startCharacter":27,"startLine":8448},{"endCharacter":4,"endLine":8452,"kind":"region","startCharacter":17,"startLine":8451},{"endCharacter":4,"endLine":8456,"kind":"region","startCharacter":12,"startLine":8453},{"endLine":8486,"kind":"region","startCharacter":100,"startLine":8467},{"endCharacter":2,"endLine":8479,"kind":"region","startCharacter":25,"startLine":8478},{"endLine":8523,"kind":"region","startCharacter":114,"startLine":8490},{"endCharacter":2,"endLine":8503,"kind":"region","startCharacter":25,"startLine":8502},{"endCharacter":2,"endLine":8517,"kind":"region","startCharacter":3,"startLine":8506},{"endCharacter":4,"endLine":8509,"kind":"region","startCharacter":27,"startLine":8508},{"endCharacter":4,"endLine":8512,"kind":"region","startCharacter":17,"startLine":8511},{"endCharacter":4,"endLine":8516,"kind":"region","startCharacter":12,"startLine":8513},{"endLine":8546,"kind":"region","startCharacter":114,"startLine":8527},{"endCharacter":2,"endLine":8539,"kind":"region","startCharacter":25,"startLine":8538},{"endLine":8583,"kind":"region","startCharacter":112,"startLine":8550},{"endCharacter":2,"endLine":8563,"kind":"region","startCharacter":25,"startLine":8562},{"endCharacter":2,"endLine":8577,"kind":"region","startCharacter":3,"startLine":8566},{"endCharacter":4,"endLine":8569,"kind":"region","startCharacter":27,"startLine":8568},{"endCharacter":4,"endLine":8572,"kind":"region","startCharacter":17,"startLine":8571},{"endCharacter":4,"endLine":8576,"kind":"region","startCharacter":12,"startLine":8573},{"endLine":8606,"kind":"region","startCharacter":112,"startLine":8587},{"endCharacter":2,"endLine":8599,"kind":"region","startCharacter":25,"startLine":8598},{"endLine":8643,"kind":"region","startCharacter":109,"startLine":8610},{"endCharacter":2,"endLine":8623,"kind":"region","startCharacter":25,"startLine":8622},{"endCharacter":2,"endLine":8637,"kind":"region","startCharacter":3,"startLine":8626},{"endCharacter":4,"endLine":8629,"kind":"region","startCharacter":27,"startLine":8628},{"endCharacter":4,"endLine":8632,"kind":"region","startCharacter":17,"startLine":8631},{"endCharacter":4,"endLine":8636,"kind":"region","startCharacter":12,"startLine":8633},{"endLine":8666,"kind":"region","startCharacter":109,"startLine":8647},{"endCharacter":2,"endLine":8659,"kind":"region","startCharacter":25,"startLine":8658},{"endLine":8703,"kind":"region","startCharacter":109,"startLine":8670},{"endCharacter":2,"endLine":8683,"kind":"region","startCharacter":25,"startLine":8682},{"endCharacter":2,"endLine":8697,"kind":"region","startCharacter":3,"startLine":8686},{"endCharacter":4,"endLine":8689,"kind":"region","startCharacter":27,"startLine":8688},{"endCharacter":4,"endLine":8692,"kind":"region","startCharacter":17,"startLine":8691},{"endCharacter":4,"endLine":8696,"kind":"region","startCharacter":12,"startLine":8693},{"endLine":8726,"kind":"region","startCharacter":109,"startLine":8707},{"endCharacter":2,"endLine":8719,"kind":"region","startCharacter":25,"startLine":8718},{"endLine":8763,"kind":"region","startCharacter":105,"startLine":8730},{"endCharacter":2,"endLine":8743,"kind":"region","startCharacter":25,"startLine":8742},{"endCharacter":2,"endLine":8757,"kind":"region","startCharacter":3,"startLine":8746},{"endCharacter":4,"endLine":8749,"kind":"region","startCharacter":27,"startLine":8748},{"endCharacter":4,"endLine":8752,"kind":"region","startCharacter":17,"startLine":8751},{"endCharacter":4,"endLine":8756,"kind":"region","startCharacter":12,"startLine":8753},{"endLine":8786,"kind":"region","startCharacter":105,"startLine":8767},{"endCharacter":2,"endLine":8779,"kind":"region","startCharacter":25,"startLine":8778},{"endLine":8823,"kind":"region","startCharacter":97,"startLine":8790},{"endCharacter":2,"endLine":8803,"kind":"region","startCharacter":25,"startLine":8802},{"endCharacter":2,"endLine":8817,"kind":"region","startCharacter":3,"startLine":8806},{"endCharacter":4,"endLine":8809,"kind":"region","startCharacter":27,"startLine":8808},{"endCharacter":4,"endLine":8812,"kind":"region","startCharacter":17,"startLine":8811},{"endCharacter":4,"endLine":8816,"kind":"region","startCharacter":12,"startLine":8813},{"endLine":8846,"kind":"region","startCharacter":97,"startLine":8827},{"endCharacter":2,"endLine":8839,"kind":"region","startCharacter":25,"startLine":8838},{"endLine":8869,"kind":"region","startCharacter":100,"startLine":8850},{"endCharacter":2,"endLine":8862,"kind":"region","startCharacter":25,"startLine":8861},{"endLine":8892,"kind":"region","startCharacter":98,"startLine":8873},{"endCharacter":2,"endLine":8885,"kind":"region","startCharacter":25,"startLine":8884},{"endLine":8922,"kind":"region","startCharacter":94,"startLine":8896},{"endCharacter":2,"endLine":8910,"kind":"region","startCharacter":25,"startLine":8909},{"endCharacter":2,"endLine":8915,"kind":"region","startCharacter":27,"startLine":8914},{"endLine":8952,"kind":"region","startCharacter":98,"startLine":8926},{"endCharacter":2,"endLine":8940,"kind":"region","startCharacter":25,"startLine":8939},{"endCharacter":2,"endLine":8945,"kind":"region","startCharacter":27,"startLine":8944},{"endLine":8982,"kind":"region","startCharacter":98,"startLine":8956},{"endCharacter":2,"endLine":8970,"kind":"region","startCharacter":25,"startLine":8969},{"endCharacter":2,"endLine":8975,"kind":"region","startCharacter":27,"startLine":8974},{"endLine":9012,"kind":"region","startCharacter":95,"startLine":8986},{"endCharacter":2,"endLine":9000,"kind":"region","startCharacter":25,"startLine":8999},{"endCharacter":2,"endLine":9005,"kind":"region","startCharacter":27,"startLine":9004},{"endLine":9048,"kind":"region","startCharacter":97,"startLine":9016},{"endCharacter":2,"endLine":9028,"kind":"region","startCharacter":25,"startLine":9027},{"endCharacter":2,"endLine":9040,"kind":"region","startCharacter":3,"startLine":9031},{"endCharacter":4,"endLine":9035,"kind":"region","startCharacter":27,"startLine":9034},{"endCharacter":4,"endLine":9038,"kind":"region","startCharacter":15,"startLine":9037},{"endLine":9061,"kind":"region","startCharacter":90,"startLine":9052},{"endLine":9083,"kind":"region","startCharacter":93,"startLine":9065},{"endCharacter":2,"endLine":9076,"kind":"region","startCharacter":25,"startLine":9075},{"endLine":9091,"kind":"region","startCharacter":109,"startLine":9087},{"endLine":9095,"kind":"region","startCharacter":105,"startLine":9094},{"endLine":9203,"kind":"region","startCharacter":36,"startLine":9098},{"endLine":9254,"kind":"region","startCharacter":46,"startLine":9232},{"endLine":9302,"kind":"region","startCharacter":46,"startLine":9280},{"endLine":9544,"kind":"region","startCharacter":12,"startLine":9356},{"endLine":9509,"kind":"region","startCharacter":62,"startLine":9371},{"endCharacter":2,"endLine":9382,"kind":"region","startCharacter":28,"startLine":9377},{"endCharacter":2,"endLine":9384,"kind":"region","startCharacter":10,"startLine":9383},{"endCharacter":2,"endLine":9392,"kind":"region","startCharacter":21,"startLine":9389},{"endCharacter":2,"endLine":9406,"kind":"region","startCharacter":10,"startLine":9393},{"endCharacter":4,"endLine":9401,"kind":"region","startCharacter":8,"startLine":9396},{"endCharacter":6,"endLine":9399,"kind":"region","startCharacter":31,"startLine":9397},{"endCharacter":2,"endLine":9491,"kind":"region","startCharacter":42,"startLine":9419},{"endCharacter":4,"endLine":9430,"kind":"region","startCharacter":43,"startLine":9429},{"endCharacter":4,"endLine":9442,"kind":"region","startCharacter":15,"startLine":9432},{"endCharacter":6,"endLine":9441,"kind":"region","startCharacter":52,"startLine":9437},{"endCharacter":4,"endLine":9444,"kind":"region","startCharacter":12,"startLine":9443},{"endCharacter":4,"endLine":9488,"kind":"region","startCharacter":24,"startLine":9449},{"endCharacter":6,"endLine":9459,"kind":"region","startCharacter":45,"startLine":9455},{"endCharacter":6,"endLine":9475,"kind":"region","startCharacter":16,"startLine":9461},{"endCharacter":8,"endLine":9467,"kind":"region","startCharacter":50,"startLine":9462},{"endCharacter":8,"endLine":9474,"kind":"region","startCharacter":16,"startLine":9468},{"endCharacter":6,"endLine":9486,"kind":"region","startCharacter":17,"startLine":9478},{"endCharacter":8,"endLine":9484,"kind":"region","startCharacter":25,"startLine":9482},{"endCharacter":2,"endLine":9506,"kind":"region","startCharacter":42,"startLine":9497},{"endCharacter":4,"endLine":9504,"kind":"region","startCharacter":24,"startLine":9501},{"endLine":9537,"kind":"region","startCharacter":32,"startLine":9518},{"endCharacter":2,"endLine":9536,"kind":"region","startCharacter":42,"startLine":9526},{"endCharacter":4,"endLine":9535,"kind":"region","startCharacter":43,"startLine":9527},{"endCharacter":6,"endLine":9534,"kind":"region","startCharacter":21,"startLine":9529},{"endCharacter":8,"endLine":9532,"kind":"region","startCharacter":32,"startLine":9530},{"endLine":9627,"kind":"region","startCharacter":12,"startLine":9551},{"endCharacter":2,"endLine":9579,"kind":"region","startCharacter":74,"startLine":9560},{"endCharacter":4,"endLine":9578,"kind":"region","startCharacter":41,"startLine":9563},{"endCharacter":6,"endLine":9573,"kind":"region","startCharacter":33,"startLine":9564},{"endCharacter":6,"endLine":9577,"kind":"region","startCharacter":16,"startLine":9575},{"endCharacter":2,"endLine":9624,"kind":"region","startCharacter":140,"startLine":9587},{"endCharacter":4,"endLine":9623,"kind":"region","startCharacter":42,"startLine":9589},{"endCharacter":6,"endLine":9622,"kind":"region","startCharacter":14,"startLine":9593},{"endCharacter":8,"endLine":9602,"kind":"region","startCharacter":47,"startLine":9597},{"endCharacter":10,"endLine":9601,"kind":"region","startCharacter":50,"startLine":9599},{"endCharacter":8,"endLine":9621,"kind":"region","startCharacter":17,"startLine":9604},{"endCharacter":10,"endLine":9620,"kind":"region","startCharacter":20,"startLine":9606},{"endCharacter":12,"endLine":9619,"kind":"region","startCharacter":23,"startLine":9612},{"endLine":9777,"kind":"region","startCharacter":17,"startLine":9648},{"endCharacter":2,"endLine":9661,"kind":"region","startCharacter":43,"startLine":9652},{"endCharacter":2,"endLine":9667,"kind":"region","startCharacter":53,"startLine":9666},{"endCharacter":2,"endLine":9670,"kind":"region","startCharacter":40,"startLine":9669},{"endCharacter":2,"endLine":9674,"kind":"region","startCharacter":48,"startLine":9672},{"endCharacter":2,"endLine":9677,"kind":"region","startCharacter":43,"startLine":9676},{"endCharacter":2,"endLine":9737,"kind":"region","startCharacter":12,"startLine":9735},{"endCharacter":2,"endLine":9744,"kind":"region","startCharacter":70,"startLine":9738},{"endCharacter":81,"endLine":5,"kind":"comment","startCharacter":2,"startLine":0},{"endCharacter":81,"endLine":15,"kind":"comment","startCharacter":2,"startLine":13},{"endCharacter":1,"endLine":131,"kind":"comment","startCharacter":2,"startLine":128},{"endCharacter":81,"endLine":178,"kind":"comment","startCharacter":2,"startLine":174},{"endLine":200,"kind":"comment","startCharacter":2,"startLine":194},{"endLine":303,"kind":"comment","startCharacter":2,"startLine":227},{"endCharacter":53,"endLine":310,"kind":"comment","startCharacter":2,"startLine":309},{"endCharacter":71,"endLine":386,"kind":"comment","startCharacter":2,"startLine":385},{"endLine":402,"kind":"comment","startCharacter":2,"startLine":397},{"endLine":417,"kind":"comment","startCharacter":2,"startLine":415},{"endLine":436,"kind":"comment","startCharacter":2,"startLine":434},{"endLine":444,"kind":"comment","startCharacter":2,"startLine":443},{"endLine":471,"kind":"comment","startCharacter":2,"startLine":470},{"endLine":498,"kind":"comment","startCharacter":2,"startLine":497},{"endLine":506,"kind":"comment","startCharacter":2,"startLine":505},{"endLine":520,"kind":"comment","startCharacter":2,"startLine":519},{"endLine":529,"kind":"comment","startCharacter":2,"startLine":527},{"endCharacter":68,"endLine":535,"kind":"comment","startCharacter":4,"startLine":533},{"endLine":550,"kind":"comment","startCharacter":2,"startLine":549},{"endLine":580,"kind":"comment","startCharacter":2,"startLine":574},{"endLine":625,"kind":"comment","startCharacter":2,"startLine":618},{"endLine":654,"kind":"comment","startCharacter":2,"startLine":653},{"endLine":670,"kind":"comment","startCharacter":2,"startLine":669},{"endLine":698,"kind":"comment","startCharacter":2,"startLine":697},{"endCharacter":81,"endLine":849,"kind":"comment","startCharacter":2,"startLine":848},{"endCharacter":81,"endLine":1026,"kind":"comment","startCharacter":2,"startLine":1025},{"endCharacter":81,"endLine":1034,"kind":"comment","startCharacter":2,"startLine":1033},{"endCharacter":81,"endLine":1062,"kind":"comment","startCharacter":2,"startLine":1056},{"endLine":1264,"kind":"comment","startCharacter":2,"startLine":1262},{"endCharacter":81,"endLine":1282,"kind":"comment","startCharacter":2,"startLine":1281},{"endCharacter":81,"endLine":1505,"kind":"comment","startCharacter":2,"startLine":1504},{"endCharacter":22,"endLine":1804,"kind":"comment","startCharacter":8,"startLine":1800},{"endCharacter":59,"endLine":2070,"kind":"comment","startCharacter":8,"startLine":2069},{"endCharacter":81,"endLine":2079,"kind":"comment","startCharacter":2,"startLine":2078},{"endCharacter":81,"endLine":2269,"kind":"comment","startCharacter":2,"startLine":2268},{"endCharacter":81,"endLine":2526,"kind":"comment","startCharacter":2,"startLine":2525},{"endLine":2531,"kind":"comment","startCharacter":2,"startLine":2529},{"endCharacter":80,"endLine":2698,"kind":"comment","startCharacter":2,"startLine":2697},{"endLine":2809,"kind":"comment","startCharacter":2,"startLine":2808},{"endCharacter":50,"endLine":3018,"kind":"comment","startCharacter":2,"startLine":3017},{"endCharacter":1,"endLine":3062,"kind":"comment","startCharacter":2,"startLine":3055},{"endCharacter":2,"endLine":3689,"kind":"comment","startCharacter":4,"startLine":3688},{"endCharacter":2,"endLine":3695,"kind":"comment","startCharacter":4,"startLine":3694},{"endCharacter":2,"endLine":3716,"kind":"comment","startCharacter":4,"startLine":3715},{"endCharacter":2,"endLine":3735,"kind":"comment","startCharacter":4,"startLine":3734},{"endCharacter":2,"endLine":3761,"kind":"comment","startCharacter":4,"startLine":3760},{"endCharacter":2,"endLine":3799,"kind":"comment","startCharacter":4,"startLine":3798},{"endCharacter":6,"endLine":3968,"kind":"comment","startCharacter":8,"startLine":3966},{"endCharacter":71,"endLine":5016,"kind":"comment","startCharacter":6,"startLine":5015},{"endCharacter":5,"endLine":5029,"kind":"comment","startCharacter":6,"startLine":5024},{"endCharacter":81,"endLine":9352,"kind":"comment","startCharacter":2,"startLine":9314},{"endCharacter":22,"endLine":9411,"kind":"comment","startCharacter":4,"startLine":9409},{"endLine":9515,"kind":"comment","startCharacter":2,"startLine":9512},{"endCharacter":83,"endLine":9555,"kind":"comment","startCharacter":4,"startLine":9554},{"endCharacter":82,"endLine":9583,"kind":"comment","startCharacter":4,"startLine":9582},{"endCharacter":80,"endLine":9635,"kind":"comment","startCharacter":2,"startLine":9634}]}},{"pid":0,"ph":"i","name":"Log","ts":58345384.816,"tid":6130,"args":{"Message":"<-- $/cancelRequest"}},{"pid":0,"ph":"X","name":"$/cancelRequest","ts":58345366.020999998,"tid":6130,"dur":90.961000002920628,"args":{"Params":{"id":54}}},{"pid":0,"ph":"i","name":"Log","ts":58345929.572999999,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(59)"}},{"pid":0,"ph":"X","name":"ClangTidyMatch","ts":58369847.666000001,"tid":6237,"dur":36991.278999999166,"args":{}},{"pid":0,"ph":"i","name":"Log","ts":58406992.755000003,"tid":6237,"args":{"Message":"IncludeCleaner: Failed to get an entry for resolved path : No such file or directory"}},{"pid":0,"ph":"i","name":"Log","ts":58407073.586999997,"tid":6237,"args":{"Message":"IncludeCleaner: Failed to get an entry for resolved path : No such file or directory"}},{"pid":0,"ph":"X","name":"IncludeCleaner::getUnused","ts":58416239.457999997,"tid":6237,"dur":4.8890000060200691,"args":{}},{"pid":0,"ph":"X","name":"include_cleaner::walkUsed","ts":58408900.361000001,"tid":6237,"dur":7355.8779999986291,"args":{}},{"pid":0,"ph":"X","name":"IncludeCleaner::issueIncludeCleanerDiagnostics","ts":58416265.285999998,"tid":6237,"dur":5034.722000002861,"args":{}},{"pid":0,"ph":"X","name":"BuildAST","ts":57562370.125,"tid":6237,"dur":859117.59700000286,"args":{"File":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58441679.280000001,"tid":6237,"args":{"Message":"--> textDocument/publishDiagnostics"}},{"pid":0,"ph":"i","name":"Log","ts":58445296.369000003,"tid":6237,"args":{"Message":"--> textDocument/inactiveRegions"}},{"pid":0,"ph":"X","name":"ASTSignals::derive","ts":58445640.728,"tid":6237,"dur":12974.770999997854,"args":{}},{"pid":0,"ph":"X","name":"Running main AST callback","ts":58421522.417999998,"tid":6237,"dur":37117.026000000536,"args":{}},{"pid":0,"ph":"X","name":"Build AST","ts":57562165.649999999,"tid":6237,"dur":896485.67700000107,"args":{}},{"pid":0,"ph":"X","name":"Update","ts":57550799.189999998,"tid":6237,"dur":11361.641000002623,"args":{}},{"pid":0,"ph":"X","name":"textDocument/didOpen","ts":57548079.162,"tid":6130,"dur":2735.2269999980927,"args":{"Params":{"textDocument":{"languageId":"cpp","text":"/* ----------------------------------------------------------------------------\n * This file was automatically generated by SWIG (https://www.swig.org).\n * Version 4.1.0\n *\n * Do not make changes to this file unless you know what you are doing - modify\n * the SWIG interface file instead.\n * ----------------------------------------------------------------------------- */\n\n\n#define SWIG_VERSION 0x040100\n#define SWIGPYTHON\n#define SWIG_PYTHON_DIRECTOR_NO_VTABLE\n\n/* -----------------------------------------------------------------------------\n *  This section contains generic SWIG labels for method/variable\n *  declarations/attributes, and other compiler dependent labels.\n * ----------------------------------------------------------------------------- */\n\n/* template workaround for compilers that cannot correctly implement the C++ standard */\n#ifndef SWIGTEMPLATEDISAMBIGUATOR\n# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)\n#  define SWIGTEMPLATEDISAMBIGUATOR template\n# elif defined(__HP_aCC)\n/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */\n/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */\n#  define SWIGTEMPLATEDISAMBIGUATOR template\n# else\n#  define SWIGTEMPLATEDISAMBIGUATOR\n# endif\n#endif\n\n/* inline attribute */\n#ifndef SWIGINLINE\n# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))\n#   define SWIGINLINE inline\n# else\n#   define SWIGINLINE\n# endif\n#endif\n\n/* attribute recognised by some compilers to avoid 'unused' warnings */\n#ifndef SWIGUNUSED\n# if defined(__GNUC__)\n#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))\n#     define SWIGUNUSED __attribute__ ((__unused__))\n#   else\n#     define SWIGUNUSED\n#   endif\n# elif defined(__ICC)\n#   define SWIGUNUSED __attribute__ ((__unused__))\n# else\n#   define SWIGUNUSED\n# endif\n#endif\n\n#ifndef SWIG_MSC_UNSUPPRESS_4505\n# if defined(_MSC_VER)\n#   pragma warning(disable : 4505) /* unreferenced local function has been removed */\n# endif\n#endif\n\n#ifndef SWIGUNUSEDPARM\n# ifdef __cplusplus\n#   define SWIGUNUSEDPARM(p)\n# else\n#   define SWIGUNUSEDPARM(p) p SWIGUNUSED\n# endif\n#endif\n\n/* internal SWIG method */\n#ifndef SWIGINTERN\n# define SWIGINTERN static SWIGUNUSED\n#endif\n\n/* internal inline SWIG method */\n#ifndef SWIGINTERNINLINE\n# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE\n#endif\n\n/* exporting methods */\n#if defined(__GNUC__)\n#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)\n#    ifndef GCC_HASCLASSVISIBILITY\n#      define GCC_HASCLASSVISIBILITY\n#    endif\n#  endif\n#endif\n\n#ifndef SWIGEXPORT\n# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)\n#   if defined(STATIC_LINKED)\n#     define SWIGEXPORT\n#   else\n#     define SWIGEXPORT __declspec(dllexport)\n#   endif\n# else\n#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)\n#     define SWIGEXPORT __attribute__ ((visibility(\"default\")))\n#   else\n#     define SWIGEXPORT\n#   endif\n# endif\n#endif\n\n/* calling conventions for Windows */\n#ifndef SWIGSTDCALL\n# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)\n#   define SWIGSTDCALL __stdcall\n# else\n#   define SWIGSTDCALL\n# endif\n#endif\n\n/* Deal with Microsoft's attempt at deprecating C standard runtime functions */\n#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)\n# define _CRT_SECURE_NO_DEPRECATE\n#endif\n\n/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */\n#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)\n# define _SCL_SECURE_NO_DEPRECATE\n#endif\n\n/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */\n#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)\n# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0\n#endif\n\n/* Intel's compiler complains if a variable which was never initialised is\n * cast to void, which is a common idiom which we use to indicate that we\n * are aware a variable isn't used.  So we just silence that warning.\n * See: https://github.com/swig/swig/issues/192 for more discussion.\n */\n#ifdef __INTEL_COMPILER\n# pragma warning disable 592\n#endif\n\n\n#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)\n/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */\n# include <math.h>\n#endif\n\n#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)\n#define PY_SSIZE_T_CLEAN\n#endif\n\n#if __GNUC__ >= 7\n#pragma GCC diagnostic push\n#if defined(__cplusplus) && __cplusplus >=201703L\n#pragma GCC diagnostic ignored \"-Wregister\" /* For python-2.7 headers that use register */\n#endif\n#endif\n\n#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)\n/* Use debug wrappers with the Python release dll */\n\n#if defined(_MSC_VER) && _MSC_VER >= 1929\n/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later\n * See https://github.com/swig/swig/issues/2090 */\n# include <corecrt.h>\n#endif\n\n# undef _DEBUG\n# include <Python.h>\n# define _DEBUG 1\n#else\n# include <Python.h>\n#endif\n\n#if __GNUC__ >= 7\n#pragma GCC diagnostic pop\n#endif\n\n/* -----------------------------------------------------------------------------\n * swigrun.swg\n *\n * This file contains generic C API SWIG runtime support for pointer\n * type checking.\n * ----------------------------------------------------------------------------- */\n\n/* This should only be incremented when either the layout of swig_type_info changes,\n   or for whatever reason, the runtime changes incompatibly */\n#define SWIG_RUNTIME_VERSION \"4\"\n\n/* define SWIG_TYPE_TABLE_NAME as \"SWIG_TYPE_TABLE\" */\n#ifdef SWIG_TYPE_TABLE\n# define SWIG_QUOTE_STRING(x) #x\n# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)\n# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)\n#else\n# define SWIG_TYPE_TABLE_NAME\n#endif\n\n/*\n  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for\n  creating a static or dynamic library from the SWIG runtime code.\n  In 99.9% of the cases, SWIG just needs to declare them as 'static'.\n\n  But only do this if strictly necessary, ie, if you have problems\n  with your compiler or suchlike.\n*/\n\n#ifndef SWIGRUNTIME\n# define SWIGRUNTIME SWIGINTERN\n#endif\n\n#ifndef SWIGRUNTIMEINLINE\n# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE\n#endif\n\n/*  Generic buffer size */\n#ifndef SWIG_BUFFER_SIZE\n# define SWIG_BUFFER_SIZE 1024\n#endif\n\n/* Flags for pointer conversions */\n#define SWIG_POINTER_DISOWN        0x1\n#define SWIG_CAST_NEW_MEMORY       0x2\n#define SWIG_POINTER_NO_NULL       0x4\n#define SWIG_POINTER_CLEAR         0x8\n#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)\n\n/* Flags for new pointer objects */\n#define SWIG_POINTER_OWN           0x1\n\n\n/*\n   Flags/methods for returning states.\n\n   The SWIG conversion methods, as ConvertPtr, return an integer\n   that tells if the conversion was successful or not. And if not,\n   an error code can be returned (see swigerrors.swg for the codes).\n\n   Use the following macros/flags to set or process the returning\n   states.\n\n   In old versions of SWIG, code such as the following was usually written:\n\n     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {\n       // success code\n     } else {\n       //fail code\n     }\n\n   Now you can be more explicit:\n\n    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);\n    if (SWIG_IsOK(res)) {\n      // success code\n    } else {\n      // fail code\n    }\n\n   which is the same really, but now you can also do\n\n    Type *ptr;\n    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);\n    if (SWIG_IsOK(res)) {\n      // success code\n      if (SWIG_IsNewObj(res) {\n        ...\n\tdelete *ptr;\n      } else {\n        ...\n      }\n    } else {\n      // fail code\n    }\n\n   I.e., now SWIG_ConvertPtr can return new objects and you can\n   identify the case and take care of the deallocation. Of course that\n   also requires SWIG_ConvertPtr to return new result values, such as\n\n      int SWIG_ConvertPtr(obj, ptr,...) {\n        if (<obj is ok>) {\n          if (<need new object>) {\n            *ptr = <ptr to new allocated object>;\n            return SWIG_NEWOBJ;\n          } else {\n            *ptr = <ptr to old object>;\n            return SWIG_OLDOBJ;\n          }\n        } else {\n          return SWIG_BADOBJ;\n        }\n      }\n\n   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be\n   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the\n   SWIG errors code.\n\n   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code\n   allows returning the 'cast rank', for example, if you have this\n\n       int food(double)\n       int fooi(int);\n\n   and you call\n\n      food(1)   // cast rank '1'  (1 -> 1.0)\n      fooi(1)   // cast rank '0'\n\n   just use the SWIG_AddCast()/SWIG_CheckState()\n*/\n\n#define SWIG_OK                    (0)\n/* Runtime errors are < 0 */\n#define SWIG_ERROR                 (-1)\n/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */\n/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */\n/* Errors < -200 are generic runtime specific errors */\n#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)\n\n#define SWIG_IsOK(r)               (r >= 0)\n#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)\n\n/* The CastRankLimit says how many bits are used for the cast rank */\n#define SWIG_CASTRANKLIMIT         (1 << 8)\n/* The NewMask denotes the object was created (using new/malloc) */\n#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)\n/* The TmpMask is for in/out typemaps that use temporal objects */\n#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)\n/* Simple returning values */\n#define SWIG_BADOBJ                (SWIG_ERROR)\n#define SWIG_OLDOBJ                (SWIG_OK)\n#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)\n#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)\n/* Check, add and del object mask methods */\n#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)\n#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)\n#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))\n#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)\n#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)\n#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))\n\n/* Cast-Rank Mode */\n#if defined(SWIG_CASTRANK_MODE)\n#  ifndef SWIG_TypeRank\n#    define SWIG_TypeRank             unsigned long\n#  endif\n#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */\n#    define SWIG_MAXCASTRANK          (2)\n#  endif\n#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)\n#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)\nSWIGINTERNINLINE int SWIG_AddCast(int r) {\n  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;\n}\nSWIGINTERNINLINE int SWIG_CheckState(int r) {\n  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;\n}\n#else /* no cast-rank mode */\n#  define SWIG_AddCast(r) (r)\n#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)\n#endif\n\n\n#include <string.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\ntypedef void *(*swig_converter_func)(void *, int *);\ntypedef struct swig_type_info *(*swig_dycast_func)(void **);\n\n/* Structure to store information on one type */\ntypedef struct swig_type_info {\n  const char             *name;\t\t\t/* mangled name of this type */\n  const char             *str;\t\t\t/* human readable name of this type */\n  swig_dycast_func        dcast;\t\t/* dynamic cast function down a hierarchy */\n  struct swig_cast_info  *cast;\t\t\t/* linked list of types that can cast into this type */\n  void                   *clientdata;\t\t/* language specific type data */\n  int                    owndata;\t\t/* flag if the structure owns the clientdata */\n} swig_type_info;\n\n/* Structure to store a type and conversion function used for casting */\ntypedef struct swig_cast_info {\n  swig_type_info         *type;\t\t\t/* pointer to type that is equivalent to this type */\n  swig_converter_func     converter;\t\t/* function to cast the void pointers */\n  struct swig_cast_info  *next;\t\t\t/* pointer to next cast in linked list */\n  struct swig_cast_info  *prev;\t\t\t/* pointer to the previous cast */\n} swig_cast_info;\n\n/* Structure used to store module information\n * Each module generates one structure like this, and the runtime collects\n * all of these structures and stores them in a circularly linked list.*/\ntypedef struct swig_module_info {\n  swig_type_info         **types;\t\t/* Array of pointers to swig_type_info structures that are in this module */\n  size_t                 size;\t\t        /* Number of types in this module */\n  struct swig_module_info *next;\t\t/* Pointer to next element in circularly linked list */\n  swig_type_info         **type_initial;\t/* Array of initially generated type structures */\n  swig_cast_info         **cast_initial;\t/* Array of initially generated casting structures */\n  void                    *clientdata;\t\t/* Language specific module data */\n} swig_module_info;\n\n/*\n  Compare two type names skipping the space characters, therefore\n  \"char*\" == \"char *\" and \"Class<int>\" == \"Class<int >\", etc.\n\n  Return 0 when the two name types are equivalent, as in\n  strncmp, but skipping ' '.\n*/\nSWIGRUNTIME int\nSWIG_TypeNameComp(const char *f1, const char *l1,\n\t\t  const char *f2, const char *l2) {\n  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {\n    while ((*f1 == ' ') && (f1 != l1)) ++f1;\n    while ((*f2 == ' ') && (f2 != l2)) ++f2;\n    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;\n  }\n  return (int)((l1 - f1) - (l2 - f2));\n}\n\n/*\n  Check type equivalence in a name list like <name1>|<name2>|...\n  Return 0 if equal, -1 if nb < tb, 1 if nb > tb\n*/\nSWIGRUNTIME int\nSWIG_TypeCmp(const char *nb, const char *tb) {\n  int equiv = 1;\n  const char* te = tb + strlen(tb);\n  const char* ne = nb;\n  while (equiv != 0 && *ne) {\n    for (nb = ne; *ne; ++ne) {\n      if (*ne == '|') break;\n    }\n    equiv = SWIG_TypeNameComp(nb, ne, tb, te);\n    if (*ne) ++ne;\n  }\n  return equiv;\n}\n\n/*\n  Check type equivalence in a name list like <name1>|<name2>|...\n  Return 0 if not equal, 1 if equal\n*/\nSWIGRUNTIME int\nSWIG_TypeEquiv(const char *nb, const char *tb) {\n  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;\n}\n\n/*\n  Check the typename\n*/\nSWIGRUNTIME swig_cast_info *\nSWIG_TypeCheck(const char *c, swig_type_info *ty) {\n  if (ty) {\n    swig_cast_info *iter = ty->cast;\n    while (iter) {\n      if (strcmp(iter->type->name, c) == 0) {\n        if (iter == ty->cast)\n          return iter;\n        /* Move iter to the top of the linked list */\n        iter->prev->next = iter->next;\n        if (iter->next)\n          iter->next->prev = iter->prev;\n        iter->next = ty->cast;\n        iter->prev = 0;\n        if (ty->cast) ty->cast->prev = iter;\n        ty->cast = iter;\n        return iter;\n      }\n      iter = iter->next;\n    }\n  }\n  return 0;\n}\n\n/*\n  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison\n*/\nSWIGRUNTIME swig_cast_info *\nSWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {\n  if (ty) {\n    swig_cast_info *iter = ty->cast;\n    while (iter) {\n      if (iter->type == from) {\n        if (iter == ty->cast)\n          return iter;\n        /* Move iter to the top of the linked list */\n        iter->prev->next = iter->next;\n        if (iter->next)\n          iter->next->prev = iter->prev;\n        iter->next = ty->cast;\n        iter->prev = 0;\n        if (ty->cast) ty->cast->prev = iter;\n        ty->cast = iter;\n        return iter;\n      }\n      iter = iter->next;\n    }\n  }\n  return 0;\n}\n\n/*\n  Cast a pointer up an inheritance hierarchy\n*/\nSWIGRUNTIMEINLINE void *\nSWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {\n  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);\n}\n\n/*\n   Dynamic pointer casting. Down an inheritance hierarchy\n*/\nSWIGRUNTIME swig_type_info *\nSWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {\n  swig_type_info *lastty = ty;\n  if (!ty || !ty->dcast) return ty;\n  while (ty && (ty->dcast)) {\n    ty = (*ty->dcast)(ptr);\n    if (ty) lastty = ty;\n  }\n  return lastty;\n}\n\n/*\n  Return the name associated with this type\n*/\nSWIGRUNTIMEINLINE const char *\nSWIG_TypeName(const swig_type_info *ty) {\n  return ty->name;\n}\n\n/*\n  Return the pretty name associated with this type,\n  that is an unmangled type name in a form presentable to the user.\n*/\nSWIGRUNTIME const char *\nSWIG_TypePrettyName(const swig_type_info *type) {\n  /* The \"str\" field contains the equivalent pretty names of the\n     type, separated by vertical-bar characters.  Choose the last\n     name. It should be the most specific; a fully resolved name\n     but not necessarily with default template parameters expanded. */\n  if (!type) return NULL;\n  if (type->str != NULL) {\n    const char *last_name = type->str;\n    const char *s;\n    for (s = type->str; *s; s++)\n      if (*s == '|') last_name = s+1;\n    return last_name;\n  }\n  else\n    return type->name;\n}\n\n/*\n   Set the clientdata field for a type\n*/\nSWIGRUNTIME void\nSWIG_TypeClientData(swig_type_info *ti, void *clientdata) {\n  swig_cast_info *cast = ti->cast;\n  /* if (ti->clientdata == clientdata) return; */\n  ti->clientdata = clientdata;\n\n  while (cast) {\n    if (!cast->converter) {\n      swig_type_info *tc = cast->type;\n      if (!tc->clientdata) {\n\tSWIG_TypeClientData(tc, clientdata);\n      }\n    }\n    cast = cast->next;\n  }\n}\nSWIGRUNTIME void\nSWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {\n  SWIG_TypeClientData(ti, clientdata);\n  ti->owndata = 1;\n}\n\n/*\n  Search for a swig_type_info structure only by mangled name\n  Search is a O(log #types)\n\n  We start searching at module start, and finish searching when start == end.\n  Note: if start == end at the beginning of the function, we go all the way around\n  the circular list.\n*/\nSWIGRUNTIME swig_type_info *\nSWIG_MangledTypeQueryModule(swig_module_info *start,\n                            swig_module_info *end,\n\t\t            const char *name) {\n  swig_module_info *iter = start;\n  do {\n    if (iter->size) {\n      size_t l = 0;\n      size_t r = iter->size - 1;\n      do {\n\t/* since l+r >= 0, we can (>> 1) instead (/ 2) */\n\tsize_t i = (l + r) >> 1;\n\tconst char *iname = iter->types[i]->name;\n\tif (iname) {\n\t  int compare = strcmp(name, iname);\n\t  if (compare == 0) {\n\t    return iter->types[i];\n\t  } else if (compare < 0) {\n\t    if (i) {\n\t      r = i - 1;\n\t    } else {\n\t      break;\n\t    }\n\t  } else if (compare > 0) {\n\t    l = i + 1;\n\t  }\n\t} else {\n\t  break; /* should never happen */\n\t}\n      } while (l <= r);\n    }\n    iter = iter->next;\n  } while (iter != end);\n  return 0;\n}\n\n/*\n  Search for a swig_type_info structure for either a mangled name or a human readable name.\n  It first searches the mangled names of the types, which is a O(log #types)\n  If a type is not found it then searches the human readable names, which is O(#types).\n\n  We start searching at module start, and finish searching when start == end.\n  Note: if start == end at the beginning of the function, we go all the way around\n  the circular list.\n*/\nSWIGRUNTIME swig_type_info *\nSWIG_TypeQueryModule(swig_module_info *start,\n                     swig_module_info *end,\n\t\t     const char *name) {\n  /* STEP 1: Search the name field using binary search */\n  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);\n  if (ret) {\n    return ret;\n  } else {\n    /* STEP 2: If the type hasn't been found, do a complete search\n       of the str field (the human readable name) */\n    swig_module_info *iter = start;\n    do {\n      size_t i = 0;\n      for (; i < iter->size; ++i) {\n\tif (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))\n\t  return iter->types[i];\n      }\n      iter = iter->next;\n    } while (iter != end);\n  }\n\n  /* neither found a match */\n  return 0;\n}\n\n/*\n   Pack binary data into a string\n*/\nSWIGRUNTIME char *\nSWIG_PackData(char *c, void *ptr, size_t sz) {\n  static const char hex[17] = \"0123456789abcdef\";\n  const unsigned char *u = (unsigned char *) ptr;\n  const unsigned char *eu =  u + sz;\n  for (; u != eu; ++u) {\n    unsigned char uu = *u;\n    *(c++) = hex[(uu & 0xf0) >> 4];\n    *(c++) = hex[uu & 0xf];\n  }\n  return c;\n}\n\n/*\n   Unpack binary data from a string\n*/\nSWIGRUNTIME const char *\nSWIG_UnpackData(const char *c, void *ptr, size_t sz) {\n  unsigned char *u = (unsigned char *) ptr;\n  const unsigned char *eu = u + sz;\n  for (; u != eu; ++u) {\n    char d = *(c++);\n    unsigned char uu;\n    if ((d >= '0') && (d <= '9'))\n      uu = (unsigned char)((d - '0') << 4);\n    else if ((d >= 'a') && (d <= 'f'))\n      uu = (unsigned char)((d - ('a'-10)) << 4);\n    else\n      return (char *) 0;\n    d = *(c++);\n    if ((d >= '0') && (d <= '9'))\n      uu |= (unsigned char)(d - '0');\n    else if ((d >= 'a') && (d <= 'f'))\n      uu |= (unsigned char)(d - ('a'-10));\n    else\n      return (char *) 0;\n    *u = uu;\n  }\n  return c;\n}\n\n/*\n   Pack 'void *' into a string buffer.\n*/\nSWIGRUNTIME char *\nSWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {\n  char *r = buff;\n  if ((2*sizeof(void *) + 2) > bsz) return 0;\n  *(r++) = '_';\n  r = SWIG_PackData(r,&ptr,sizeof(void *));\n  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;\n  strcpy(r,name);\n  return buff;\n}\n\nSWIGRUNTIME const char *\nSWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {\n  if (*c != '_') {\n    if (strcmp(c,\"NULL\") == 0) {\n      *ptr = (void *) 0;\n      return name;\n    } else {\n      return 0;\n    }\n  }\n  return SWIG_UnpackData(++c,ptr,sizeof(void *));\n}\n\nSWIGRUNTIME char *\nSWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {\n  char *r = buff;\n  size_t lname = (name ? strlen(name) : 0);\n  if ((2*sz + 2 + lname) > bsz) return 0;\n  *(r++) = '_';\n  r = SWIG_PackData(r,ptr,sz);\n  if (lname) {\n    strncpy(r,name,lname+1);\n  } else {\n    *r = 0;\n  }\n  return buff;\n}\n\nSWIGRUNTIME const char *\nSWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {\n  if (*c != '_') {\n    if (strcmp(c,\"NULL\") == 0) {\n      memset(ptr,0,sz);\n      return name;\n    } else {\n      return 0;\n    }\n  }\n  return SWIG_UnpackData(++c,ptr,sz);\n}\n\n#ifdef __cplusplus\n}\n#endif\n\n/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */\n#define  SWIG_UnknownError    \t   -1\n#define  SWIG_IOError        \t   -2\n#define  SWIG_RuntimeError   \t   -3\n#define  SWIG_IndexError     \t   -4\n#define  SWIG_TypeError      \t   -5\n#define  SWIG_DivisionByZero \t   -6\n#define  SWIG_OverflowError  \t   -7\n#define  SWIG_SyntaxError    \t   -8\n#define  SWIG_ValueError     \t   -9\n#define  SWIG_SystemError    \t   -10\n#define  SWIG_AttributeError \t   -11\n#define  SWIG_MemoryError    \t   -12\n#define  SWIG_NullReferenceError   -13\n\n\n/* Compatibility macros for Python 3 */\n#if PY_VERSION_HEX >= 0x03000000\n\n#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)\n#define PyInt_Check(x) PyLong_Check(x)\n#define PyInt_AsLong(x) PyLong_AsLong(x)\n#define PyInt_FromLong(x) PyLong_FromLong(x)\n#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)\n#define PyString_Check(name) PyBytes_Check(name)\n#define PyString_FromString(x) PyUnicode_FromString(x)\n#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)\n#define PyString_AsString(str) PyBytes_AsString(str)\n#define PyString_Size(str) PyBytes_Size(str)\t\n#define PyString_InternFromString(key) PyUnicode_InternFromString(key)\n#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE\n#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)\n\n#endif\n\n#ifndef Py_TYPE\n#  define Py_TYPE(op) ((op)->ob_type)\n#endif\n\n/* SWIG APIs for compatibility of both Python 2 & 3 */\n\n#if PY_VERSION_HEX >= 0x03000000\n#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat\n#else\n#  define SWIG_Python_str_FromFormat PyString_FromFormat\n#endif\n\n\nSWIGINTERN char*\nSWIG_Python_str_AsChar(PyObject *str)\n{\n#if PY_VERSION_HEX >= 0x03030000\n  return (char *)PyUnicode_AsUTF8(str);\n#else\n  return PyString_AsString(str);\n#endif\n}\n\n/* Was useful for Python 3.0.x-3.2.x - now provided only for compatibility\n * with any uses in user interface files. */\n#define SWIG_Python_str_DelForPy3(x)\n\n\nSWIGINTERN PyObject*\nSWIG_Python_str_FromChar(const char *c)\n{\n#if PY_VERSION_HEX >= 0x03000000\n  return PyUnicode_FromString(c); \n#else\n  return PyString_FromString(c);\n#endif\n}\n\n#ifndef PyObject_DEL\n# define PyObject_DEL PyObject_Del\n#endif\n\n/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */\n# define SWIGPY_USE_CAPSULE\n#ifdef SWIGPYTHON_BUILTIN\n# define SWIGPY_CAPSULE_ATTR_NAME \"type_pointer_capsule_builtin\" SWIG_TYPE_TABLE_NAME\n#else\n# define SWIGPY_CAPSULE_ATTR_NAME \"type_pointer_capsule\" SWIG_TYPE_TABLE_NAME\n#endif\n# define SWIGPY_CAPSULE_NAME (\"swig_runtime_data\" SWIG_RUNTIME_VERSION \".\" SWIGPY_CAPSULE_ATTR_NAME)\n\n#if PY_VERSION_HEX < 0x03020000\n#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)\n#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)\n#define Py_hash_t long\n#endif\n\n/* -----------------------------------------------------------------------------\n * error manipulation\n * ----------------------------------------------------------------------------- */\n\nSWIGRUNTIME PyObject*\nSWIG_Python_ErrorType(int code) {\n  PyObject* type = 0;\n  switch(code) {\n  case SWIG_MemoryError:\n    type = PyExc_MemoryError;\n    break;\n  case SWIG_IOError:\n    type = PyExc_IOError;\n    break;\n  case SWIG_RuntimeError:\n    type = PyExc_RuntimeError;\n    break;\n  case SWIG_IndexError:\n    type = PyExc_IndexError;\n    break;\n  case SWIG_TypeError:\n    type = PyExc_TypeError;\n    break;\n  case SWIG_DivisionByZero:\n    type = PyExc_ZeroDivisionError;\n    break;\n  case SWIG_OverflowError:\n    type = PyExc_OverflowError;\n    break;\n  case SWIG_SyntaxError:\n    type = PyExc_SyntaxError;\n    break;\n  case SWIG_ValueError:\n    type = PyExc_ValueError;\n    break;\n  case SWIG_SystemError:\n    type = PyExc_SystemError;\n    break;\n  case SWIG_AttributeError:\n    type = PyExc_AttributeError;\n    break;\n  default:\n    type = PyExc_RuntimeError;\n  }\n  return type;\n}\n\n\nSWIGRUNTIME void\nSWIG_Python_AddErrorMsg(const char* mesg)\n{\n  PyObject *type = 0;\n  PyObject *value = 0;\n  PyObject *traceback = 0;\n\n  if (PyErr_Occurred())\n    PyErr_Fetch(&type, &value, &traceback);\n  if (value) {\n    PyObject *old_str = PyObject_Str(value);\n    const char *tmp = SWIG_Python_str_AsChar(old_str);\n    PyErr_Clear();\n    Py_XINCREF(type);\n    if (tmp)\n      PyErr_Format(type, \"%s %s\", tmp, mesg);\n    else\n      PyErr_Format(type, \"%s\", mesg);\n    Py_DECREF(old_str);\n    Py_DECREF(value);\n  } else {\n    PyErr_SetString(PyExc_RuntimeError, mesg);\n  }\n}\n\nSWIGRUNTIME int\nSWIG_Python_TypeErrorOccurred(PyObject *obj)\n{\n  PyObject *error;\n  if (obj)\n    return 0;\n  error = PyErr_Occurred();\n  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);\n}\n\nSWIGRUNTIME void\nSWIG_Python_RaiseOrModifyTypeError(const char *message)\n{\n  if (SWIG_Python_TypeErrorOccurred(NULL)) {\n    /* Use existing TypeError to preserve stacktrace and enhance with given message */\n    PyObject *newvalue;\n    PyObject *type = NULL, *value = NULL, *traceback = NULL;\n    PyErr_Fetch(&type, &value, &traceback);\n#if PY_VERSION_HEX >= 0x03000000\n    newvalue = PyUnicode_FromFormat(\"%S\\nAdditional information:\\n%s\", value, message);\n#else\n    newvalue = PyString_FromFormat(\"%s\\nAdditional information:\\n%s\", PyString_AsString(value), message);\n#endif\n    if (newvalue) {\n      Py_XDECREF(value);\n      PyErr_Restore(type, newvalue, traceback);\n    } else {\n      PyErr_Restore(type, value, traceback);\n    }\n  } else {\n    /* Raise TypeError using given message */\n    PyErr_SetString(PyExc_TypeError, message);\n  }\n}\n\n#if defined(SWIG_PYTHON_NO_THREADS)\n#  if defined(SWIG_PYTHON_THREADS)\n#    undef SWIG_PYTHON_THREADS\n#  endif\n#endif\n#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */\n#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)\n#    define SWIG_PYTHON_USE_GIL\n#  endif\n#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */\n#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)\n#      if PY_VERSION_HEX < 0x03070000\n#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()\n#      else\n#        define SWIG_PYTHON_INITIALIZE_THREADS\n#      endif\n#    endif\n#    ifdef __cplusplus /* C++ code */\n       class SWIG_Python_Thread_Block {\n         bool status;\n         PyGILState_STATE state;\n       public:\n         void end() { if (status) { PyGILState_Release(state); status = false;} }\n         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}\n         ~SWIG_Python_Thread_Block() { end(); }\n       };\n       class SWIG_Python_Thread_Allow {\n         bool status;\n         PyThreadState *save;\n       public:\n         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}\n         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}\n         ~SWIG_Python_Thread_Allow() { end(); }\n       };\n#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block\n#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()\n#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow\n#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()\n#    else /* C code */\n#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()\n#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)\n#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()\n#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)\n#    endif\n#  else /* Old thread way, not implemented, user must provide it */\n#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)\n#      define SWIG_PYTHON_INITIALIZE_THREADS\n#    endif\n#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)\n#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK\n#    endif\n#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)\n#      define SWIG_PYTHON_THREAD_END_BLOCK\n#    endif\n#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)\n#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW\n#    endif\n#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)\n#      define SWIG_PYTHON_THREAD_END_ALLOW\n#    endif\n#  endif\n#else /* No thread support */\n#  define SWIG_PYTHON_INITIALIZE_THREADS\n#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK\n#  define SWIG_PYTHON_THREAD_END_BLOCK\n#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW\n#  define SWIG_PYTHON_THREAD_END_ALLOW\n#endif\n\n/* -----------------------------------------------------------------------------\n * Python API portion that goes into the runtime\n * ----------------------------------------------------------------------------- */\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* -----------------------------------------------------------------------------\n * Constant declarations\n * ----------------------------------------------------------------------------- */\n\n/* Constant Types */\n#define SWIG_PY_POINTER 4\n#define SWIG_PY_BINARY  5\n\n/* Constant information structure */\ntypedef struct swig_const_info {\n  int type;\n  const char *name;\n  long lvalue;\n  double dvalue;\n  void   *pvalue;\n  swig_type_info **ptype;\n} swig_const_info;\n\n#ifdef __cplusplus\n}\n#endif\n\n\n/* -----------------------------------------------------------------------------\n * pyrun.swg\n *\n * This file contains the runtime support for Python modules\n * and includes code for managing global variables and pointer\n * type checking.\n *\n * ----------------------------------------------------------------------------- */\n\n#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */\n# error \"This version of SWIG only supports Python >= 2.7\"\n#endif\n\n#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000\n# error \"This version of SWIG only supports Python 3 >= 3.3\"\n#endif\n\n/* Common SWIG API */\n\n/* for raw pointers */\n#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)\n#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)\n#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)\n\n#ifdef SWIGPYTHON_BUILTIN\n#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)\n#else\n#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)\n#endif\n\n#define SWIG_InternalNewPointerObj(ptr, type, flags)\tSWIG_Python_NewPointerObj(NULL, ptr, type, flags)\n\n#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) \n#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)\n#define swig_owntype                                    int\n\n/* for raw packed data */\n#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)\n#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)\n\n/* for class or struct pointers */\n#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)\n#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)\n\n/* for C or C++ function pointers */\n#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)\n#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)\n\n/* for C++ member pointers, ie, member methods */\n#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)\n#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)\n\n\n/* Runtime API */\n\n#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)\n#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)\n#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)\n\n#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            \n#define SWIG_SetErrorMsg                        \tSWIG_Python_SetErrorMsg\t\t\t\t   \n#define SWIG_ErrorType(code)                    \tSWIG_Python_ErrorType(code)                        \n#define SWIG_Error(code, msg)            \t\tSWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) \n#define SWIG_fail                        \t\tgoto fail\t\t\t\t\t   \n\n\n/* Runtime API implementation */\n\n/* Error manipulation */\n\nSWIGINTERN void \nSWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {\n  SWIG_PYTHON_THREAD_BEGIN_BLOCK; \n  PyErr_SetObject(errtype, obj);\n  Py_DECREF(obj);\n  SWIG_PYTHON_THREAD_END_BLOCK;\n}\n\nSWIGINTERN void \nSWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {\n  SWIG_PYTHON_THREAD_BEGIN_BLOCK;\n  PyErr_SetString(errtype, msg);\n  SWIG_PYTHON_THREAD_END_BLOCK;\n}\n\n#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)\n\n/* Set a constant value */\n\n#if defined(SWIGPYTHON_BUILTIN)\n\nSWIGINTERN void\nSwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {\n  PyObject *s = PyString_InternFromString(key);\n  PyList_Append(seq, s);\n  Py_DECREF(s);\n}\n\nSWIGINTERN void\nSWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   \n  PyDict_SetItemString(d, name, obj);\n  Py_DECREF(obj);\n  if (public_interface)\n    SwigPyBuiltin_AddPublicSymbol(public_interface, name);\n}\n\n#else\n\nSWIGINTERN void\nSWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   \n  PyDict_SetItemString(d, name, obj);\n  Py_DECREF(obj);                            \n}\n\n#endif\n\n/* Append a value to the result obj */\n\nSWIGINTERN PyObject*\nSWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {\n  if (!result) {\n    result = obj;\n  } else if (result == Py_None) {\n    Py_DECREF(result);\n    result = obj;\n  } else {\n    if (!PyList_Check(result)) {\n      PyObject *o2 = result;\n      result = PyList_New(1);\n      if (result) {\n        PyList_SET_ITEM(result, 0, o2);\n      } else {\n        Py_DECREF(obj);\n        return o2;\n      }\n    }\n    PyList_Append(result,obj);\n    Py_DECREF(obj);\n  }\n  return result;\n}\n\n/* Unpack the argument tuple */\n\nSWIGINTERN Py_ssize_t\nSWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)\n{\n  if (!args) {\n    if (!min && !max) {\n      return 1;\n    } else {\n      PyErr_Format(PyExc_TypeError, \"%s expected %s%d arguments, got none\", \n\t\t   name, (min == max ? \"\" : \"at least \"), (int)min);\n      return 0;\n    }\n  }  \n  if (!PyTuple_Check(args)) {\n    if (min <= 1 && max >= 1) {\n      Py_ssize_t i;\n      objs[0] = args;\n      for (i = 1; i < max; ++i) {\n\tobjs[i] = 0;\n      }\n      return 2;\n    }\n    PyErr_SetString(PyExc_SystemError, \"UnpackTuple() argument list is not a tuple\");\n    return 0;\n  } else {\n    Py_ssize_t l = PyTuple_GET_SIZE(args);\n    if (l < min) {\n      PyErr_Format(PyExc_TypeError, \"%s expected %s%d arguments, got %d\", \n\t\t   name, (min == max ? \"\" : \"at least \"), (int)min, (int)l);\n      return 0;\n    } else if (l > max) {\n      PyErr_Format(PyExc_TypeError, \"%s expected %s%d arguments, got %d\", \n\t\t   name, (min == max ? \"\" : \"at most \"), (int)max, (int)l);\n      return 0;\n    } else {\n      Py_ssize_t i;\n      for (i = 0; i < l; ++i) {\n\tobjs[i] = PyTuple_GET_ITEM(args, i);\n      }\n      for (; l < max; ++l) {\n\tobjs[l] = 0;\n      }\n      return i + 1;\n    }    \n  }\n}\n\nSWIGINTERN int\nSWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {\n  int no_kwargs = 1;\n  if (kwargs) {\n    assert(PyDict_Check(kwargs));\n    if (PyDict_Size(kwargs) > 0) {\n      PyErr_Format(PyExc_TypeError, \"%s() does not take keyword arguments\", name);\n      no_kwargs = 0;\n    }\n  }\n  return no_kwargs;\n}\n\n/* A functor is a function object with one single object argument */\n#define SWIG_Python_CallFunctor(functor, obj)\t        PyObject_CallFunctionObjArgs(functor, obj, NULL);\n\n/*\n  Helper for static pointer initialization for both C and C++ code, for example\n  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);\n*/\n#ifdef __cplusplus\n#define SWIG_STATIC_POINTER(var)  var\n#else\n#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* Python-specific SWIG API */\n#define SWIG_newvarlink()                             SWIG_Python_newvarlink()\n#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)\n#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)\n \n/* -----------------------------------------------------------------------------\n * global variable support code.\n * ----------------------------------------------------------------------------- */\n \ntypedef struct swig_globalvar {   \n  char       *name;                  /* Name of global variable */\n  PyObject *(*get_attr)(void);       /* Return the current value */\n  int       (*set_attr)(PyObject *); /* Set the value */\n  struct swig_globalvar *next;\n} swig_globalvar;\n\ntypedef struct swig_varlinkobject {\n  PyObject_HEAD\n  swig_globalvar *vars;\n} swig_varlinkobject;\n\nSWIGINTERN PyObject *\nswig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {\n#if PY_VERSION_HEX >= 0x03000000\n  return PyUnicode_InternFromString(\"<Swig global variables>\");\n#else\n  return PyString_FromString(\"<Swig global variables>\");\n#endif\n}\n\nSWIGINTERN PyObject *\nswig_varlink_str(PyObject *o) {\n  swig_varlinkobject *v = (swig_varlinkobject *) o;\n#if PY_VERSION_HEX >= 0x03000000\n  PyObject *str = PyUnicode_InternFromString(\"(\");\n  PyObject *tail;\n  PyObject *joined;\n  swig_globalvar *var;\n  for (var = v->vars; var; var=var->next) {\n    tail = PyUnicode_FromString(var->name);\n    joined = PyUnicode_Concat(str, tail);\n    Py_DecRef(str);\n    Py_DecRef(tail);\n    str = joined;\n    if (var->next) {\n        tail = PyUnicode_InternFromString(\", \");\n        joined = PyUnicode_Concat(str, tail);\n        Py_DecRef(str);\n        Py_DecRef(tail);\n        str = joined;\n    }\n  }\n  tail = PyUnicode_InternFromString(\")\");\n  joined = PyUnicode_Concat(str, tail);\n  Py_DecRef(str);\n  Py_DecRef(tail);\n  str = joined;\n#else\n  PyObject *str = PyString_FromString(\"(\");\n  swig_globalvar *var;\n  for (var = v->vars; var; var=var->next) {\n    PyString_ConcatAndDel(&str,PyString_FromString(var->name));\n    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(\", \"));\n  }\n  PyString_ConcatAndDel(&str,PyString_FromString(\")\"));\n#endif\n  return str;\n}\n\nSWIGINTERN void\nswig_varlink_dealloc(PyObject *o) {\n  swig_varlinkobject *v = (swig_varlinkobject *) o;\n  swig_globalvar *var = v->vars;\n  while (var) {\n    swig_globalvar *n = var->next;\n    free(var->name);\n    free(var);\n    var = n;\n  }\n}\n\nSWIGINTERN PyObject *\nswig_varlink_getattr(PyObject *o, char *n) {\n  swig_varlinkobject *v = (swig_varlinkobject *) o;\n  PyObject *res = NULL;\n  swig_globalvar *var = v->vars;\n  while (var) {\n    if (strcmp(var->name,n) == 0) {\n      res = (*var->get_attr)();\n      break;\n    }\n    var = var->next;\n  }\n  if (res == NULL && !PyErr_Occurred()) {\n    PyErr_Format(PyExc_AttributeError, \"Unknown C global variable '%s'\", n);\n  }\n  return res;\n}\n\nSWIGINTERN int\nswig_varlink_setattr(PyObject *o, char *n, PyObject *p) {\n  swig_varlinkobject *v = (swig_varlinkobject *) o;\n  int res = 1;\n  swig_globalvar *var = v->vars;\n  while (var) {\n    if (strcmp(var->name,n) == 0) {\n      res = (*var->set_attr)(p);\n      break;\n    }\n    var = var->next;\n  }\n  if (res == 1 && !PyErr_Occurred()) {\n    PyErr_Format(PyExc_AttributeError, \"Unknown C global variable '%s'\", n);\n  }\n  return res;\n}\n\nSWIGINTERN PyTypeObject*\nswig_varlink_type(void) {\n  static char varlink__doc__[] = \"Swig var link object\";\n  static PyTypeObject varlink_type;\n  static int type_init = 0;\n  if (!type_init) {\n    const PyTypeObject tmp = {\n#if PY_VERSION_HEX >= 0x03000000\n      PyVarObject_HEAD_INIT(NULL, 0)\n#else\n      PyObject_HEAD_INIT(NULL)\n      0,                                  /* ob_size */\n#endif\n      \"swigvarlink\",                      /* tp_name */\n      sizeof(swig_varlinkobject),         /* tp_basicsize */\n      0,                                  /* tp_itemsize */\n      (destructor) swig_varlink_dealloc,  /* tp_dealloc */\n#if PY_VERSION_HEX < 0x030800b4\n      (printfunc)0,                       /*tp_print*/\n#else\n      (Py_ssize_t)0,                      /*tp_vectorcall_offset*/\n#endif\n      (getattrfunc) swig_varlink_getattr, /* tp_getattr */\n      (setattrfunc) swig_varlink_setattr, /* tp_setattr */\n      0,                                  /* tp_compare */\n      (reprfunc) swig_varlink_repr,       /* tp_repr */\n      0,                                  /* tp_as_number */\n      0,                                  /* tp_as_sequence */\n      0,                                  /* tp_as_mapping */\n      0,                                  /* tp_hash */\n      0,                                  /* tp_call */\n      (reprfunc) swig_varlink_str,        /* tp_str */\n      0,                                  /* tp_getattro */\n      0,                                  /* tp_setattro */\n      0,                                  /* tp_as_buffer */\n      0,                                  /* tp_flags */\n      varlink__doc__,                     /* tp_doc */\n      0,                                  /* tp_traverse */\n      0,                                  /* tp_clear */\n      0,                                  /* tp_richcompare */\n      0,                                  /* tp_weaklistoffset */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */\n      0,                                  /* tp_del */\n      0,                                  /* tp_version_tag */\n#if PY_VERSION_HEX >= 0x03040000\n      0,                                  /* tp_finalize */\n#endif\n#if PY_VERSION_HEX >= 0x03080000\n      0,                                  /* tp_vectorcall */\n#endif\n#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)\n      0,                                  /* tp_print */\n#endif\n#ifdef COUNT_ALLOCS\n      0,                                  /* tp_allocs */\n      0,                                  /* tp_frees */\n      0,                                  /* tp_maxalloc */\n      0,                                  /* tp_prev */\n      0                                   /* tp_next */\n#endif\n    };\n    varlink_type = tmp;\n    type_init = 1;\n    if (PyType_Ready(&varlink_type) < 0)\n      return NULL;\n  }\n  return &varlink_type;\n}\n\n/* Create a variable linking object for use later */\nSWIGINTERN PyObject *\nSWIG_Python_newvarlink(void) {\n  swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());\n  if (result) {\n    result->vars = 0;\n  }\n  return ((PyObject*) result);\n}\n\nSWIGINTERN void \nSWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {\n  swig_varlinkobject *v = (swig_varlinkobject *) p;\n  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));\n  if (gv) {\n    size_t size = strlen(name)+1;\n    gv->name = (char *)malloc(size);\n    if (gv->name) {\n      memcpy(gv->name, name, size);\n      gv->get_attr = get_attr;\n      gv->set_attr = set_attr;\n      gv->next = v->vars;\n    }\n  }\n  v->vars = gv;\n}\n\n\nstatic PyObject *Swig_Globals_global = NULL;\n  \nSWIGINTERN PyObject *\nSWIG_globals(void) {\n  if (Swig_Globals_global == NULL) {\n    Swig_Globals_global = SWIG_newvarlink();\n  }\n  return Swig_Globals_global;\n}\n\n#ifdef __cplusplus\n}\n#endif\n\n/* -----------------------------------------------------------------------------\n * Pointer declarations\n * ----------------------------------------------------------------------------- */\n\n/* Flags for new pointer objects */\n#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)\n#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)\n\n#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)\n\n#define SWIG_BUILTIN_TP_INIT\t    (SWIG_POINTER_OWN << 2)\n#define SWIG_BUILTIN_INIT\t    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* The python void return value */\n\nSWIGRUNTIMEINLINE PyObject * \nSWIG_Py_Void(void)\n{\n  PyObject *none = Py_None;\n  Py_INCREF(none);\n  return none;\n}\n\n/* SwigPyClientData */\n\ntypedef struct {\n  PyObject *klass;\n  PyObject *newraw;\n  PyObject *newargs;\n  PyObject *destroy;\n  int delargs;\n  int implicitconv;\n  PyTypeObject *pytype;\n} SwigPyClientData;\n\nSWIGRUNTIMEINLINE int \nSWIG_Python_CheckImplicit(swig_type_info *ty)\n{\n  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;\n  int fail = data ? data->implicitconv : 0;\n  if (fail)\n    PyErr_SetString(PyExc_TypeError, \"Implicit conversion is prohibited for explicit constructors.\");\n  return fail;\n}\n\nSWIGRUNTIMEINLINE PyObject *\nSWIG_Python_ExceptionType(swig_type_info *desc) {\n  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;\n  PyObject *klass = data ? data->klass : 0;\n  return (klass ? klass : PyExc_RuntimeError);\n}\n\n\nSWIGRUNTIME SwigPyClientData * \nSwigPyClientData_New(PyObject* obj)\n{\n  if (!obj) {\n    return 0;\n  } else {\n    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));\n    /* the klass element */\n    data->klass = obj;\n    Py_INCREF(data->klass);\n    /* the newraw method and newargs arguments used to create a new raw instance */\n    if (PyClass_Check(obj)) {\n      data->newraw = 0;\n      Py_INCREF(obj);\n      data->newargs = obj;\n    } else {\n      data->newraw = PyObject_GetAttrString(data->klass, \"__new__\");\n      if (data->newraw) {\n        data->newargs = PyTuple_New(1);\n        if (data->newargs) {\n          Py_INCREF(obj);\n          PyTuple_SET_ITEM(data->newargs, 0, obj);\n        } else {\n          Py_DECREF(data->newraw);\n          Py_DECREF(data->klass);\n          free(data);\n          return 0;\n        }\n      } else {\n        Py_INCREF(obj);\n        data->newargs = obj;\n      }\n    }\n    /* the destroy method, aka as the C++ delete method */\n    data->destroy = PyObject_GetAttrString(data->klass, \"__swig_destroy__\");\n    if (PyErr_Occurred()) {\n      PyErr_Clear();\n      data->destroy = 0;\n    }\n    if (data->destroy) {\n      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);\n    } else {\n      data->delargs = 0;\n    }\n    data->implicitconv = 0;\n    data->pytype = 0;\n    return data;\n  }\n}\n\nSWIGRUNTIME void \nSwigPyClientData_Del(SwigPyClientData *data)\n{\n  Py_XDECREF(data->klass);\n  Py_XDECREF(data->newraw);\n  Py_XDECREF(data->newargs);\n  Py_XDECREF(data->destroy);\n  free(data);\n}\n\n/* =============== SwigPyObject =====================*/\n\ntypedef struct {\n  PyObject_HEAD\n  void *ptr;\n  swig_type_info *ty;\n  int own;\n  PyObject *next;\n#ifdef SWIGPYTHON_BUILTIN\n  PyObject *dict;\n#endif\n} SwigPyObject;\n\n\n#ifdef SWIGPYTHON_BUILTIN\n\nSWIGRUNTIME PyObject *\nSwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))\n{\n  SwigPyObject *sobj = (SwigPyObject *)v;\n\n  if (!sobj->dict)\n    sobj->dict = PyDict_New();\n\n  Py_XINCREF(sobj->dict);\n  return sobj->dict;\n}\n\n#endif\n\nSWIGRUNTIME PyObject *\nSwigPyObject_long(SwigPyObject *v)\n{\n  return PyLong_FromVoidPtr(v->ptr);\n}\n\nSWIGRUNTIME PyObject *\nSwigPyObject_format(const char* fmt, SwigPyObject *v)\n{\n  PyObject *res = NULL;\n  PyObject *args = PyTuple_New(1);\n  if (args) {\n    PyObject *val = SwigPyObject_long(v);\n    if (val) {\n      PyObject *ofmt;\n      PyTuple_SET_ITEM(args, 0, val);\n      ofmt = SWIG_Python_str_FromChar(fmt);\n      if (ofmt) {\n#if PY_VERSION_HEX >= 0x03000000\n        res = PyUnicode_Format(ofmt,args);\n#else\n        res = PyString_Format(ofmt,args);\n#endif\n        Py_DECREF(ofmt);\n      }\n    }\n    Py_DECREF(args);\n  }\n  return res;\n}\n\nSWIGRUNTIME PyObject *\nSwigPyObject_oct(SwigPyObject *v)\n{\n  return SwigPyObject_format(\"%o\",v);\n}\n\nSWIGRUNTIME PyObject *\nSwigPyObject_hex(SwigPyObject *v)\n{\n  return SwigPyObject_format(\"%x\",v);\n}\n\nSWIGRUNTIME PyObject *\nSwigPyObject_repr(SwigPyObject *v)\n{\n  const char *name = SWIG_TypePrettyName(v->ty);\n  PyObject *repr = SWIG_Python_str_FromFormat(\"<Swig Object of type '%s' at %p>\", (name ? name : \"unknown\"), (void *)v);\n  if (repr && v->next) {\n    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);\n    if (nrep) {\n# if PY_VERSION_HEX >= 0x03000000\n      PyObject *joined = PyUnicode_Concat(repr, nrep);\n      Py_DecRef(repr);\n      Py_DecRef(nrep);\n      repr = joined;\n# else\n      PyString_ConcatAndDel(&repr,nrep);\n# endif\n    } else {\n      Py_DecRef(repr);\n      repr = NULL;\n    }\n  }\n  return repr;\n}\n\n/* We need a version taking two PyObject* parameters so it's a valid\n * PyCFunction to use in swigobject_methods[]. */\nSWIGRUNTIME PyObject *\nSwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))\n{\n  return SwigPyObject_repr((SwigPyObject*)v);\n}\n\nSWIGRUNTIME int\nSwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)\n{\n  void *i = v->ptr;\n  void *j = w->ptr;\n  return (i < j) ? -1 : ((i > j) ? 1 : 0);\n}\n\n/* Added for Python 3.x, would it also be useful for Python 2.x? */\nSWIGRUNTIME PyObject*\nSwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)\n{\n  PyObject* res;\n  if( op != Py_EQ && op != Py_NE ) {\n    Py_INCREF(Py_NotImplemented);\n    return Py_NotImplemented;\n  }\n  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);\n  return res;  \n}\n\n\nSWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);\n\n#ifdef SWIGPYTHON_BUILTIN\nstatic swig_type_info *SwigPyObject_stype = 0;\nSWIGRUNTIME PyTypeObject*\nSwigPyObject_type(void) {\n    SwigPyClientData *cd;\n    assert(SwigPyObject_stype);\n    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;\n    assert(cd);\n    assert(cd->pytype);\n    return cd->pytype;\n}\n#else\nSWIGRUNTIME PyTypeObject*\nSwigPyObject_type(void) {\n  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();\n  return type;\n}\n#endif\n\nSWIGRUNTIMEINLINE int\nSwigPyObject_Check(PyObject *op) {\n#ifdef SWIGPYTHON_BUILTIN\n  PyTypeObject *target_tp = SwigPyObject_type();\n  if (PyType_IsSubtype(op->ob_type, target_tp))\n    return 1;\n  return (strcmp(op->ob_type->tp_name, \"SwigPyObject\") == 0);\n#else\n  return (Py_TYPE(op) == SwigPyObject_type())\n    || (strcmp(Py_TYPE(op)->tp_name,\"SwigPyObject\") == 0);\n#endif\n}\n\nSWIGRUNTIME PyObject *\nSwigPyObject_New(void *ptr, swig_type_info *ty, int own);\n\nstatic PyObject* Swig_Capsule_global = NULL;\n\nSWIGRUNTIME void\nSwigPyObject_dealloc(PyObject *v)\n{\n  SwigPyObject *sobj = (SwigPyObject *) v;\n  PyObject *next = sobj->next;\n  if (sobj->own == SWIG_POINTER_OWN) {\n    swig_type_info *ty = sobj->ty;\n    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;\n    PyObject *destroy = data ? data->destroy : 0;\n    if (destroy) {\n      /* destroy is always a VARARGS method */\n      PyObject *res;\n\n      /* PyObject_CallFunction() has the potential to silently drop\n         the active exception.  In cases of unnamed temporary\n         variable or where we just finished iterating over a generator\n         StopIteration will be active right now, and this needs to\n         remain true upon return from SwigPyObject_dealloc.  So save\n         and restore. */\n      \n      PyObject *type = NULL, *value = NULL, *traceback = NULL;\n      PyErr_Fetch(&type, &value, &traceback);\n\n      if (data->delargs) {\n        /* we need to create a temporary object to carry the destroy operation */\n        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);\n        if (tmp) {\n          res = SWIG_Python_CallFunctor(destroy, tmp);\n        } else {\n          res = 0;\n        }\n        Py_XDECREF(tmp);\n      } else {\n        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);\n        PyObject *mself = PyCFunction_GET_SELF(destroy);\n        res = ((*meth)(mself, v));\n      }\n      if (!res)\n        PyErr_WriteUnraisable(destroy);\n\n      PyErr_Restore(type, value, traceback);\n\n      Py_XDECREF(res);\n    } \n#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)\n    else {\n      const char *name = SWIG_TypePrettyName(ty);\n      printf(\"swig/python detected a memory leak of type '%s', no destructor found.\\n\", (name ? name : \"unknown\"));\n    }\n#endif\n    Py_XDECREF(Swig_Capsule_global);\n  }\n  Py_XDECREF(next);\n#ifdef SWIGPYTHON_BUILTIN\n  Py_XDECREF(sobj->dict);\n#endif\n  PyObject_DEL(v);\n}\n\nSWIGRUNTIME PyObject* \nSwigPyObject_append(PyObject* v, PyObject* next)\n{\n  SwigPyObject *sobj = (SwigPyObject *) v;\n  if (!SwigPyObject_Check(next)) {\n    PyErr_SetString(PyExc_TypeError, \"Attempt to append a non SwigPyObject\");\n    return NULL;\n  }\n  ((SwigPyObject *)next)->next = sobj->next;\n  sobj->next = next;\n  Py_INCREF(next);\n  return SWIG_Py_Void();\n}\n\nSWIGRUNTIME PyObject* \nSwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))\n{\n  SwigPyObject *sobj = (SwigPyObject *) v;\n  if (sobj->next) {    \n    Py_INCREF(sobj->next);\n    return sobj->next;\n  } else {\n    return SWIG_Py_Void();\n  }\n}\n\nSWIGINTERN PyObject*\nSwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))\n{\n  SwigPyObject *sobj = (SwigPyObject *)v;\n  sobj->own = 0;\n  return SWIG_Py_Void();\n}\n\nSWIGINTERN PyObject*\nSwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))\n{\n  SwigPyObject *sobj = (SwigPyObject *)v;\n  sobj->own = SWIG_POINTER_OWN;\n  return SWIG_Py_Void();\n}\n\nSWIGINTERN PyObject*\nSwigPyObject_own(PyObject *v, PyObject *args)\n{\n  PyObject *val = 0;\n  if (!PyArg_UnpackTuple(args, \"own\", 0, 1, &val)) {\n    return NULL;\n  } else {\n    SwigPyObject *sobj = (SwigPyObject *)v;\n    PyObject *obj = PyBool_FromLong(sobj->own);\n    if (val) {\n      if (PyObject_IsTrue(val)) {\n        Py_DECREF(SwigPyObject_acquire(v,args));\n      } else {\n        Py_DECREF(SwigPyObject_disown(v,args));\n      }\n    } \n    return obj;\n  }\n}\n\nstatic PyMethodDef\nswigobject_methods[] = {\n  {\"disown\",  SwigPyObject_disown,  METH_NOARGS,  \"releases ownership of the pointer\"},\n  {\"acquire\", SwigPyObject_acquire, METH_NOARGS,  \"acquires ownership of the pointer\"},\n  {\"own\",     SwigPyObject_own,     METH_VARARGS, \"returns/sets ownership of the pointer\"},\n  {\"append\",  SwigPyObject_append,  METH_O,       \"appends another 'this' object\"},\n  {\"next\",    SwigPyObject_next,    METH_NOARGS,  \"returns the next 'this' object\"},\n  {\"__repr__\",SwigPyObject_repr2,   METH_NOARGS,  \"returns object representation\"},\n  {0, 0, 0, 0}  \n};\n\nSWIGRUNTIME PyTypeObject*\nSwigPyObject_TypeOnce(void) {\n  static char swigobject_doc[] = \"Swig object carries a C/C++ instance pointer\";\n\n  static PyNumberMethods SwigPyObject_as_number = {\n    (binaryfunc)0, /*nb_add*/\n    (binaryfunc)0, /*nb_subtract*/\n    (binaryfunc)0, /*nb_multiply*/\n    /* nb_divide removed in Python 3 */\n#if PY_VERSION_HEX < 0x03000000\n    (binaryfunc)0, /*nb_divide*/\n#endif\n    (binaryfunc)0, /*nb_remainder*/\n    (binaryfunc)0, /*nb_divmod*/\n    (ternaryfunc)0,/*nb_power*/\n    (unaryfunc)0,  /*nb_negative*/\n    (unaryfunc)0,  /*nb_positive*/\n    (unaryfunc)0,  /*nb_absolute*/\n    (inquiry)0,    /*nb_nonzero*/\n    0,\t\t   /*nb_invert*/\n    0,\t\t   /*nb_lshift*/\n    0,\t\t   /*nb_rshift*/\n    0,\t\t   /*nb_and*/\n    0,\t\t   /*nb_xor*/\n    0,\t\t   /*nb_or*/\n#if PY_VERSION_HEX < 0x03000000\n    0,   /*nb_coerce*/\n#endif\n    (unaryfunc)SwigPyObject_long, /*nb_int*/\n#if PY_VERSION_HEX < 0x03000000\n    (unaryfunc)SwigPyObject_long, /*nb_long*/\n#else\n    0, /*nb_reserved*/\n#endif\n    (unaryfunc)0,                 /*nb_float*/\n#if PY_VERSION_HEX < 0x03000000\n    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/\n    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/\n#endif\n#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */\n    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */\n#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */\n    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */\n#else\n    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */\n#endif\n  };\n\n  static PyTypeObject swigpyobject_type;\n  static int type_init = 0;\n  if (!type_init) {\n    const PyTypeObject tmp = {\n#if PY_VERSION_HEX >= 0x03000000\n      PyVarObject_HEAD_INIT(NULL, 0)\n#else\n      PyObject_HEAD_INIT(NULL)\n      0,                                    /* ob_size */\n#endif\n      \"SwigPyObject\",                       /* tp_name */\n      sizeof(SwigPyObject),                 /* tp_basicsize */\n      0,                                    /* tp_itemsize */\n      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */\n#if PY_VERSION_HEX < 0x030800b4\n      (printfunc)0,                         /*tp_print*/\n#else\n      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/\n#endif\n      (getattrfunc)0,                       /* tp_getattr */\n      (setattrfunc)0,                       /* tp_setattr */\n#if PY_VERSION_HEX >= 0x03000000\n      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */\n#else\n      (cmpfunc)SwigPyObject_compare,        /* tp_compare */\n#endif\n      (reprfunc)SwigPyObject_repr,          /* tp_repr */\n      &SwigPyObject_as_number,              /* tp_as_number */\n      0,                                    /* tp_as_sequence */\n      0,                                    /* tp_as_mapping */\n      (hashfunc)0,                          /* tp_hash */\n      (ternaryfunc)0,                       /* tp_call */\n      0,                                    /* tp_str */\n      PyObject_GenericGetAttr,              /* tp_getattro */\n      0,                                    /* tp_setattro */\n      0,                                    /* tp_as_buffer */\n      Py_TPFLAGS_DEFAULT,                   /* tp_flags */\n      swigobject_doc,                       /* tp_doc */\n      0,                                    /* tp_traverse */\n      0,                                    /* tp_clear */\n      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */\n      0,                                    /* tp_weaklistoffset */\n      0,                                    /* tp_iter */\n      0,                                    /* tp_iternext */\n      swigobject_methods,                   /* tp_methods */\n      0,                                    /* tp_members */\n      0,                                    /* tp_getset */\n      0,                                    /* tp_base */\n      0,                                    /* tp_dict */\n      0,                                    /* tp_descr_get */\n      0,                                    /* tp_descr_set */\n      0,                                    /* tp_dictoffset */\n      0,                                    /* tp_init */\n      0,                                    /* tp_alloc */\n      0,                                    /* tp_new */\n      0,                                    /* tp_free */\n      0,                                    /* tp_is_gc */\n      0,                                    /* tp_bases */\n      0,                                    /* tp_mro */\n      0,                                    /* tp_cache */\n      0,                                    /* tp_subclasses */\n      0,                                    /* tp_weaklist */\n      0,                                    /* tp_del */\n      0,                                    /* tp_version_tag */\n#if PY_VERSION_HEX >= 0x03040000\n      0,                                    /* tp_finalize */\n#endif\n#if PY_VERSION_HEX >= 0x03080000\n      0,                                    /* tp_vectorcall */\n#endif\n#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)\n      0,                                    /* tp_print */\n#endif\n#ifdef COUNT_ALLOCS\n      0,                                    /* tp_allocs */\n      0,                                    /* tp_frees */\n      0,                                    /* tp_maxalloc */\n      0,                                    /* tp_prev */\n      0                                     /* tp_next */\n#endif\n    };\n    swigpyobject_type = tmp;\n    type_init = 1;\n    if (PyType_Ready(&swigpyobject_type) != 0)\n      return NULL;\n  }\n  return &swigpyobject_type;\n}\n\nSWIGRUNTIME PyObject *\nSwigPyObject_New(void *ptr, swig_type_info *ty, int own)\n{\n  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());\n  if (sobj) {\n    sobj->ptr  = ptr;\n    sobj->ty   = ty;\n    sobj->own  = own;\n    sobj->next = 0;\n#ifdef SWIGPYTHON_BUILTIN\n    sobj->dict = 0;\n#endif\n    if (own == SWIG_POINTER_OWN) {\n      /* Obtain a reference to the Python capsule wrapping the module information, so that the\n       * module information is correctly destroyed after all SWIG python objects have been freed\n       * by the GC (and corresponding destructors invoked) */\n      Py_XINCREF(Swig_Capsule_global);\n    }\n  }\n  return (PyObject *)sobj;\n}\n\n/* -----------------------------------------------------------------------------\n * Implements a simple Swig Packed type, and use it instead of string\n * ----------------------------------------------------------------------------- */\n\ntypedef struct {\n  PyObject_HEAD\n  void *pack;\n  swig_type_info *ty;\n  size_t size;\n} SwigPyPacked;\n\nSWIGRUNTIME PyObject *\nSwigPyPacked_repr(SwigPyPacked *v)\n{\n  char result[SWIG_BUFFER_SIZE];\n  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {\n    return SWIG_Python_str_FromFormat(\"<Swig Packed at %s%s>\", result, v->ty->name);\n  } else {\n    return SWIG_Python_str_FromFormat(\"<Swig Packed %s>\", v->ty->name);\n  }  \n}\n\nSWIGRUNTIME PyObject *\nSwigPyPacked_str(SwigPyPacked *v)\n{\n  char result[SWIG_BUFFER_SIZE];\n  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){\n    return SWIG_Python_str_FromFormat(\"%s%s\", result, v->ty->name);\n  } else {\n    return SWIG_Python_str_FromChar(v->ty->name);\n  }  \n}\n\nSWIGRUNTIME int\nSwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)\n{\n  size_t i = v->size;\n  size_t j = w->size;\n  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);\n  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);\n}\n\nSWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);\n\nSWIGRUNTIME PyTypeObject*\nSwigPyPacked_type(void) {\n  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();\n  return type;\n}\n\nSWIGRUNTIMEINLINE int\nSwigPyPacked_Check(PyObject *op) {\n  return ((op)->ob_type == SwigPyPacked_TypeOnce()) \n    || (strcmp((op)->ob_type->tp_name,\"SwigPyPacked\") == 0);\n}\n\nSWIGRUNTIME void\nSwigPyPacked_dealloc(PyObject *v)\n{\n  if (SwigPyPacked_Check(v)) {\n    SwigPyPacked *sobj = (SwigPyPacked *) v;\n    free(sobj->pack);\n  }\n  PyObject_DEL(v);\n}\n\nSWIGRUNTIME PyTypeObject*\nSwigPyPacked_TypeOnce(void) {\n  static char swigpacked_doc[] = \"Swig object carries a C/C++ instance pointer\";\n  static PyTypeObject swigpypacked_type;\n  static int type_init = 0;\n  if (!type_init) {\n    const PyTypeObject tmp = {\n#if PY_VERSION_HEX>=0x03000000\n      PyVarObject_HEAD_INIT(NULL, 0)\n#else\n      PyObject_HEAD_INIT(NULL)\n      0,                                    /* ob_size */\n#endif\n      \"SwigPyPacked\",                       /* tp_name */\n      sizeof(SwigPyPacked),                 /* tp_basicsize */\n      0,                                    /* tp_itemsize */\n      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */\n#if PY_VERSION_HEX < 0x030800b4\n      (printfunc)0,                         /*tp_print*/\n#else\n      (Py_ssize_t)0,                        /*tp_vectorcall_offset*/\n#endif\n      (getattrfunc)0,                       /* tp_getattr */\n      (setattrfunc)0,                       /* tp_setattr */\n#if PY_VERSION_HEX>=0x03000000\n      0, /* tp_reserved in 3.0.1 */\n#else\n      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */\n#endif\n      (reprfunc)SwigPyPacked_repr,          /* tp_repr */\n      0,                                    /* tp_as_number */\n      0,                                    /* tp_as_sequence */\n      0,                                    /* tp_as_mapping */\n      (hashfunc)0,                          /* tp_hash */\n      (ternaryfunc)0,                       /* tp_call */\n      (reprfunc)SwigPyPacked_str,           /* tp_str */\n      PyObject_GenericGetAttr,              /* tp_getattro */\n      0,                                    /* tp_setattro */\n      0,                                    /* tp_as_buffer */\n      Py_TPFLAGS_DEFAULT,                   /* tp_flags */\n      swigpacked_doc,                       /* tp_doc */\n      0,                                    /* tp_traverse */\n      0,                                    /* tp_clear */\n      0,                                    /* tp_richcompare */\n      0,                                    /* tp_weaklistoffset */\n      0,                                    /* tp_iter */\n      0,                                    /* tp_iternext */\n      0,                                    /* tp_methods */\n      0,                                    /* tp_members */\n      0,                                    /* tp_getset */\n      0,                                    /* tp_base */\n      0,                                    /* tp_dict */\n      0,                                    /* tp_descr_get */\n      0,                                    /* tp_descr_set */\n      0,                                    /* tp_dictoffset */\n      0,                                    /* tp_init */\n      0,                                    /* tp_alloc */\n      0,                                    /* tp_new */\n      0,                                    /* tp_free */\n      0,                                    /* tp_is_gc */\n      0,                                    /* tp_bases */\n      0,                                    /* tp_mro */\n      0,                                    /* tp_cache */\n      0,                                    /* tp_subclasses */\n      0,                                    /* tp_weaklist */\n      0,                                    /* tp_del */\n      0,                                    /* tp_version_tag */\n#if PY_VERSION_HEX >= 0x03040000\n      0,                                    /* tp_finalize */\n#endif\n#if PY_VERSION_HEX >= 0x03080000\n      0,                                    /* tp_vectorcall */\n#endif\n#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)\n      0,                                    /* tp_print */\n#endif\n#ifdef COUNT_ALLOCS\n      0,                                    /* tp_allocs */\n      0,                                    /* tp_frees */\n      0,                                    /* tp_maxalloc */\n      0,                                    /* tp_prev */\n      0                                     /* tp_next */\n#endif\n    };\n    swigpypacked_type = tmp;\n    type_init = 1;\n    if (PyType_Ready(&swigpypacked_type) != 0)\n      return NULL;\n  }\n  return &swigpypacked_type;\n}\n\nSWIGRUNTIME PyObject *\nSwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)\n{\n  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());\n  if (sobj) {\n    void *pack = malloc(size);\n    if (pack) {\n      memcpy(pack, ptr, size);\n      sobj->pack = pack;\n      sobj->ty   = ty;\n      sobj->size = size;\n    } else {\n      PyObject_DEL((PyObject *) sobj);\n      sobj = 0;\n    }\n  }\n  return (PyObject *) sobj;\n}\n\nSWIGRUNTIME swig_type_info *\nSwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)\n{\n  if (SwigPyPacked_Check(obj)) {\n    SwigPyPacked *sobj = (SwigPyPacked *)obj;\n    if (sobj->size != size) return 0;\n    memcpy(ptr, sobj->pack, size);\n    return sobj->ty;\n  } else {\n    return 0;\n  }\n}\n\n/* -----------------------------------------------------------------------------\n * pointers/data manipulation\n * ----------------------------------------------------------------------------- */\n\nstatic PyObject *Swig_This_global = NULL;\n\nSWIGRUNTIME PyObject *\nSWIG_This(void)\n{\n  if (Swig_This_global == NULL)\n    Swig_This_global = SWIG_Python_str_FromChar(\"this\");\n  return Swig_This_global;\n}\n\n/* #define SWIG_PYTHON_SLOW_GETSET_THIS */\n\n/* TODO: I don't know how to implement the fast getset in Python 3 right now */\n#if PY_VERSION_HEX>=0x03000000\n#define SWIG_PYTHON_SLOW_GETSET_THIS \n#endif\n\nSWIGRUNTIME SwigPyObject *\nSWIG_Python_GetSwigThis(PyObject *pyobj) \n{\n  PyObject *obj;\n\n  if (SwigPyObject_Check(pyobj))\n    return (SwigPyObject *) pyobj;\n\n#ifdef SWIGPYTHON_BUILTIN\n  (void)obj;\n# ifdef PyWeakref_CheckProxy\n  if (PyWeakref_CheckProxy(pyobj)) {\n    pyobj = PyWeakref_GET_OBJECT(pyobj);\n    if (pyobj && SwigPyObject_Check(pyobj))\n      return (SwigPyObject*) pyobj;\n  }\n# endif\n  return NULL;\n#else\n\n  obj = 0;\n\n#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)\n  if (PyInstance_Check(pyobj)) {\n    obj = _PyInstance_Lookup(pyobj, SWIG_This());      \n  } else {\n    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);\n    if (dictptr != NULL) {\n      PyObject *dict = *dictptr;\n      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;\n    } else {\n#ifdef PyWeakref_CheckProxy\n      if (PyWeakref_CheckProxy(pyobj)) {\n\tPyObject *wobj = PyWeakref_GET_OBJECT(pyobj);\n\treturn wobj ? SWIG_Python_GetSwigThis(wobj) : 0;\n      }\n#endif\n      obj = PyObject_GetAttr(pyobj,SWIG_This());\n      if (obj) {\n\tPy_DECREF(obj);\n      } else {\n\tif (PyErr_Occurred()) PyErr_Clear();\n\treturn 0;\n      }\n    }\n  }\n#else\n  obj = PyObject_GetAttr(pyobj,SWIG_This());\n  if (obj) {\n    Py_DECREF(obj);\n  } else {\n    if (PyErr_Occurred()) PyErr_Clear();\n    return 0;\n  }\n#endif\n  if (obj && !SwigPyObject_Check(obj)) {\n    /* a PyObject is called 'this', try to get the 'real this'\n       SwigPyObject from it */ \n    return SWIG_Python_GetSwigThis(obj);\n  }\n  return (SwigPyObject *)obj;\n#endif\n}\n\n/* Acquire a pointer value */\n\nSWIGRUNTIME int\nSWIG_Python_AcquirePtr(PyObject *obj, int own) {\n  if (own == SWIG_POINTER_OWN) {\n    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);\n    if (sobj) {\n      int oldown = sobj->own;\n      sobj->own = own;\n      return oldown;\n    }\n  }\n  return 0;\n}\n\n/* Convert a pointer value */\n\nSWIGRUNTIME int\nSWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {\n  int res;\n  SwigPyObject *sobj;\n  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;\n\n  if (!obj)\n    return SWIG_ERROR;\n  if (obj == Py_None && !implicit_conv) {\n    if (ptr)\n      *ptr = 0;\n    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;\n  }\n\n  res = SWIG_ERROR;\n\n  sobj = SWIG_Python_GetSwigThis(obj);\n  if (own)\n    *own = 0;\n  while (sobj) {\n    void *vptr = sobj->ptr;\n    if (ty) {\n      swig_type_info *to = sobj->ty;\n      if (to == ty) {\n        /* no type cast needed */\n        if (ptr) *ptr = vptr;\n        break;\n      } else {\n        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);\n        if (!tc) {\n          sobj = (SwigPyObject *)sobj->next;\n        } else {\n          if (ptr) {\n            int newmemory = 0;\n            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);\n            if (newmemory == SWIG_CAST_NEW_MEMORY) {\n              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */\n              if (own)\n                *own = *own | SWIG_CAST_NEW_MEMORY;\n            }\n          }\n          break;\n        }\n      }\n    } else {\n      if (ptr) *ptr = vptr;\n      break;\n    }\n  }\n  if (sobj) {\n    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {\n      res = SWIG_ERROR_RELEASE_NOT_OWNED;\n    } else {\n      if (own)\n        *own = *own | sobj->own;\n      if (flags & SWIG_POINTER_DISOWN) {\n        sobj->own = 0;\n      }\n      if (flags & SWIG_POINTER_CLEAR) {\n        sobj->ptr = 0;\n      }\n      res = SWIG_OK;\n    }\n  } else {\n    if (implicit_conv) {\n      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;\n      if (data && !data->implicitconv) {\n        PyObject *klass = data->klass;\n        if (klass) {\n          PyObject *impconv;\n          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/\n          impconv = SWIG_Python_CallFunctor(klass, obj);\n          data->implicitconv = 0;\n          if (PyErr_Occurred()) {\n            PyErr_Clear();\n            impconv = 0;\n          }\n          if (impconv) {\n            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);\n            if (iobj) {\n              void *vptr;\n              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);\n              if (SWIG_IsOK(res)) {\n                if (ptr) {\n                  *ptr = vptr;\n                  /* transfer the ownership to 'ptr' */\n                  iobj->own = 0;\n                  res = SWIG_AddCast(res);\n                  res = SWIG_AddNewMask(res);\n                } else {\n                  res = SWIG_AddCast(res);\t\t    \n                }\n              }\n            }\n            Py_DECREF(impconv);\n          }\n        }\n      }\n      if (!SWIG_IsOK(res) && obj == Py_None) {\n        if (ptr)\n          *ptr = 0;\n        if (PyErr_Occurred())\n          PyErr_Clear();\n        res = SWIG_OK;\n      }\n    }\n  }\n  return res;\n}\n\n/* Convert a function ptr value */\n\nSWIGRUNTIME int\nSWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {\n  if (!PyCFunction_Check(obj)) {\n    return SWIG_ConvertPtr(obj, ptr, ty, 0);\n  } else {\n    void *vptr = 0;\n    swig_cast_info *tc;\n\n    /* here we get the method pointer for callbacks */\n    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);\n    const char *desc = doc ? strstr(doc, \"swig_ptr: \") : 0;\n    if (desc)\n      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;\n    if (!desc)\n      return SWIG_ERROR;\n    tc = SWIG_TypeCheck(desc,ty);\n    if (tc) {\n      int newmemory = 0;\n      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);\n      assert(!newmemory); /* newmemory handling not yet implemented */\n    } else {\n      return SWIG_ERROR;\n    }\n    return SWIG_OK;\n  }\n}\n\n/* Convert a packed pointer value */\n\nSWIGRUNTIME int\nSWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {\n  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);\n  if (!to) return SWIG_ERROR;\n  if (ty) {\n    if (to != ty) {\n      /* check type cast? */\n      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);\n      if (!tc) return SWIG_ERROR;\n    }\n  }\n  return SWIG_OK;\n}  \n\n/* -----------------------------------------------------------------------------\n * Create a new pointer object\n * ----------------------------------------------------------------------------- */\n\n/*\n  Create a new instance object, without calling __init__, and set the\n  'this' attribute.\n*/\n\nSWIGRUNTIME PyObject* \nSWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)\n{\n  PyObject *inst = 0;\n  PyObject *newraw = data->newraw;\n  if (newraw) {\n    inst = PyObject_Call(newraw, data->newargs, NULL);\n    if (inst) {\n#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)\n      PyObject **dictptr = _PyObject_GetDictPtr(inst);\n      if (dictptr != NULL) {\n        PyObject *dict = *dictptr;\n        if (dict == NULL) {\n          dict = PyDict_New();\n          *dictptr = dict;\n        }\n        if (dict) {\n          PyDict_SetItem(dict, SWIG_This(), swig_this);\n        } else{\n          Py_DECREF(inst);\n          inst = 0;\n        }\n      }\n#else\n      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {\n        Py_DECREF(inst);\n        inst = 0;\n      }\n#endif\n    }\n  } else {\n#if PY_VERSION_HEX >= 0x03000000\n    PyObject *empty_args = PyTuple_New(0);\n    if (empty_args) {\n      PyObject *empty_kwargs = PyDict_New();\n      if (empty_kwargs) {\n        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);\n        Py_DECREF(empty_kwargs);\n        if (inst) {\n          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {\n            Py_DECREF(inst);\n            inst = 0;\n          } else {\n            PyType_Modified(Py_TYPE(inst));\n          }\n        }\n      }\n      Py_DECREF(empty_args);\n    }\n#else\n    PyObject *dict = PyDict_New();\n    if (dict) {\n      PyDict_SetItem(dict, SWIG_This(), swig_this);\n      inst = PyInstance_NewRaw(data->newargs, dict);\n      Py_DECREF(dict);\n    }\n#endif\n  }\n  return inst;\n}\n\nSWIGRUNTIME int\nSWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)\n{\n#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)\n  PyObject **dictptr = _PyObject_GetDictPtr(inst);\n  if (dictptr != NULL) {\n    PyObject *dict = *dictptr;\n    if (dict == NULL) {\n      dict = PyDict_New();\n      *dictptr = dict;\n    }\n    if (dict) {\n      return PyDict_SetItem(dict, SWIG_This(), swig_this);\n    } else{\n      return -1;\n    }\n  }\n#endif\n  return PyObject_SetAttr(inst, SWIG_This(), swig_this);\n} \n\n\nSWIGINTERN PyObject *\nSWIG_Python_InitShadowInstance(PyObject *args) {\n  PyObject *obj[2];\n  if (!SWIG_Python_UnpackTuple(args, \"swiginit\", 2, 2, obj)) {\n    return NULL;\n  } else {\n    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);\n    if (sthis) {\n      Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));\n    } else {\n      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)\n        return NULL;\n    }\n    return SWIG_Py_Void();\n  }\n}\n\n/* Create a new pointer object */\n\nSWIGRUNTIME PyObject *\nSWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {\n  SwigPyClientData *clientdata;\n  PyObject * robj;\n  int own;\n\n  if (!ptr)\n    return SWIG_Py_Void();\n\n  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;\n  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;\n  if (clientdata && clientdata->pytype) {\n    SwigPyObject *newobj;\n    if (flags & SWIG_BUILTIN_TP_INIT) {\n      newobj = (SwigPyObject*) self;\n      if (newobj->ptr) {\n        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);\n        while (newobj->next)\n\t  newobj = (SwigPyObject *) newobj->next;\n        newobj->next = next_self;\n        newobj = (SwigPyObject *)next_self;\n#ifdef SWIGPYTHON_BUILTIN\n        newobj->dict = 0;\n#endif\n      }\n    } else {\n      newobj = PyObject_New(SwigPyObject, clientdata->pytype);\n#ifdef SWIGPYTHON_BUILTIN\n      if (newobj) {\n        newobj->dict = 0;\n      }\n#endif\n    }\n    if (newobj) {\n      newobj->ptr = ptr;\n      newobj->ty = type;\n      newobj->own = own;\n      newobj->next = 0;\n      return (PyObject*) newobj;\n    }\n    return SWIG_Py_Void();\n  }\n\n  assert(!(flags & SWIG_BUILTIN_TP_INIT));\n\n  robj = SwigPyObject_New(ptr, type, own);\n  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {\n    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);\n    Py_DECREF(robj);\n    robj = inst;\n  }\n  return robj;\n}\n\n/* Create a new packed object */\n\nSWIGRUNTIMEINLINE PyObject *\nSWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {\n  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();\n}\n\n/* -----------------------------------------------------------------------------*\n *  Get type list \n * -----------------------------------------------------------------------------*/\n\n#ifdef SWIG_LINK_RUNTIME\nvoid *SWIG_ReturnGlobalTypeList(void *);\n#endif\n\nstatic PyObject *Swig_TypeCache_global = NULL;\n\n/* The python cached type query */\nSWIGRUNTIME PyObject *\nSWIG_Python_TypeCache(void) {\n  if (Swig_TypeCache_global == NULL) {\n    Swig_TypeCache_global = PyDict_New();\n  }\n  return Swig_TypeCache_global;\n}\n\nSWIGRUNTIME swig_module_info *\nSWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {\n#ifdef SWIG_LINK_RUNTIME\n  static void *type_pointer = (void *)0;\n  /* first check if module already created */\n  if (!type_pointer) {\n    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);\n  }\n#else\n  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);\n  if (PyErr_Occurred()) {\n    PyErr_Clear();\n    type_pointer = (void *)0;\n  }\n#endif\n  return (swig_module_info *) type_pointer;\n}\n\n\nstatic int interpreter_counter = 0; // how many (sub-)interpreters are using swig_module's types\n\nSWIGRUNTIME void\nSWIG_Python_DestroyModule(PyObject *obj)\n{\n  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);\n  swig_type_info **types = swig_module->types;\n  size_t i;\n  if (--interpreter_counter != 0) // another sub-interpreter may still be using the swig_module's types\n    return;\n  for (i =0; i < swig_module->size; ++i) {\n    swig_type_info *ty = types[i];\n    if (ty->owndata) {\n      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;\n      ty->clientdata = 0;\n      if (data) SwigPyClientData_Del(data);\n    }\n  }\n  Py_DECREF(SWIG_This());\n  Swig_This_global = NULL;\n  Py_DECREF(SWIG_globals());\n  Swig_Globals_global = NULL;\n  Py_DECREF(SWIG_Python_TypeCache());\n  Swig_TypeCache_global = NULL;\n  Swig_Capsule_global = NULL;\n}\n\nSWIGRUNTIME void\nSWIG_Python_SetModule(swig_module_info *swig_module) {\n#if PY_VERSION_HEX >= 0x03000000\n /* Add a dummy module object into sys.modules */\n  PyObject *module = PyImport_AddModule(\"swig_runtime_data\" SWIG_RUNTIME_VERSION);\n#else\n  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */\n  PyObject *module = Py_InitModule(\"swig_runtime_data\" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);\n#endif\n  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);\n  if (pointer && module) {\n    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {\n      ++interpreter_counter;\n      Swig_Capsule_global = pointer;\n    } else {\n      Py_DECREF(pointer);\n    }\n  } else {\n    Py_XDECREF(pointer);\n  }\n}\n\nSWIGRUNTIME swig_type_info *\nSWIG_Python_TypeQuery(const char *type)\n{\n  PyObject *cache = SWIG_Python_TypeCache();\n  PyObject *key = SWIG_Python_str_FromChar(type); \n  PyObject *obj = PyDict_GetItem(cache, key);\n  swig_type_info *descriptor;\n  if (obj) {\n    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);\n  } else {\n    swig_module_info *swig_module = SWIG_GetModule(0);\n    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);\n    if (descriptor) {\n      obj = PyCapsule_New((void*) descriptor, NULL, NULL);\n      if (obj) {\n        PyDict_SetItem(cache, key, obj);\n        Py_DECREF(obj);\n      }\n    }\n  }\n  Py_DECREF(key);\n  return descriptor;\n}\n\n/* \n   For backward compatibility only\n*/\n#define SWIG_POINTER_EXCEPTION  0\n#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)\n#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)\n\nSWIGRUNTIME int\nSWIG_Python_AddErrMesg(const char* mesg, int infront)\n{  \n  if (PyErr_Occurred()) {\n    PyObject *type = 0;\n    PyObject *value = 0;\n    PyObject *traceback = 0;\n    PyErr_Fetch(&type, &value, &traceback);\n    if (value) {\n      PyObject *old_str = PyObject_Str(value);\n      const char *tmp = SWIG_Python_str_AsChar(old_str);\n      const char *errmesg = tmp ? tmp : \"Invalid error message\";\n      Py_XINCREF(type);\n      PyErr_Clear();\n      if (infront) {\n\tPyErr_Format(type, \"%s %s\", mesg, errmesg);\n      } else {\n\tPyErr_Format(type, \"%s %s\", errmesg, mesg);\n      }\n      Py_DECREF(old_str);\n    }\n    return 1;\n  } else {\n    return 0;\n  }\n}\n  \nSWIGRUNTIME int\nSWIG_Python_ArgFail(int argnum)\n{\n  if (PyErr_Occurred()) {\n    /* add information about failing argument */\n    char mesg[256];\n    PyOS_snprintf(mesg, sizeof(mesg), \"argument number %d:\", argnum);\n    return SWIG_Python_AddErrMesg(mesg, 1);\n  } else {\n    return 0;\n  }\n}\n\nSWIGRUNTIMEINLINE const char *\nSwigPyObject_GetDesc(PyObject *self)\n{\n  SwigPyObject *v = (SwigPyObject *)self;\n  swig_type_info *ty = v ? v->ty : 0;\n  return ty ? ty->str : \"\";\n}\n\nSWIGRUNTIME void\nSWIG_Python_TypeError(const char *type, PyObject *obj)\n{\n  if (type) {\n#if defined(SWIG_COBJECT_TYPES)\n    if (obj && SwigPyObject_Check(obj)) {\n      const char *otype = (const char *) SwigPyObject_GetDesc(obj);\n      if (otype) {\n\tPyErr_Format(PyExc_TypeError, \"a '%s' is expected, 'SwigPyObject(%s)' is received\",\n\t\t     type, otype);\n\treturn;\n      }\n    } else \n#endif      \n    {\n      const char *otype = (obj ? obj->ob_type->tp_name : 0); \n      if (otype) {\n\tPyObject *str = PyObject_Str(obj);\n\tconst char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;\n\tif (cstr) {\n\t  PyErr_Format(PyExc_TypeError, \"a '%s' is expected, '%s(%s)' is received\",\n\t\t       type, otype, cstr);\n\t} else {\n\t  PyErr_Format(PyExc_TypeError, \"a '%s' is expected, '%s' is received\",\n\t\t       type, otype);\n\t}\n\tPy_XDECREF(str);\n\treturn;\n      }\n    }   \n    PyErr_Format(PyExc_TypeError, \"a '%s' is expected\", type);\n  } else {\n    PyErr_Format(PyExc_TypeError, \"unexpected type is received\");\n  }\n}\n\n\n/* Convert a pointer value, signal an exception on a type mismatch */\nSWIGRUNTIME void *\nSWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {\n  void *result;\n  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {\n    PyErr_Clear();\n  }\n  return result;\n}\n\n#ifdef SWIGPYTHON_BUILTIN\nSWIGRUNTIME int\nSWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {\n  PyTypeObject *tp = obj->ob_type;\n  PyObject *descr;\n  PyObject *encoded_name;\n  descrsetfunc f;\n  int res = -1;\n\n# ifdef Py_USING_UNICODE\n  if (PyString_Check(name)) {\n    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);\n    if (!name)\n      return -1;\n  } else if (!PyUnicode_Check(name))\n# else\n  if (!PyString_Check(name))\n# endif\n  {\n    PyErr_Format(PyExc_TypeError, \"attribute name must be string, not '%.200s'\", name->ob_type->tp_name);\n    return -1;\n  } else {\n    Py_INCREF(name);\n  }\n\n  if (!tp->tp_dict) {\n    if (PyType_Ready(tp) != 0)\n      goto done;\n  }\n\n  descr = _PyType_Lookup(tp, name);\n  f = NULL;\n  if (descr != NULL)\n    f = descr->ob_type->tp_descr_set;\n  if (!f) {\n    if (PyString_Check(name)) {\n      encoded_name = name;\n      Py_INCREF(name);\n    } else {\n      encoded_name = PyUnicode_AsUTF8String(name);\n      if (!encoded_name)\n        goto done;\n    }\n    PyErr_Format(PyExc_AttributeError, \"'%.100s' object has no attribute '%.200s'\", tp->tp_name, PyString_AsString(encoded_name));\n    Py_DECREF(encoded_name);\n  } else {\n    res = f(descr, obj, value);\n  }\n  \n  done:\n  Py_DECREF(name);\n  return res;\n}\n#endif\n\n\n#ifdef __cplusplus\n}\n#endif\n\n\n\n#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) \n\n#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) \n\n\n\n  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) \n\n\n/* -------- TYPES TABLE (BEGIN) -------- */\n\n#define SWIGTYPE_p_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t swig_types[0]\n#define SWIGTYPE_p_DataType swig_types[1]\n#define SWIGTYPE_p_FILTERS__NonOptPeriodBasedFilterT_double_FILTERS__FilteringType__AverageBased_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_FILTERS__InstFreqKind__Average_t swig_types[2]\n#define SWIGTYPE_p_FILTERS__SincResLocalFilterT_double_t swig_types[3]\n#define SWIGTYPE_p_GenericSignalT_SimpleVecWrapperT_double_t_true_t swig_types[4]\n#define SWIGTYPE_p_INST_AMPL_COMPUTERS__HilbertTransformBasedT_UTILITY_MATH__HTKind__Mull_t swig_types[5]\n#define SWIGTYPE_p_INST_FREQ_COMPUTERS__ComputedOnPhaseT_double_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_INST_FREQ_COMPUTERS__InstFreqDerivativeBasedKind__TimeAverage_t swig_types[6]\n#define SWIGTYPE_p_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t swig_types[7]\n#define SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor swig_types[8]\n#define SWIGTYPE_p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__DerArctg_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t swig_types[9]\n#define SWIGTYPE_p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__Simple_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t swig_types[10]\n#define SWIGTYPE_p_allocator_type swig_types[11]\n#define SWIGTYPE_p_char swig_types[12]\n#define SWIGTYPE_p_difference_type swig_types[13]\n#define SWIGTYPE_p_p_PyObject swig_types[14]\n#define SWIGTYPE_p_size_type swig_types[15]\n#define SWIGTYPE_p_std__allocatorT_double_t swig_types[16]\n#define SWIGTYPE_p_std__invalid_argument swig_types[17]\n#define SWIGTYPE_p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t swig_types[18]\n#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[19]\n#define SWIGTYPE_p_swig__SwigPyIterator swig_types[20]\n#define SWIGTYPE_p_value_type swig_types[21]\nstatic swig_type_info *swig_types[23];\nstatic swig_module_info swig_module = {swig_types, 22, 0, 0, 0, 0};\n#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)\n#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)\n\n/* -------- TYPES TABLE (END) -------- */\n\n#ifdef SWIG_TypeQuery\n# undef SWIG_TypeQuery\n#endif\n#define SWIG_TypeQuery SWIG_Python_TypeQuery\n\n/*-----------------------------------------------\n              @(target):= _extractor.so\n  ------------------------------------------------*/\n#if PY_VERSION_HEX >= 0x03000000\n#  define SWIG_init    PyInit__extractor\n\n#else\n#  define SWIG_init    init_extractor\n\n#endif\n#define SWIG_name    \"_extractor\"\n\n#ifdef __cplusplus\n#include <utility>\n/* SwigValueWrapper is described in swig.swg */\ntemplate<typename T> class SwigValueWrapper {\n  struct SwigSmartPointer {\n    T *ptr;\n    SwigSmartPointer(T *p) : ptr(p) { }\n    ~SwigSmartPointer() { delete ptr; }\n    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }\n    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }\n  } pointer;\n  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);\n  SwigValueWrapper(const SwigValueWrapper<T>& rhs);\npublic:\n  SwigValueWrapper() : pointer(0) { }\n  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }\n#if __cplusplus >=201103L\n  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }\n  operator T&&() const { return std::move(*pointer.ptr); }\n#else\n  operator T&() const { return *pointer.ptr; }\n#endif\n  T *operator&() const { return pointer.ptr; }\n  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }\n};\n\n/*\n * SwigValueInit() is a generic initialisation solution as the following approach:\n * \n *       T c_result = T();\n * \n * doesn't compile for all types for example:\n * \n *       unsigned int c_result = unsigned int();\n */\ntemplate <typename T> T SwigValueInit() {\n  return T();\n}\n\n#if __cplusplus >=201103L\n# define SWIG_STD_MOVE(OBJ) std::move(OBJ)\n#else\n# define SWIG_STD_MOVE(OBJ) OBJ\n#endif\n\n#endif\n\n\n#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) \n#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) \n\n\n#include <stdexcept>\n\n\nnamespace swig {\n  class SwigPtr_PyObject {\n  protected:\n    PyObject *_obj;\n\n  public:\n    SwigPtr_PyObject() :_obj(0)\n    {\n    }\n\n    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)\n    {\n      SWIG_PYTHON_THREAD_BEGIN_BLOCK;\n      Py_XINCREF(_obj);      \n      SWIG_PYTHON_THREAD_END_BLOCK;\n    }\n    \n    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)\n    {\n      if (initial_ref) {\n        SWIG_PYTHON_THREAD_BEGIN_BLOCK;\n        Py_XINCREF(_obj);\n        SWIG_PYTHON_THREAD_END_BLOCK;\n      }\n    }\n    \n    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) \n    {\n      SWIG_PYTHON_THREAD_BEGIN_BLOCK;\n      Py_XINCREF(item._obj);\n      Py_XDECREF(_obj);\n      _obj = item._obj;\n      SWIG_PYTHON_THREAD_END_BLOCK;\n      return *this;      \n    }\n    \n    ~SwigPtr_PyObject() \n    {\n      SWIG_PYTHON_THREAD_BEGIN_BLOCK;\n      Py_XDECREF(_obj);\n      SWIG_PYTHON_THREAD_END_BLOCK;\n    }\n    \n    operator PyObject *() const\n    {\n      return _obj;\n    }\n\n    PyObject *operator->() const\n    {\n      return _obj;\n    }\n  };\n}\n\n\nnamespace swig {\n  struct SwigVar_PyObject : SwigPtr_PyObject {\n    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }\n    \n    SwigVar_PyObject & operator = (PyObject* obj)\n    {\n      Py_XDECREF(_obj);\n      _obj = obj;\n      return *this;      \n    }\n  };\n}\n\n\n#include \"modes_extractors.hpp\"\nusing namespace NP_DSP;\nusing namespace NP_DSP::ONE_D;\nusing namespace NP_DSP::ONE_D::MODES_EXTRACTORS;\n\n\n#include <typeinfo>\n#include <stdexcept>\n\n\n#if defined(__GNUC__)\n#  if __GNUC__ == 2 && __GNUC_MINOR <= 96\n#     define SWIG_STD_NOMODERN_STL\n#  endif\n#endif\n\n\n#include <string>\n\n\n#include <stddef.h>\n\n\n#include <iostream>\n\n#if PY_VERSION_HEX >= 0x03020000\n# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))\n#else\n# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))\n#endif\n\n\nnamespace swig {\n  struct stop_iteration {\n  };\n\n  struct SwigPyIterator {\n  private:\n    SwigPtr_PyObject _seq;\n\n  protected:\n    SwigPyIterator(PyObject *seq) : _seq(seq)\n    {\n    }\n      \n  public:\n    virtual ~SwigPyIterator() {}\n\n    // Access iterator method, required by Python\n    virtual PyObject *value() const = 0;\n\n    // Forward iterator method, required by Python\n    virtual SwigPyIterator *incr(size_t n = 1) = 0;\n    \n    // Backward iterator method, very common in C++, but not required in Python\n    virtual SwigPyIterator *decr(size_t /*n*/ = 1)\n    {\n      throw stop_iteration();\n    }\n\n    // Random access iterator methods, but not required in Python\n    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const\n    {\n      throw std::invalid_argument(\"operation not supported\");\n    }\n\n    virtual bool equal (const SwigPyIterator &/*x*/) const\n    {\n      throw std::invalid_argument(\"operation not supported\");\n    }\n    \n    // C++ common/needed methods\n    virtual SwigPyIterator *copy() const = 0;\n\n    PyObject *next()     \n    {\n      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       \n      PyObject *obj = value();\n      incr();       \n      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads\n      return obj;     \n    }\n\n    /* Make an alias for Python 3.x */\n    PyObject *__next__()\n    {\n      return next();\n    }\n\n    PyObject *previous()\n    {\n      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       \n      decr();\n      PyObject *obj = value();\n      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       \n      return obj;\n    }\n\n    SwigPyIterator *advance(ptrdiff_t n)\n    {\n      return  (n > 0) ?  incr(n) : decr(-n);\n    }\n      \n    bool operator == (const SwigPyIterator& x)  const\n    {\n      return equal(x);\n    }\n      \n    bool operator != (const SwigPyIterator& x) const\n    {\n      return ! operator==(x);\n    }\n      \n    SwigPyIterator& operator += (ptrdiff_t n)\n    {\n      return *advance(n);\n    }\n\n    SwigPyIterator& operator -= (ptrdiff_t n)\n    {\n      return *advance(-n);\n    }\n      \n    SwigPyIterator* operator + (ptrdiff_t n) const\n    {\n      return copy()->advance(n);\n    }\n\n    SwigPyIterator* operator - (ptrdiff_t n) const\n    {\n      return copy()->advance(-n);\n    }\n      \n    ptrdiff_t operator - (const SwigPyIterator& x) const\n    {\n      return x.distance(*this);\n    }\n      \n    static swig_type_info* descriptor() {\n      static int init = 0;\n      static swig_type_info* desc = 0;\n      if (!init) {\n\tdesc = SWIG_TypeQuery(\"swig::SwigPyIterator *\");\n\tinit = 1;\n      }\t\n      return desc;\n    }    \n  };\n\n#if defined(SWIGPYTHON_BUILTIN)\n  inline PyObject* make_output_iterator_builtin (PyObject *pyself)\n  {\n    Py_INCREF(pyself);\n    return pyself;\n  }\n#endif\n}\n\n\nSWIGINTERN int\nSWIG_AsVal_double (PyObject *obj, double *val)\n{\n  int res = SWIG_TypeError;\n  if (PyFloat_Check(obj)) {\n    if (val) *val = PyFloat_AsDouble(obj);\n    return SWIG_OK;\n#if PY_VERSION_HEX < 0x03000000\n  } else if (PyInt_Check(obj)) {\n    if (val) *val = (double) PyInt_AsLong(obj);\n    return SWIG_OK;\n#endif\n  } else if (PyLong_Check(obj)) {\n    double v = PyLong_AsDouble(obj);\n    if (!PyErr_Occurred()) {\n      if (val) *val = v;\n      return SWIG_OK;\n    } else {\n      PyErr_Clear();\n    }\n  }\n#ifdef SWIG_PYTHON_CAST_MODE\n  {\n    int dispatch = 0;\n    double d = PyFloat_AsDouble(obj);\n    if (!PyErr_Occurred()) {\n      if (val) *val = d;\n      return SWIG_AddCast(SWIG_OK);\n    } else {\n      PyErr_Clear();\n    }\n    if (!dispatch) {\n      long v = PyLong_AsLong(obj);\n      if (!PyErr_Occurred()) {\n\tif (val) *val = v;\n\treturn SWIG_AddCast(SWIG_AddCast(SWIG_OK));\n      } else {\n\tPyErr_Clear();\n      }\n    }\n  }\n#endif\n  return res;\n}\n\n\n#include <float.h>\n\n\n#include <math.h>\n\n\nSWIGINTERNINLINE int\nSWIG_CanCastAsInteger(double *d, double min, double max) {\n  double x = *d;\n  if ((min <= x && x <= max)) {\n   double fx = floor(x);\n   double cx = ceil(x);\n   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */\n   if ((errno == EDOM) || (errno == ERANGE)) {\n     errno = 0;\n   } else {\n     double summ, reps, diff;\n     if (rd < x) {\n       diff = x - rd;\n     } else if (rd > x) {\n       diff = rd - x;\n     } else {\n       return 1;\n     }\n     summ = rd + x;\n     reps = diff/summ;\n     if (reps < 8*DBL_EPSILON) {\n       *d = rd;\n       return 1;\n     }\n   }\n  }\n  return 0;\n}\n\n\nSWIGINTERN int\nSWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) \n{\n#if PY_VERSION_HEX < 0x03000000\n  if (PyInt_Check(obj)) {\n    long v = PyInt_AsLong(obj);\n    if (v >= 0) {\n      if (val) *val = v;\n      return SWIG_OK;\n    } else {\n      return SWIG_OverflowError;\n    }\n  } else\n#endif\n  if (PyLong_Check(obj)) {\n    unsigned long v = PyLong_AsUnsignedLong(obj);\n    if (!PyErr_Occurred()) {\n      if (val) *val = v;\n      return SWIG_OK;\n    } else {\n      PyErr_Clear();\n      return SWIG_OverflowError;\n    }\n  }\n#ifdef SWIG_PYTHON_CAST_MODE\n  {\n    int dispatch = 0;\n    unsigned long v = PyLong_AsUnsignedLong(obj);\n    if (!PyErr_Occurred()) {\n      if (val) *val = v;\n      return SWIG_AddCast(SWIG_OK);\n    } else {\n      PyErr_Clear();\n    }\n    if (!dispatch) {\n      double d;\n      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));\n      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {\n\tif (val) *val = (unsigned long)(d);\n\treturn res;\n      }\n    }\n  }\n#endif\n  return SWIG_TypeError;\n}\n\n\n#include <limits.h>\n#if !defined(SWIG_NO_LLONG_MAX)\n# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)\n#   define LLONG_MAX __LONG_LONG_MAX__\n#   define LLONG_MIN (-LLONG_MAX - 1LL)\n#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)\n# endif\n#endif\n\n\n#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)\n#  define SWIG_LONG_LONG_AVAILABLE\n#endif\n\n\n#ifdef SWIG_LONG_LONG_AVAILABLE\nSWIGINTERN int\nSWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)\n{\n  int res = SWIG_TypeError;\n  if (PyLong_Check(obj)) {\n    unsigned long long v = PyLong_AsUnsignedLongLong(obj);\n    if (!PyErr_Occurred()) {\n      if (val) *val = v;\n      return SWIG_OK;\n    } else {\n      PyErr_Clear();\n      res = SWIG_OverflowError;\n    }\n  } else {\n    unsigned long v;\n    res = SWIG_AsVal_unsigned_SS_long (obj,&v);\n    if (SWIG_IsOK(res)) {\n      if (val) *val = v;\n      return res;\n    }\n  }\n#ifdef SWIG_PYTHON_CAST_MODE\n  {\n    const double mant_max = 1LL << DBL_MANT_DIG;\n    double d;\n    res = SWIG_AsVal_double (obj,&d);\n    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))\n      return SWIG_OverflowError;\n    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {\n      if (val) *val = (unsigned long long)(d);\n      return SWIG_AddCast(res);\n    }\n    res = SWIG_TypeError;\n  }\n#endif\n  return res;\n}\n#endif\n\n\nSWIGINTERNINLINE int\nSWIG_AsVal_size_t (PyObject * obj, size_t *val)\n{\n  int res = SWIG_TypeError;\n#ifdef SWIG_LONG_LONG_AVAILABLE\n  if (sizeof(size_t) <= sizeof(unsigned long)) {\n#endif\n    unsigned long v;\n    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);\n    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);\n#ifdef SWIG_LONG_LONG_AVAILABLE\n  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {\n    unsigned long long v;\n    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);\n    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);\n  }\n#endif\n  return res;\n}\n\n\n  #define SWIG_From_long   PyInt_FromLong \n\n\n#ifdef SWIG_LONG_LONG_AVAILABLE\nSWIGINTERNINLINE PyObject* \nSWIG_From_long_SS_long  (long long value)\n{\n  return ((value < LONG_MIN) || (value > LONG_MAX)) ?\n    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));\n}\n#endif\n\n\nSWIGINTERNINLINE PyObject *\nSWIG_From_ptrdiff_t  (ptrdiff_t value)\n{    \n#ifdef SWIG_LONG_LONG_AVAILABLE\n  if (sizeof(ptrdiff_t) <= sizeof(long)) {\n#endif\n    return SWIG_From_long  (static_cast< long >(value));\n#ifdef SWIG_LONG_LONG_AVAILABLE\n  } else {\n    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */\n    return SWIG_From_long_SS_long  (static_cast< long long >(value));\n  }\n#endif\n}\n\n\nSWIGINTERNINLINE PyObject*\n  SWIG_From_bool  (bool value)\n{\n  return PyBool_FromLong(value ? 1 : 0);\n}\n\n\nSWIGINTERN int\nSWIG_AsVal_long (PyObject *obj, long* val)\n{\n#if PY_VERSION_HEX < 0x03000000\n  if (PyInt_Check(obj)) {\n    if (val) *val = PyInt_AsLong(obj);\n    return SWIG_OK;\n  } else\n#endif\n  if (PyLong_Check(obj)) {\n    long v = PyLong_AsLong(obj);\n    if (!PyErr_Occurred()) {\n      if (val) *val = v;\n      return SWIG_OK;\n    } else {\n      PyErr_Clear();\n      return SWIG_OverflowError;\n    }\n  }\n#ifdef SWIG_PYTHON_CAST_MODE\n  {\n    int dispatch = 0;\n    long v = PyInt_AsLong(obj);\n    if (!PyErr_Occurred()) {\n      if (val) *val = v;\n      return SWIG_AddCast(SWIG_OK);\n    } else {\n      PyErr_Clear();\n    }\n    if (!dispatch) {\n      double d;\n      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));\n      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {\n\tif (val) *val = (long)(d);\n\treturn res;\n      }\n    }\n  }\n#endif\n  return SWIG_TypeError;\n}\n\n\n#ifdef SWIG_LONG_LONG_AVAILABLE\nSWIGINTERN int\nSWIG_AsVal_long_SS_long (PyObject *obj, long long *val)\n{\n  int res = SWIG_TypeError;\n  if (PyLong_Check(obj)) {\n    long long v = PyLong_AsLongLong(obj);\n    if (!PyErr_Occurred()) {\n      if (val) *val = v;\n      return SWIG_OK;\n    } else {\n      PyErr_Clear();\n      res = SWIG_OverflowError;\n    }\n  } else {\n    long v;\n    res = SWIG_AsVal_long (obj,&v);\n    if (SWIG_IsOK(res)) {\n      if (val) *val = v;\n      return res;\n    }\n  }\n#ifdef SWIG_PYTHON_CAST_MODE\n  {\n    const double mant_max = 1LL << DBL_MANT_DIG;\n    const double mant_min = -mant_max;\n    double d;\n    res = SWIG_AsVal_double (obj,&d);\n    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))\n      return SWIG_OverflowError;\n    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {\n      if (val) *val = (long long)(d);\n      return SWIG_AddCast(res);\n    }\n    res = SWIG_TypeError;\n  }\n#endif\n  return res;\n}\n#endif\n\n\nSWIGINTERNINLINE int\nSWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)\n{\n  int res = SWIG_TypeError;\n#ifdef SWIG_LONG_LONG_AVAILABLE\n  if (sizeof(ptrdiff_t) <= sizeof(long)) {\n#endif\n    long v;\n    res = SWIG_AsVal_long (obj, val ? &v : 0);\n    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);\n#ifdef SWIG_LONG_LONG_AVAILABLE\n  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {\n    long long v;\n    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);\n    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);\n  }\n#endif\n  return res;\n}\n\n\n#include <algorithm>\n\n\n#include <vector>\n\n\n#include <utility>\n\n\n#include <map>\n\n\n#include <algorithm>\n\n\nnamespace swig {\n  template <class Type>\n  struct noconst_traits {\n    typedef Type noconst_type;\n  };\n\n  template <class Type>\n  struct noconst_traits<const Type> {\n    typedef Type noconst_type;\n  };\n\n  /*\n    type categories\n  */\n  struct pointer_category { };\n  struct value_category { };\n\n  /*\n    General traits that provides type_name and type_info\n  */\n  template <class Type> struct traits { };\n\n  template <class Type>\n  inline const char* type_name() {\n    return traits<typename noconst_traits<Type >::noconst_type >::type_name();\n  }\n\n  template <class Type> struct traits_info {\n    static swig_type_info *type_query(std::string name) {\n      name += \" *\";\n      return SWIG_TypeQuery(name.c_str());\n    }\n    static swig_type_info *type_info() {\n      static swig_type_info *info = type_query(type_name<Type>());\n      return info;\n    }\n  };\n\n  /*\n    Partial specialization for pointers (traits_info)\n  */\n  template <class Type> struct traits_info<Type *> {\n    static swig_type_info *type_query(std::string name) {\n      name += \" *\";\n      return SWIG_TypeQuery(name.c_str());\n    }\n    static swig_type_info *type_info() {\n      static swig_type_info *info = type_query(type_name<Type>());\n      return info;\n    }\n  };\n\n  template <class Type>\n  inline swig_type_info *type_info() {\n    return traits_info<Type>::type_info();\n  }\n\n  /*\n    Partial specialization for pointers (traits)\n  */\n  template <class Type> struct traits <Type *> {\n    typedef pointer_category category;\n    static std::string make_ptr_name(const char* name) {\n      std::string ptrname = name;\n      ptrname += \" *\";\n      return ptrname;\n    }\n    static const char* type_name() {\n      static std::string name = make_ptr_name(swig::type_name<Type>());\n      return name.c_str();\n    }\n  };\n\n  template <class Type, class Category>\n  struct traits_as { };\n\n  template <class Type, class Category>\n  struct traits_check { };\n\n}\n\n\nnamespace swig {  \n  /*\n    Traits that provides the from method\n  */\n  template <class Type> struct traits_from_ptr {\n    static PyObject *from(Type *val, int owner = 0) {\n      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);\n    }\n  };\n\n  template <class Type> struct traits_from {\n    static PyObject *from(const Type& val) {\n      return traits_from_ptr<Type>::from(new Type(val), 1);\n    }\n  };\n\n  template <class Type> struct traits_from<Type *> {\n    static PyObject *from(Type* val) {\n      return traits_from_ptr<Type>::from(val, 0);\n    }\n  };\n\n  template <class Type> struct traits_from<const Type *> {\n    static PyObject *from(const Type* val) {\n      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);\n    }\n  };\n\n\n  template <class Type>\n  inline PyObject *from(const Type& val) {\n    return traits_from<Type>::from(val);\n  }\n\n  template <class Type>\n  inline PyObject *from_ptr(Type* val, int owner) {\n    return traits_from_ptr<Type>::from(val, owner);\n  }\n\n  /*\n    Traits that provides the asval/as/check method\n  */\n  template <class Type>\n  struct traits_asptr {   \n    static int asptr(PyObject *obj, Type **val) {\n      int res = SWIG_ERROR;\n      swig_type_info *descriptor = type_info<Type>();\n      if (val) {\n        Type *p = 0;\n        int newmem = 0;\n        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;\n        if (SWIG_IsOK(res)) {\n          if (newmem & SWIG_CAST_NEW_MEMORY) {\n            res |= SWIG_NEWOBJMASK;\n          }\n          *val = p;\n        }\n      } else {\n        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;\n      }\n      return res;\n    }\n  }; \n\n  template <class Type>\n  inline int asptr(PyObject *obj, Type **vptr) {\n    return traits_asptr<Type>::asptr(obj, vptr);\n  }\n\n  template <class Type> \n  struct traits_asval {\n    static int asval(PyObject *obj, Type *val) {\n      if (val) {\n\tType *p = 0;\n\tint res = traits_asptr<Type>::asptr(obj, &p);\n\tif (!SWIG_IsOK(res)) return res;\t\n\tif (p) {\n\t  typedef typename noconst_traits<Type>::noconst_type noconst_type;\n\t  *(const_cast<noconst_type*>(val)) = *p;\n\t  if (SWIG_IsNewObj(res)){\n\t    delete p;\n\t    res = SWIG_DelNewMask(res);\n\t  }\n\t  return res;\n\t} else {\n\t  return SWIG_ERROR;\n\t}\n      } else {\n\treturn traits_asptr<Type>::asptr(obj, (Type **)(0));\n      }\n    }\n  };\n\n  template <class Type> struct traits_asval<Type*> {\n    static int asval(PyObject *obj, Type **val) {\n      if (val) {\n        typedef typename noconst_traits<Type>::noconst_type noconst_type;\n        noconst_type *p = 0;\n        int res = traits_asptr<noconst_type>::asptr(obj,  &p);\n        if (SWIG_IsOK(res)) {\n          *(const_cast<noconst_type**>(val)) = p;\n\t}\n\treturn res;\n      } else {\n\treturn traits_asptr<Type>::asptr(obj, (Type **)(0));\n      }\n    }\n  };\n  \n  template <class Type>\n  inline int asval(PyObject *obj, Type *val) {\n    return traits_asval<Type>::asval(obj, val);\n  }\n\n  template <class Type> \n  struct traits_as<Type, value_category> {\n    static Type as(PyObject *obj) {\n      Type v;\n      int res = asval(obj, &v);\n      if (!obj || !SWIG_IsOK(res)) {\n\tif (!PyErr_Occurred()) {\n\t  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());\n\t}\n\tthrow std::invalid_argument(\"bad type\");\n      }\n      return v;\n    }\n  };\n\n  template <class Type> \n  struct traits_as<Type, pointer_category> {\n    static Type as(PyObject *obj) {\n      Type *v = 0;      \n      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);\n      if (SWIG_IsOK(res) && v) {\n\tif (SWIG_IsNewObj(res)) {\n\t  Type r(*v);\n\t  delete v;\n\t  return r;\n\t} else {\n\t  return *v;\n\t}\n      } else {\n\tif (!PyErr_Occurred()) {\n\t  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());\n\t}\n\tthrow std::invalid_argument(\"bad type\");\n      }\n    }\n  };\n\n  template <class Type> \n  struct traits_as<Type*, pointer_category> {\n    static Type* as(PyObject *obj) {\n      Type *v = 0;      \n      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);\n      if (SWIG_IsOK(res)) {\n\treturn v;\n      } else {\n\tif (!PyErr_Occurred()) {\n\t  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());\n\t}\n\tthrow std::invalid_argument(\"bad type\");\n      }\n    }\n  };\n    \n  template <class Type>\n  inline Type as(PyObject *obj) {\n    return traits_as<Type, typename traits<Type>::category>::as(obj);\n  }\n\n  template <class Type> \n  struct traits_check<Type, value_category> {\n    static bool check(PyObject *obj) {\n      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;\n      return SWIG_IsOK(res) ? true : false;\n    }\n  };\n\n  template <class Type> \n  struct traits_check<Type, pointer_category> {\n    static bool check(PyObject *obj) {\n      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;\n      return SWIG_IsOK(res) ? true : false;\n    }\n  };\n\n  template <class Type>\n  inline bool check(PyObject *obj) {\n    return traits_check<Type, typename traits<Type>::category>::check(obj);\n  }\n}\n\n\n#include <functional>\n\nnamespace std {\n  template <>\n  struct less <PyObject *>\n  {\n    bool\n    operator()(PyObject * v, PyObject *w) const\n    { \n      bool res;\n      SWIG_PYTHON_THREAD_BEGIN_BLOCK;\n      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;\n      /* This may fall into a case of inconsistent\n               eg. ObjA > ObjX > ObjB\n               but ObjA < ObjB\n      */\n      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )\n      {\n        /* Objects can't be compared, this mostly occurred in Python 3.0 */\n        /* Compare their ptr directly for a workaround */\n        res = (v < w);\n        PyErr_Clear();\n      }\n      SWIG_PYTHON_THREAD_END_BLOCK;\n      return res;\n    }\n  };\n\n  template <>\n  struct less <swig::SwigPtr_PyObject>\n  {\n    bool\n    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const\n    {\n      return std::less<PyObject *>()(v, w);\n    }\n  };\n\n  template <>\n  struct less <swig::SwigVar_PyObject>\n  {\n    bool\n    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const\n    {\n      return std::less<PyObject *>()(v, w);\n    }\n  };\n\n}\n\nnamespace swig {\n  template <> struct traits<PyObject *> {\n    typedef value_category category;\n    static const char* type_name() { return \"PyObject *\"; }\n  };  \n\n  template <>  struct traits_asval<PyObject * > {   \n    typedef PyObject * value_type;\n    static int asval(PyObject *obj, value_type *val) {\n      if (val) *val = obj;\n      return SWIG_OK;\n    }\n  };\n\n  template <> \n  struct traits_check<PyObject *, value_category> {\n    static bool check(PyObject *) {\n      return true;\n    }\n  };\n\n  template <>  struct traits_from<PyObject *> {\n    typedef PyObject * value_type;\n    static PyObject *from(const value_type& val) {\n      Py_XINCREF(val);\n      return val;\n    }\n  };\n  \n}\n\nnamespace swig {\n  template <class Difference>\n  inline size_t\n  check_index(Difference i, size_t size, bool insert = false) {\n    if ( i < 0 ) {\n      if ((size_t) (-i) <= size)\n\treturn (size_t) (i + size);\n    } else if ( (size_t) i < size ) {\n      return (size_t) i;\n    } else if (insert && ((size_t) i == size)) {\n      return size;\n    }\n    throw std::out_of_range(\"index out of range\");\n  }\n\n  template <class Difference>\n  void\n  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {\n    if (step == 0) {\n      throw std::invalid_argument(\"slice step cannot be zero\");\n    } else if (step > 0) {\n      // Required range: 0 <= i < size, 0 <= j < size, i <= j\n      if (i < 0) {\n        ii = 0;\n      } else if (i < (Difference)size) {\n        ii = i;\n      } else if (insert && (i >= (Difference)size)) {\n        ii = (Difference)size;\n      }\n      if (j < 0) {\n        jj = 0;\n      } else {\n        jj = (j < (Difference)size) ? j : (Difference)size;\n      }\n      if (jj < ii)\n        jj = ii;\n    } else {\n      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j\n      if (i < -1) {\n        ii = -1;\n      } else if (i < (Difference) size) {\n        ii = i;\n      } else if (i >= (Difference)(size-1)) {\n        ii = (Difference)(size-1);\n      }\n      if (j < -1) {\n        jj = -1;\n      } else {\n        jj = (j < (Difference)size ) ? j : (Difference)(size-1);\n      }\n      if (ii < jj)\n        ii = jj;\n    }\n  }\n\n  template <class Sequence, class Difference>\n  inline typename Sequence::iterator\n  getpos(Sequence* self, Difference i)  {\n    typename Sequence::iterator pos = self->begin();\n    std::advance(pos, check_index(i,self->size()));\n    return pos;\n  }\n\n  template <class Sequence, class Difference>\n  inline typename Sequence::const_iterator\n  cgetpos(const Sequence* self, Difference i)  {\n    typename Sequence::const_iterator pos = self->begin();\n    std::advance(pos, check_index(i,self->size()));\n    return pos;\n  }\n\n  template <class Sequence>\n  inline void\n  erase(Sequence* seq, const typename Sequence::iterator& position) {\n    seq->erase(position);\n  }\n\n  template <class Sequence>\n  struct traits_reserve {\n    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {\n      // This should be specialized for types that support reserve\n    }\n  };\n\n  template <class Sequence, class Difference>\n  inline Sequence*\n  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {\n    typename Sequence::size_type size = self->size();\n    Difference ii = 0;\n    Difference jj = 0;\n    swig::slice_adjust(i, j, step, size, ii, jj);\n\n    if (step > 0) {\n      typename Sequence::const_iterator sb = self->begin();\n      typename Sequence::const_iterator se = self->begin();\n      std::advance(sb,ii);\n      std::advance(se,jj);\n      if (step == 1) {\n        return new Sequence(sb, se);\n      } else {\n        Sequence *sequence = new Sequence();\n        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);\n        typename Sequence::const_iterator it = sb;\n        while (it!=se) {\n          sequence->push_back(*it);\n          for (Py_ssize_t c=0; c<step && it!=se; ++c)\n            it++;\n        }\n        return sequence;\n      } \n    } else {\n      Sequence *sequence = new Sequence();\n      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);\n      typename Sequence::const_reverse_iterator sb = self->rbegin();\n      typename Sequence::const_reverse_iterator se = self->rbegin();\n      std::advance(sb,size-ii-1);\n      std::advance(se,size-jj-1);\n      typename Sequence::const_reverse_iterator it = sb;\n      while (it!=se) {\n        sequence->push_back(*it);\n        for (Py_ssize_t c=0; c<-step && it!=se; ++c)\n          it++;\n      }\n      return sequence;\n    }\n  }\n\n  template <class Sequence, class Difference, class InputSeq>\n  inline void\n  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {\n    typename Sequence::size_type size = self->size();\n    Difference ii = 0;\n    Difference jj = 0;\n    swig::slice_adjust(i, j, step, size, ii, jj, true);\n    if (step > 0) {\n      if (step == 1) {\n        size_t ssize = jj - ii;\n        if (ssize <= is.size()) {\n          // expanding/staying the same size\n          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());\n          typename Sequence::iterator sb = self->begin();\n          typename InputSeq::const_iterator isit = is.begin();\n          std::advance(sb,ii);\n          std::advance(isit, jj - ii);\n          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());\n        } else {\n          // shrinking\n          typename Sequence::iterator sb = self->begin();\n          typename Sequence::iterator se = self->begin();\n          std::advance(sb,ii);\n          std::advance(se,jj);\n          self->erase(sb,se);\n          sb = self->begin();\n          std::advance(sb,ii);\n          self->insert(sb, is.begin(), is.end());\n        }\n      } else {\n        size_t replacecount = (jj - ii + step - 1) / step;\n        if (is.size() != replacecount) {\n          char msg[1024];\n          sprintf(msg, \"attempt to assign sequence of size %lu to extended slice of size %lu\", (unsigned long)is.size(), (unsigned long)replacecount);\n          throw std::invalid_argument(msg);\n        }\n        typename Sequence::const_iterator isit = is.begin();\n        typename Sequence::iterator it = self->begin();\n        std::advance(it,ii);\n        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {\n          *it++ = *isit++;\n          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)\n            it++;\n        }\n      }\n    } else {\n      size_t replacecount = (ii - jj - step - 1) / -step;\n      if (is.size() != replacecount) {\n        char msg[1024];\n        sprintf(msg, \"attempt to assign sequence of size %lu to extended slice of size %lu\", (unsigned long)is.size(), (unsigned long)replacecount);\n        throw std::invalid_argument(msg);\n      }\n      typename Sequence::const_iterator isit = is.begin();\n      typename Sequence::reverse_iterator it = self->rbegin();\n      std::advance(it,size-ii-1);\n      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {\n        *it++ = *isit++;\n        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)\n          it++;\n      }\n    }\n  }\n\n  template <class Sequence, class Difference>\n  inline void\n  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {\n    typename Sequence::size_type size = self->size();\n    Difference ii = 0;\n    Difference jj = 0;\n    swig::slice_adjust(i, j, step, size, ii, jj, true);\n    if (step > 0) {\n      typename Sequence::iterator sb = self->begin();\n      std::advance(sb,ii);\n      if (step == 1) {\n        typename Sequence::iterator se = self->begin();\n        std::advance(se,jj);\n        self->erase(sb,se);\n      } else {\n        typename Sequence::iterator it = sb;\n        size_t delcount = (jj - ii + step - 1) / step;\n        while (delcount) {\n          it = self->erase(it);\n          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)\n            it++;\n          delcount--;\n        }\n      }\n    } else {\n      typename Sequence::reverse_iterator sb = self->rbegin();\n      std::advance(sb,size-ii-1);\n      typename Sequence::reverse_iterator it = sb;\n      size_t delcount = (ii - jj - step - 1) / -step;\n      while (delcount) {\n        it = typename Sequence::reverse_iterator(self->erase((++it).base()));\n        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)\n          it++;\n        delcount--;\n      }\n    }\n  }\n}\n\n\n#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)\n#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)\n#    define SWIG_STD_NOITERATOR_TRAITS_STL\n#  endif\n#endif\n\n#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)\n#include <iterator>\n#else\nnamespace std {\n  template <class Iterator>\n  struct iterator_traits {\n    typedef ptrdiff_t difference_type;\n    typedef typename Iterator::value_type value_type;\n  };\n\n  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>\n  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {\n    typedef Distance difference_type;\n    typedef T value_type;\n  };\n\n  template <class T>\n  struct iterator_traits<T*> {\n    typedef T value_type;\n    typedef ptrdiff_t difference_type;\n  };\n\n  template<typename _InputIterator>\n  inline typename iterator_traits<_InputIterator>::difference_type\n  distance(_InputIterator __first, _InputIterator __last)\n  {\n    typename iterator_traits<_InputIterator>::difference_type __n = 0;\n    while (__first != __last) {\n      ++__first; ++__n;\n    }\n    return __n;\n  }\n}\n#endif\n\n\nnamespace swig {\n  template<typename OutIterator>\n  class SwigPyIterator_T :  public SwigPyIterator\n  {\n  public:\n    typedef OutIterator out_iterator;\n    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    \n    typedef SwigPyIterator_T<out_iterator> self_type;\n\n    SwigPyIterator_T(out_iterator curr, PyObject *seq)\n      : SwigPyIterator(seq), current(curr)\n    {\n    }\n\n    const out_iterator& get_current() const\n    {\n      return current;\n    }\n\n    \n    bool equal (const SwigPyIterator &iter) const\n    {\n      const self_type *iters = dynamic_cast<const self_type *>(&iter);\n      if (iters) {\n\treturn (current == iters->get_current());\n      } else {\n\tthrow std::invalid_argument(\"bad iterator type\");\n      }\n    }\n    \n    ptrdiff_t distance(const SwigPyIterator &iter) const\n    {\n      const self_type *iters = dynamic_cast<const self_type *>(&iter);\n      if (iters) {\n\treturn std::distance(current, iters->get_current());\n      } else {\n\tthrow std::invalid_argument(\"bad iterator type\");\n      }\n    }    \n    \n  protected:\n    out_iterator current;\n  };\n  \n  template <class ValueType>\n  struct from_oper \n  {\n    typedef const ValueType& argument_type;\n    typedef PyObject *result_type;\n    result_type operator()(argument_type v) const\n    {\n      return swig::from(v);\n    }\n  };\n\n  template<typename OutIterator, \n\t   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,\n\t   typename FromOper = from_oper<ValueType> >\n  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>\n  {\n  public:\n    FromOper from;\n    typedef OutIterator out_iterator;\n    typedef ValueType value_type;\n    typedef SwigPyIterator_T<out_iterator>  base;\n    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;\n    \n    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)\n      : SwigPyIterator_T<OutIterator>(curr, seq)\n    {\n    }\n    \n    PyObject *value() const {\n      return from(static_cast<const value_type&>(*(base::current)));\n    }\n    \n    SwigPyIterator *copy() const\n    {\n      return new self_type(*this);\n    }\n\n    SwigPyIterator *incr(size_t n = 1)\n    {\n      while (n--) {\n\t++base::current;\n      }\n      return this;\n    }\n\n  };\n\n  template<typename OutIterator, \n\t   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,\n\t   typename FromOper = from_oper<ValueType> >\n  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>\n  {\n  public:\n    FromOper from;\n    typedef OutIterator out_iterator;\n    typedef ValueType value_type;\n    typedef SwigPyIterator_T<out_iterator>  base;\n    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;\n    \n    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)\n      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)\n    {\n    }\n\n    SwigPyIterator *decr(size_t n = 1)\n    {\n      while (n--) {\n\t--base::current;\n      }\n      return this;\n    }\n  };\n\n  template<typename OutIterator, \n\t   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,\n\t   typename FromOper = from_oper<ValueType> >\n  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>\n  {\n  public:\n    FromOper from;\n    typedef OutIterator out_iterator;\n    typedef ValueType value_type;\n    typedef SwigPyIterator_T<out_iterator>  base;    \n    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;\n    \n    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)\n      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)\n    {\n    }\n    \n    PyObject *value() const {\n      if (base::current == end) {\n\tthrow stop_iteration();\n      } else {\n\treturn from(static_cast<const value_type&>(*(base::current)));\n      }\n    }\n    \n    SwigPyIterator *copy() const\n    {\n      return new self_type(*this);\n    }\n\n    SwigPyIterator *incr(size_t n = 1)\n    {\n      while (n--) {\n\tif (base::current == end) {\n\t  throw stop_iteration();\n\t} else {\n\t  ++base::current;\n\t}\n      }\n      return this;\n    }\n\n  protected:\n    out_iterator begin;\n    out_iterator end;\n  };\n\n  template<typename OutIterator, \n\t   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,\n\t   typename FromOper = from_oper<ValueType> >\n  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>\n  {\n  public:\n    FromOper from;\n    typedef OutIterator out_iterator;\n    typedef ValueType value_type;\n    typedef SwigPyIterator_T<out_iterator>  base;\n    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;\n    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;\n    \n    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)\n      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)\n    {\n    }\n\n    SwigPyIterator *decr(size_t n = 1)\n    {\n      while (n--) {\n\tif (base::current == base0::begin) {\n\t  throw stop_iteration();\n\t} else {\n\t  --base::current;\n\t}\n      }\n      return this;\n    }\n  };\n\n\n  template<typename OutIter>\n  inline SwigPyIterator*\n  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)\n  {\n    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);\n  }\n\n  template<typename OutIter>\n  inline SwigPyIterator*\n  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)\n  {\n    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);\n  }\n\n  template<typename OutIter>\n  inline SwigPyIterator*\n  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)\n  {\n    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);\n  }\n\n  template<typename OutIter>\n  inline SwigPyIterator*\n  make_output_iterator(const OutIter& current, PyObject *seq = 0)\n  {\n    return new SwigPyIteratorOpen_T<OutIter>(current, seq);\n  }\n\n}\n\n\nnamespace swig\n{\n  template <class T>\n  struct SwigPySequence_Ref\n  {\n    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)\n      : _seq(seq), _index(index)\n    {\n    }\n    \n    operator T () const\n    {\n      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);\n      try {\n\treturn swig::as<T>(item);\n      } catch (const std::invalid_argument& e) {\n\tchar msg[1024];\n\tsprintf(msg, \"in sequence element %d \", (int)_index);\n\tif (!PyErr_Occurred()) {\n\t  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());\n\t}\n\tSWIG_Python_AddErrorMsg(msg);\n\tSWIG_Python_AddErrorMsg(e.what());\n\tthrow;\n      }\n    }\n\n    SwigPySequence_Ref& operator=(const T& v)\n    {\n      PySequence_SetItem(_seq, _index, swig::from<T>(v));\n      return *this;\n    }\n\n  private:\n    PyObject* _seq;\n    Py_ssize_t _index;\n  };\n\n  template <class T>\n  struct SwigPySequence_ArrowProxy\n  {\n    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}\n    const T* operator->() const { return &m_value; }\n    operator const T*() const { return &m_value; }\n    T m_value;\n  };\n\n  template <class T, class Reference >\n  struct SwigPySequence_InputIterator\n  {\n    typedef SwigPySequence_InputIterator<T, Reference > self;\n\n    typedef std::random_access_iterator_tag iterator_category;\n    typedef Reference reference;\n    typedef T value_type;\n    typedef T* pointer;\n    typedef Py_ssize_t difference_type;\n\n    SwigPySequence_InputIterator()\n    {\n    }\n\n    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)\n      : _seq(seq), _index(index)\n    {\n    }\n\n    reference operator*() const\n    {\n      return reference(_seq, _index);\n    }\n\n    SwigPySequence_ArrowProxy<T>\n    operator->() const {\n      return SwigPySequence_ArrowProxy<T>(operator*());\n    }\n\n    bool operator==(const self& ri) const\n    {\n      return (_index == ri._index) && (_seq == ri._seq);\n    }\n\n    bool operator!=(const self& ri) const\n    {\n      return !(operator==(ri));\n    }\n\n    self& operator ++ ()\n    {\n      ++_index;\n      return *this;\n    }\n\n    self& operator -- ()\n    {\n      --_index;\n      return *this;\n    }\n\n    self& operator += (difference_type n)\n    {\n      _index += n;\n      return *this;\n    }\n\n    self operator +(difference_type n) const\n    {\n      return self(_seq, _index + n);\n    }\n\n    self& operator -= (difference_type n)\n    {\n      _index -= n;\n      return *this;\n    }\n\n    self operator -(difference_type n) const\n    {\n      return self(_seq, _index - n);\n    }\n\n    difference_type operator - (const self& ri) const\n    {\n      return _index - ri._index;\n    }\n\n    bool operator < (const self& ri) const\n    {\n      return _index < ri._index;\n    }\n\n    reference\n    operator[](difference_type n) const\n    {\n      return reference(_seq, _index + n);\n    }\n\n  private:\n    PyObject* _seq;\n    difference_type _index;\n  };\n\n  // STL container wrapper around a Python sequence\n  template <class T>\n  struct SwigPySequence_Cont\n  {\n    typedef SwigPySequence_Ref<T> reference;\n    typedef const SwigPySequence_Ref<T> const_reference;\n    typedef T value_type;\n    typedef T* pointer;\n    typedef Py_ssize_t difference_type;\n    typedef size_t size_type;\n    typedef const pointer const_pointer;\n    typedef SwigPySequence_InputIterator<T, reference> iterator;\n    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;\n\n    SwigPySequence_Cont(PyObject* seq) : _seq(0)\n    {\n      if (!PySequence_Check(seq)) {\n\tthrow std::invalid_argument(\"a sequence is expected\");\n      }\n      _seq = seq;\n      Py_INCREF(_seq);\n    }\n\n    ~SwigPySequence_Cont()\n    {\n      Py_XDECREF(_seq);\n    }\n\n    size_type size() const\n    {\n      return static_cast<size_type>(PySequence_Size(_seq));\n    }\n\n    bool empty() const\n    {\n      return size() == 0;\n    }\n\n    iterator begin()\n    {\n      return iterator(_seq, 0);\n    }\n\n    const_iterator begin() const\n    {\n      return const_iterator(_seq, 0);\n    }\n\n    iterator end()\n    {\n      return iterator(_seq, size());\n    }\n\n    const_iterator end() const\n    {\n      return const_iterator(_seq, size());\n    }\n\n    reference operator[](difference_type n)\n    {\n      return reference(_seq, n);\n    }\n\n    const_reference operator[](difference_type n)  const\n    {\n      return const_reference(_seq, n);\n    }\n\n    bool check() const\n    {\n      Py_ssize_t s = size();\n      for (Py_ssize_t i = 0; i < s; ++i) {\n\tswig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);\n\tif (!swig::check<value_type>(item))\n\t  return false;\n      }\n      return true;\n    }\n\n  private:\n    PyObject* _seq;\n  };\n\n}\n\n\n  #define SWIG_From_double   PyFloat_FromDouble \n\n\nnamespace swig {\n  template <> struct traits< double > {\n    typedef value_category category;\n    static const char* type_name() { return\"double\"; }\n  };\n  template <>  struct traits_asval< double > {\n    typedef double value_type;\n    static int asval(PyObject *obj, value_type *val) {\n      return SWIG_AsVal_double (obj, val);\n    }\n  };\n  template <>  struct traits_from< double > {\n    typedef double value_type;\n    static PyObject *from(const value_type& val) {\n      return SWIG_From_double  (val);\n    }\n  };\n}\n\n\nnamespace swig {\n  template <class SwigPySeq, class Seq>\n  inline void\n  assign(const SwigPySeq& swigpyseq, Seq* seq) {\n    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented\n    typedef typename SwigPySeq::value_type value_type;\n    typename SwigPySeq::const_iterator it = swigpyseq.begin();\n    for (;it != swigpyseq.end(); ++it) {\n      seq->insert(seq->end(),(value_type)(*it));\n    }\n  }\n\n  template <class Seq, class T = typename Seq::value_type >\n  struct traits_asptr_stdseq {\n    typedef Seq sequence;\n    typedef T value_type;\n\n    static int asptr(PyObject *obj, sequence **seq) {\n      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {\n\tsequence *p;\n\tswig_type_info *descriptor = swig::type_info<sequence>();\n\tif (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {\n\t  if (seq) *seq = p;\n\t  return SWIG_OLDOBJ;\n\t}\n      } else if (PySequence_Check(obj)) {\n\ttry {\n\t  SwigPySequence_Cont<value_type> swigpyseq(obj);\n\t  if (seq) {\n\t    sequence *pseq = new sequence();\n\t    assign(swigpyseq, pseq);\n\t    *seq = pseq;\n\t    return SWIG_NEWOBJ;\n\t  } else {\n\t    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;\n\t  }\n\t} catch (std::exception& e) {\n\t  if (seq) {\n\t    if (!PyErr_Occurred()) {\n\t      PyErr_SetString(PyExc_TypeError, e.what());\n\t    }\n\t  }\n\t  return SWIG_ERROR;\n\t}\n      }\n      return SWIG_ERROR;\n    }\n  };\n\n  template <class Seq, class T = typename Seq::value_type >\n  struct traits_from_stdseq {\n    typedef Seq sequence;\n    typedef T value_type;\n    typedef typename Seq::size_type size_type;\n    typedef typename sequence::const_iterator const_iterator;\n\n    static PyObject *from(const sequence& seq) {\n#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS\n      swig_type_info *desc = swig::type_info<sequence>();\n      if (desc && desc->clientdata) {\n\treturn SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);\n      }\n#endif\n      size_type size = seq.size();\n      if (size <= (size_type)INT_MAX) {\n\tPyObject *obj = PyTuple_New((Py_ssize_t)size);\n\tPy_ssize_t i = 0;\n\tfor (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {\n\t  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));\n\t}\n\treturn obj;\n      } else {\n\tPyErr_SetString(PyExc_OverflowError,\"sequence size not valid in python\");\n\treturn NULL;\n      }\n    }\n  };\n}\n\n\n  namespace swig {\n    template <class T>\n    struct traits_reserve<std::vector<T> > {\n      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {\n        seq.reserve(n);\n      }\n    };\n\n    template <class T>\n    struct traits_asptr<std::vector<T> >  {\n      static int asptr(PyObject *obj, std::vector<T> **vec) {\n\treturn traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);\n      }\n    };\n    \n    template <class T>\n    struct traits_from<std::vector<T> > {\n      static PyObject *from(const std::vector<T>& vec) {\n\treturn traits_from_stdseq<std::vector<T> >::from(vec);\n      }\n    };\n  }\n\n\n      namespace swig {\n\ttemplate <>  struct traits<std::vector< double, std::allocator< double > > > {\n\t  typedef pointer_category category;\n\t  static const char* type_name() {\n\t    return \"std::vector<\" \"double\" \",\" \"std::allocator< double >\" \" >\";\n\t  }\n\t};\n      }\n    \nSWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){\n      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);\n    }\nSWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){\n      return !(self->empty());\n    }\nSWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){\n      return !(self->empty());\n    }\nSWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){\n      return self->size();\n    }\n\nSWIGINTERNINLINE PyObject* \nSWIG_From_unsigned_SS_long  (unsigned long value)\n{\n  return (value > LONG_MAX) ?\n    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));\n}\n\n\n#ifdef SWIG_LONG_LONG_AVAILABLE\nSWIGINTERNINLINE PyObject* \nSWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)\n{\n  return (value > LONG_MAX) ?\n    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));\n}\n#endif\n\n\nSWIGINTERNINLINE PyObject *\nSWIG_From_size_t  (size_t value)\n{    \n#ifdef SWIG_LONG_LONG_AVAILABLE\n  if (sizeof(size_t) <= sizeof(unsigned long)) {\n#endif\n    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));\n#ifdef SWIG_LONG_LONG_AVAILABLE\n  } else {\n    /* assume sizeof(size_t) <= sizeof(unsigned long long) */\n    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));\n  }\n#endif\n}\n\nSWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){\n      return swig::getslice(self, i, j, 1);\n    }\nSWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){\n      swig::setslice(self, i, j, 1, std::vector< double,std::allocator< double > >());\n    }\nSWIGINTERN void std_vector_Sl_double_Sg____setslice____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){\n      swig::setslice(self, i, j, 1, v);\n    }\nSWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){\n      swig::delslice(self, i, j, 1);\n    }\nSWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){\n      swig::erase(self, swig::getpos(self, i));\n    }\nSWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){\n      Py_ssize_t i, j, step;\n      if( !PySlice_Check(slice) ) {\n        SWIG_Error(SWIG_TypeError, \"Slice object expected.\");\n        return NULL;\n      }\n      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);\n      std::vector< double,std::allocator< double > >::difference_type id = i;\n      std::vector< double,std::allocator< double > >::difference_type jd = j;\n      return swig::getslice(self, id, jd, step);\n    }\nSWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){\n      Py_ssize_t i, j, step;\n      if( !PySlice_Check(slice) ) {\n        SWIG_Error(SWIG_TypeError, \"Slice object expected.\");\n        return;\n      }\n      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);\n      std::vector< double,std::allocator< double > >::difference_type id = i;\n      std::vector< double,std::allocator< double > >::difference_type jd = j;\n      swig::setslice(self, id, jd, step, v);\n    }\nSWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){\n      Py_ssize_t i, j, step;\n      if( !PySlice_Check(slice) ) {\n        SWIG_Error(SWIG_TypeError, \"Slice object expected.\");\n        return;\n      }\n      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);\n      std::vector< double,std::allocator< double > >::difference_type id = i;\n      std::vector< double,std::allocator< double > >::difference_type jd = j;\n      swig::delslice(self, id, jd, step);\n    }\nSWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){\n      Py_ssize_t i, j, step;\n      if( !PySlice_Check(slice) ) {\n        SWIG_Error(SWIG_TypeError, \"Slice object expected.\");\n        return;\n      }\n      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);\n      std::vector< double,std::allocator< double > >::difference_type id = i;\n      std::vector< double,std::allocator< double > >::difference_type jd = j;\n      swig::delslice(self, id, jd, step);\n    }\nSWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){\n      return *(swig::cgetpos(self, i));\n    }\n\nnamespace swig {\n  static PyObject* container_owner_attribute() {\n    static PyObject* attr = SWIG_Python_str_FromChar(\"__swig_container\");\n    return attr;\n  }\n\n  template <typename T>\n  struct container_owner {\n    // By default, do not add the back-reference (for value types)\n    // Specialization below will check the reference for pointer types.\n    static bool back_reference(PyObject* /*child*/, PyObject* /*owner*/) {\n      return false;\n    }\n  };\n\n  template <>\n  struct container_owner<swig::pointer_category> {  \n    /*\n     * Call to add a back-reference to the owning object when returning a \n     * reference from a container.  Will only set the reference if child\n     * is a SWIG wrapper object that does not own the pointer.\n     *\n     * returns whether the reference was set or not\n     */\n    static bool back_reference(PyObject* child, PyObject* owner) {\n      SwigPyObject* swigThis = SWIG_Python_GetSwigThis(child);\n      if (swigThis && (swigThis->own & SWIG_POINTER_OWN) != SWIG_POINTER_OWN) {\n        return PyObject_SetAttr(child, container_owner_attribute(), owner) != -1;\n      }\n      return false;\n    }\n  };\n}\n\nSWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_2(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){\n      *(swig::getpos(self,i)) = x;\n    }\nSWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){\n      if (self->size() == 0)\n\tthrow std::out_of_range(\"pop from empty container\");\n      std::vector< double,std::allocator< double > >::value_type x = self->back();\n      self->pop_back();\n      return x;\n    }\nSWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){\n      self->push_back(x);\n    }\nSWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos){ return self->erase(pos); }\nSWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__erase__SWIG_1(std::vector< double > *self,std::vector< double >::iterator first,std::vector< double >::iterator last){ return self->erase(first, last); }\nSWIGINTERN std::vector< double >::iterator std_vector_Sl_double_Sg__insert__SWIG_0(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::value_type const &x){ return self->insert(pos, x); }\nSWIGINTERN void std_vector_Sl_double_Sg__insert__SWIG_1(std::vector< double > *self,std::vector< double >::iterator pos,std::vector< double >::size_type n,std::vector< double >::value_type const &x){ self->insert(pos, n, x); }\n\nSWIGINTERNINLINE PyObject*\n  SWIG_From_int  (int value)\n{\n  return PyInt_FromLong((long) value);\n}\n\n\nSWIGINTERN int\nSWIG_AsVal_int (PyObject * obj, int *val)\n{\n  long v;\n  int res = SWIG_AsVal_long (obj, &v);\n  if (SWIG_IsOK(res)) {\n    if ((v < INT_MIN || v > INT_MAX)) {\n      return SWIG_OverflowError;\n    } else {\n      if (val) *val = static_cast< int >(v);\n    }\n  }  \n  return res;\n}\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nSWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"delete_SwigPyIterator\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  delete arg1;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  PyObject *result = 0 ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator_value\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  try {\n    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();\n  } catch(swig::stop_iteration &_e) {\n    {\n      (void)_e;\n      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());\n      SWIG_fail;\n    }\n  }\n  resultobj = result;\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  size_t arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  size_t val2 ;\n  int ecode2 = 0 ;\n  swig::SwigPyIterator *result = 0 ;\n  \n  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator_incr\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"SwigPyIterator_incr\" \"', argument \" \"2\"\" of type '\" \"size_t\"\"'\");\n  } \n  arg2 = static_cast< size_t >(val2);\n  try {\n    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);\n  } catch(swig::stop_iteration &_e) {\n    {\n      (void)_e;\n      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());\n      SWIG_fail;\n    }\n  }\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  swig::SwigPyIterator *result = 0 ;\n  \n  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator_incr\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  try {\n    result = (swig::SwigPyIterator *)(arg1)->incr();\n  } catch(swig::stop_iteration &_e) {\n    {\n      (void)_e;\n      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());\n      SWIG_fail;\n    }\n  }\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {\n  Py_ssize_t argc;\n  PyObject *argv[3] = {\n    0\n  };\n  \n  if (!(argc = SWIG_Python_UnpackTuple(args, \"SwigPyIterator_incr\", 0, 2, argv))) SWIG_fail;\n  --argc;\n  if (argc == 1) {\n    int _v = 0;\n    void *vptr = 0;\n    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);\n    }\n  }\n  if (argc == 2) {\n    int _v = 0;\n    void *vptr = 0;\n    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      {\n        int res = SWIG_AsVal_size_t(argv[1], NULL);\n        _v = SWIG_CheckState(res);\n      }\n      if (_v) {\n        return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);\n      }\n    }\n  }\n  \nfail:\n  SWIG_Python_RaiseOrModifyTypeError(\"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\\n\"\n    \"  Possible C/C++ prototypes are:\\n\"\n    \"    swig::SwigPyIterator::incr(size_t)\\n\"\n    \"    swig::SwigPyIterator::incr()\\n\");\n  return 0;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  size_t arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  size_t val2 ;\n  int ecode2 = 0 ;\n  swig::SwigPyIterator *result = 0 ;\n  \n  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator_decr\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"SwigPyIterator_decr\" \"', argument \" \"2\"\" of type '\" \"size_t\"\"'\");\n  } \n  arg2 = static_cast< size_t >(val2);\n  try {\n    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);\n  } catch(swig::stop_iteration &_e) {\n    {\n      (void)_e;\n      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());\n      SWIG_fail;\n    }\n  }\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  swig::SwigPyIterator *result = 0 ;\n  \n  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator_decr\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  try {\n    result = (swig::SwigPyIterator *)(arg1)->decr();\n  } catch(swig::stop_iteration &_e) {\n    {\n      (void)_e;\n      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());\n      SWIG_fail;\n    }\n  }\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {\n  Py_ssize_t argc;\n  PyObject *argv[3] = {\n    0\n  };\n  \n  if (!(argc = SWIG_Python_UnpackTuple(args, \"SwigPyIterator_decr\", 0, 2, argv))) SWIG_fail;\n  --argc;\n  if (argc == 1) {\n    int _v = 0;\n    void *vptr = 0;\n    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);\n    }\n  }\n  if (argc == 2) {\n    int _v = 0;\n    void *vptr = 0;\n    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      {\n        int res = SWIG_AsVal_size_t(argv[1], NULL);\n        _v = SWIG_CheckState(res);\n      }\n      if (_v) {\n        return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);\n      }\n    }\n  }\n  \nfail:\n  SWIG_Python_RaiseOrModifyTypeError(\"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\\n\"\n    \"  Possible C/C++ prototypes are:\\n\"\n    \"    swig::SwigPyIterator::decr(size_t)\\n\"\n    \"    swig::SwigPyIterator::decr()\\n\");\n  return 0;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  swig::SwigPyIterator *arg2 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 = 0 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  ptrdiff_t result;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"SwigPyIterator_distance\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator_distance\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);\n  if (!SWIG_IsOK(res2)) {\n    SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"SwigPyIterator_distance\" \"', argument \" \"2\"\" of type '\" \"swig::SwigPyIterator const &\"\"'\"); \n  }\n  if (!argp2) {\n    SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"SwigPyIterator_distance\" \"', argument \" \"2\"\" of type '\" \"swig::SwigPyIterator const &\"\"'\"); \n  }\n  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);\n  try {\n    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);\n  } catch(std::invalid_argument &_e) {\n    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), \"std::invalid_argument\", SWIGTYPE_p_std__invalid_argument); SWIG_fail;\n  }\n  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  swig::SwigPyIterator *arg2 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 = 0 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  bool result;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"SwigPyIterator_equal\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator_equal\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);\n  if (!SWIG_IsOK(res2)) {\n    SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"SwigPyIterator_equal\" \"', argument \" \"2\"\" of type '\" \"swig::SwigPyIterator const &\"\"'\"); \n  }\n  if (!argp2) {\n    SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"SwigPyIterator_equal\" \"', argument \" \"2\"\" of type '\" \"swig::SwigPyIterator const &\"\"'\"); \n  }\n  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);\n  try {\n    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);\n  } catch(std::invalid_argument &_e) {\n    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), \"std::invalid_argument\", SWIGTYPE_p_std__invalid_argument); SWIG_fail;\n  }\n  resultobj = SWIG_From_bool(static_cast< bool >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  swig::SwigPyIterator *result = 0 ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator_copy\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  PyObject *result = 0 ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator_next\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  try {\n    result = (PyObject *)(arg1)->next();\n  } catch(swig::stop_iteration &_e) {\n    {\n      (void)_e;\n      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());\n      SWIG_fail;\n    }\n  }\n  resultobj = result;\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  PyObject *result = 0 ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator___next__\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  try {\n    result = (PyObject *)(arg1)->__next__();\n  } catch(swig::stop_iteration &_e) {\n    {\n      (void)_e;\n      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());\n      SWIG_fail;\n    }\n  }\n  resultobj = result;\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  PyObject *result = 0 ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator_previous\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  try {\n    result = (PyObject *)(arg1)->previous();\n  } catch(swig::stop_iteration &_e) {\n    {\n      (void)_e;\n      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());\n      SWIG_fail;\n    }\n  }\n  resultobj = result;\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  ptrdiff_t arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  ptrdiff_t val2 ;\n  int ecode2 = 0 ;\n  PyObject *swig_obj[2] ;\n  swig::SwigPyIterator *result = 0 ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"SwigPyIterator_advance\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator_advance\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"SwigPyIterator_advance\" \"', argument \" \"2\"\" of type '\" \"ptrdiff_t\"\"'\");\n  } \n  arg2 = static_cast< ptrdiff_t >(val2);\n  try {\n    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);\n  } catch(swig::stop_iteration &_e) {\n    {\n      (void)_e;\n      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());\n      SWIG_fail;\n    }\n  }\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  swig::SwigPyIterator *arg2 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 = 0 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  bool result;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"SwigPyIterator___eq__\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator___eq__\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);\n  if (!SWIG_IsOK(res2)) {\n    SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"SwigPyIterator___eq__\" \"', argument \" \"2\"\" of type '\" \"swig::SwigPyIterator const &\"\"'\"); \n  }\n  if (!argp2) {\n    SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"SwigPyIterator___eq__\" \"', argument \" \"2\"\" of type '\" \"swig::SwigPyIterator const &\"\"'\"); \n  }\n  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);\n  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);\n  resultobj = SWIG_From_bool(static_cast< bool >(result));\n  return resultobj;\nfail:\n  PyErr_Clear();\n  Py_INCREF(Py_NotImplemented);\n  return Py_NotImplemented;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  swig::SwigPyIterator *arg2 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 = 0 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  bool result;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"SwigPyIterator___ne__\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator___ne__\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);\n  if (!SWIG_IsOK(res2)) {\n    SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"SwigPyIterator___ne__\" \"', argument \" \"2\"\" of type '\" \"swig::SwigPyIterator const &\"\"'\"); \n  }\n  if (!argp2) {\n    SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"SwigPyIterator___ne__\" \"', argument \" \"2\"\" of type '\" \"swig::SwigPyIterator const &\"\"'\"); \n  }\n  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);\n  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);\n  resultobj = SWIG_From_bool(static_cast< bool >(result));\n  return resultobj;\nfail:\n  PyErr_Clear();\n  Py_INCREF(Py_NotImplemented);\n  return Py_NotImplemented;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  ptrdiff_t arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  ptrdiff_t val2 ;\n  int ecode2 = 0 ;\n  PyObject *swig_obj[2] ;\n  swig::SwigPyIterator *result = 0 ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"SwigPyIterator___iadd__\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator___iadd__\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"SwigPyIterator___iadd__\" \"', argument \" \"2\"\" of type '\" \"ptrdiff_t\"\"'\");\n  } \n  arg2 = static_cast< ptrdiff_t >(val2);\n  try {\n    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);\n  } catch(swig::stop_iteration &_e) {\n    {\n      (void)_e;\n      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());\n      SWIG_fail;\n    }\n  }\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  ptrdiff_t arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  ptrdiff_t val2 ;\n  int ecode2 = 0 ;\n  PyObject *swig_obj[2] ;\n  swig::SwigPyIterator *result = 0 ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"SwigPyIterator___isub__\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator___isub__\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"SwigPyIterator___isub__\" \"', argument \" \"2\"\" of type '\" \"ptrdiff_t\"\"'\");\n  } \n  arg2 = static_cast< ptrdiff_t >(val2);\n  try {\n    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);\n  } catch(swig::stop_iteration &_e) {\n    {\n      (void)_e;\n      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());\n      SWIG_fail;\n    }\n  }\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  ptrdiff_t arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  ptrdiff_t val2 ;\n  int ecode2 = 0 ;\n  PyObject *swig_obj[2] ;\n  swig::SwigPyIterator *result = 0 ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"SwigPyIterator___add__\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator___add__\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"SwigPyIterator___add__\" \"', argument \" \"2\"\" of type '\" \"ptrdiff_t\"\"'\");\n  } \n  arg2 = static_cast< ptrdiff_t >(val2);\n  try {\n    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);\n  } catch(swig::stop_iteration &_e) {\n    {\n      (void)_e;\n      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());\n      SWIG_fail;\n    }\n  }\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  PyErr_Clear();\n  Py_INCREF(Py_NotImplemented);\n  return Py_NotImplemented;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  ptrdiff_t arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  ptrdiff_t val2 ;\n  int ecode2 = 0 ;\n  swig::SwigPyIterator *result = 0 ;\n  \n  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator___sub__\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"SwigPyIterator___sub__\" \"', argument \" \"2\"\" of type '\" \"ptrdiff_t\"\"'\");\n  } \n  arg2 = static_cast< ptrdiff_t >(val2);\n  try {\n    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);\n  } catch(swig::stop_iteration &_e) {\n    {\n      (void)_e;\n      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());\n      SWIG_fail;\n    }\n  }\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  PyErr_Clear();\n  Py_INCREF(Py_NotImplemented);\n  return Py_NotImplemented;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;\n  swig::SwigPyIterator *arg2 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 = 0 ;\n  int res2 = 0 ;\n  ptrdiff_t result;\n  \n  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"SwigPyIterator___sub__\" \"', argument \" \"1\"\" of type '\" \"swig::SwigPyIterator const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);\n  if (!SWIG_IsOK(res2)) {\n    SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"SwigPyIterator___sub__\" \"', argument \" \"2\"\" of type '\" \"swig::SwigPyIterator const &\"\"'\"); \n  }\n  if (!argp2) {\n    SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"SwigPyIterator___sub__\" \"', argument \" \"2\"\" of type '\" \"swig::SwigPyIterator const &\"\"'\"); \n  }\n  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);\n  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);\n  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));\n  return resultobj;\nfail:\n  PyErr_Clear();\n  Py_INCREF(Py_NotImplemented);\n  return Py_NotImplemented;\n}\n\n\nSWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {\n  Py_ssize_t argc;\n  PyObject *argv[3] = {\n    0\n  };\n  \n  if (!(argc = SWIG_Python_UnpackTuple(args, \"SwigPyIterator___sub__\", 0, 2, argv))) SWIG_fail;\n  --argc;\n  if (argc == 2) {\n    int _v = 0;\n    void *vptr = 0;\n    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);\n      _v = SWIG_CheckState(res);\n      if (_v) {\n        return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);\n      }\n    }\n  }\n  if (argc == 2) {\n    int _v = 0;\n    void *vptr = 0;\n    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      {\n        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);\n        _v = SWIG_CheckState(res);\n      }\n      if (_v) {\n        return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);\n      }\n    }\n  }\n  \nfail:\n  Py_INCREF(Py_NotImplemented);\n  return Py_NotImplemented;\n}\n\n\nSWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {\n  PyObject *obj;\n  if (!SWIG_Python_UnpackTuple(args, \"swigregister\", 1, 1, &obj)) return NULL;\n  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));\n  return SWIG_Py_Void();\n}\n\nSWIGINTERN PyObject *_wrap_DoubleVector_iterator(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  PyObject **arg2 = (PyObject **) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  swig::SwigPyIterator *result = 0 ;\n  \n  arg2 = &swig_obj[0];\n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_iterator\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___nonzero__(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  bool result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector___nonzero__\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);\n  resultobj = SWIG_From_bool(static_cast< bool >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___bool__(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  bool result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector___bool__\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);\n  resultobj = SWIG_From_bool(static_cast< bool >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___len__(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< double >::size_type result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector___len__\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);\n  resultobj = SWIG_From_size_t(static_cast< size_t >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___getslice__(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::difference_type arg2 ;\n  std::vector< double >::difference_type arg3 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  ptrdiff_t val2 ;\n  int ecode2 = 0 ;\n  ptrdiff_t val3 ;\n  int ecode3 = 0 ;\n  PyObject *swig_obj[3] ;\n  std::vector< double,std::allocator< double > > *result = 0 ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"DoubleVector___getslice__\", 3, 3, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector___getslice__\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"DoubleVector___getslice__\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::difference_type\"\"'\");\n  } \n  arg2 = static_cast< std::vector< double >::difference_type >(val2);\n  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);\n  if (!SWIG_IsOK(ecode3)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode3), \"in method '\" \"DoubleVector___getslice__\" \"', argument \" \"3\"\" of type '\" \"std::vector< double >::difference_type\"\"'\");\n  } \n  arg3 = static_cast< std::vector< double >::difference_type >(val3);\n  try {\n    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));\n  } catch(std::out_of_range &_e) {\n    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());\n  } catch(std::invalid_argument &_e) {\n    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());\n  }\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___setslice____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::difference_type arg2 ;\n  std::vector< double >::difference_type arg3 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  ptrdiff_t val2 ;\n  int ecode2 = 0 ;\n  ptrdiff_t val3 ;\n  int ecode3 = 0 ;\n  \n  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector___setslice__\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"DoubleVector___setslice__\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::difference_type\"\"'\");\n  } \n  arg2 = static_cast< std::vector< double >::difference_type >(val2);\n  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);\n  if (!SWIG_IsOK(ecode3)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode3), \"in method '\" \"DoubleVector___setslice__\" \"', argument \" \"3\"\" of type '\" \"std::vector< double >::difference_type\"\"'\");\n  } \n  arg3 = static_cast< std::vector< double >::difference_type >(val3);\n  try {\n    std_vector_Sl_double_Sg____setslice____SWIG_0(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));\n  } catch(std::out_of_range &_e) {\n    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());\n  } catch(std::invalid_argument &_e) {\n    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());\n  }\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___setslice____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::difference_type arg2 ;\n  std::vector< double >::difference_type arg3 ;\n  std::vector< double,std::allocator< double > > *arg4 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  ptrdiff_t val2 ;\n  int ecode2 = 0 ;\n  ptrdiff_t val3 ;\n  int ecode3 = 0 ;\n  int res4 = SWIG_OLDOBJ ;\n  \n  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector___setslice__\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"DoubleVector___setslice__\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::difference_type\"\"'\");\n  } \n  arg2 = static_cast< std::vector< double >::difference_type >(val2);\n  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);\n  if (!SWIG_IsOK(ecode3)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode3), \"in method '\" \"DoubleVector___setslice__\" \"', argument \" \"3\"\" of type '\" \"std::vector< double >::difference_type\"\"'\");\n  } \n  arg3 = static_cast< std::vector< double >::difference_type >(val3);\n  {\n    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;\n    res4 = swig::asptr(swig_obj[3], &ptr);\n    if (!SWIG_IsOK(res4)) {\n      SWIG_exception_fail(SWIG_ArgError(res4), \"in method '\" \"DoubleVector___setslice__\" \"', argument \" \"4\"\" of type '\" \"std::vector< double,std::allocator< double > > const &\"\"'\"); \n    }\n    if (!ptr) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"DoubleVector___setslice__\" \"', argument \" \"4\"\" of type '\" \"std::vector< double,std::allocator< double > > const &\"\"'\"); \n    }\n    arg4 = ptr;\n  }\n  try {\n    std_vector_Sl_double_Sg____setslice____SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(std::vector< double,std::allocator< double > > const &)*arg4);\n  } catch(std::out_of_range &_e) {\n    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());\n  } catch(std::invalid_argument &_e) {\n    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());\n  }\n  resultobj = SWIG_Py_Void();\n  if (SWIG_IsNewObj(res4)) delete arg4;\n  return resultobj;\nfail:\n  if (SWIG_IsNewObj(res4)) delete arg4;\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___setslice__(PyObject *self, PyObject *args) {\n  Py_ssize_t argc;\n  PyObject *argv[5] = {\n    0\n  };\n  \n  if (!(argc = SWIG_Python_UnpackTuple(args, \"DoubleVector___setslice__\", 0, 4, argv))) SWIG_fail;\n  --argc;\n  if (argc == 3) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      {\n        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);\n        _v = SWIG_CheckState(res);\n      }\n      if (_v) {\n        {\n          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);\n          _v = SWIG_CheckState(res);\n        }\n        if (_v) {\n          return _wrap_DoubleVector___setslice____SWIG_0(self, argc, argv);\n        }\n      }\n    }\n  }\n  if (argc == 4) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      {\n        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);\n        _v = SWIG_CheckState(res);\n      }\n      if (_v) {\n        {\n          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);\n          _v = SWIG_CheckState(res);\n        }\n        if (_v) {\n          int res = swig::asptr(argv[3], (std::vector< double,std::allocator< double > >**)(0));\n          _v = SWIG_CheckState(res);\n          if (_v) {\n            return _wrap_DoubleVector___setslice____SWIG_1(self, argc, argv);\n          }\n        }\n      }\n    }\n  }\n  \nfail:\n  SWIG_Python_RaiseOrModifyTypeError(\"Wrong number or type of arguments for overloaded function 'DoubleVector___setslice__'.\\n\"\n    \"  Possible C/C++ prototypes are:\\n\"\n    \"    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type)\\n\"\n    \"    std::vector< double >::__setslice__(std::vector< double >::difference_type,std::vector< double >::difference_type,std::vector< double,std::allocator< double > > const &)\\n\");\n  return 0;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___delslice__(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::difference_type arg2 ;\n  std::vector< double >::difference_type arg3 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  ptrdiff_t val2 ;\n  int ecode2 = 0 ;\n  ptrdiff_t val3 ;\n  int ecode3 = 0 ;\n  PyObject *swig_obj[3] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"DoubleVector___delslice__\", 3, 3, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector___delslice__\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"DoubleVector___delslice__\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::difference_type\"\"'\");\n  } \n  arg2 = static_cast< std::vector< double >::difference_type >(val2);\n  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);\n  if (!SWIG_IsOK(ecode3)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode3), \"in method '\" \"DoubleVector___delslice__\" \"', argument \" \"3\"\" of type '\" \"std::vector< double >::difference_type\"\"'\");\n  } \n  arg3 = static_cast< std::vector< double >::difference_type >(val3);\n  try {\n    std_vector_Sl_double_Sg____delslice__(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));\n  } catch(std::out_of_range &_e) {\n    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());\n  } catch(std::invalid_argument &_e) {\n    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());\n  }\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::difference_type arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  ptrdiff_t val2 ;\n  int ecode2 = 0 ;\n  \n  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector___delitem__\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"DoubleVector___delitem__\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::difference_type\"\"'\");\n  } \n  arg2 = static_cast< std::vector< double >::difference_type >(val2);\n  try {\n    std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,SWIG_STD_MOVE(arg2));\n  } catch(std::out_of_range &_e) {\n    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());\n  } catch(std::invalid_argument &_e) {\n    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());\n  }\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  PySliceObject *arg2 = (PySliceObject *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  std::vector< double,std::allocator< double > > *result = 0 ;\n  \n  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector___getitem__\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  {\n    if (!PySlice_Check(swig_obj[1])) {\n      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), \"in method '\" \"DoubleVector___getitem__\" \"', argument \" \"2\"\" of type '\" \"PySliceObject *\"\"'\");\n    }\n    arg2 = (PySliceObject *) swig_obj[1];\n  }\n  try {\n    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);\n  } catch(std::out_of_range &_e) {\n    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());\n  } catch(std::invalid_argument &_e) {\n    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());\n  }\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  PySliceObject *arg2 = (PySliceObject *) 0 ;\n  std::vector< double,std::allocator< double > > *arg3 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  int res3 = SWIG_OLDOBJ ;\n  \n  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector___setitem__\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  {\n    if (!PySlice_Check(swig_obj[1])) {\n      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), \"in method '\" \"DoubleVector___setitem__\" \"', argument \" \"2\"\" of type '\" \"PySliceObject *\"\"'\");\n    }\n    arg2 = (PySliceObject *) swig_obj[1];\n  }\n  {\n    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;\n    res3 = swig::asptr(swig_obj[2], &ptr);\n    if (!SWIG_IsOK(res3)) {\n      SWIG_exception_fail(SWIG_ArgError(res3), \"in method '\" \"DoubleVector___setitem__\" \"', argument \" \"3\"\" of type '\" \"std::vector< double,std::allocator< double > > const &\"\"'\"); \n    }\n    if (!ptr) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"DoubleVector___setitem__\" \"', argument \" \"3\"\" of type '\" \"std::vector< double,std::allocator< double > > const &\"\"'\"); \n    }\n    arg3 = ptr;\n  }\n  try {\n    std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);\n  } catch(std::out_of_range &_e) {\n    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());\n  } catch(std::invalid_argument &_e) {\n    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());\n  }\n  resultobj = SWIG_Py_Void();\n  if (SWIG_IsNewObj(res3)) delete arg3;\n  return resultobj;\nfail:\n  if (SWIG_IsNewObj(res3)) delete arg3;\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  PySliceObject *arg2 = (PySliceObject *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  \n  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector___setitem__\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  {\n    if (!PySlice_Check(swig_obj[1])) {\n      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), \"in method '\" \"DoubleVector___setitem__\" \"', argument \" \"2\"\" of type '\" \"PySliceObject *\"\"'\");\n    }\n    arg2 = (PySliceObject *) swig_obj[1];\n  }\n  try {\n    std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2);\n  } catch(std::out_of_range &_e) {\n    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());\n  } catch(std::invalid_argument &_e) {\n    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());\n  }\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  PySliceObject *arg2 = (PySliceObject *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  \n  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector___delitem__\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  {\n    if (!PySlice_Check(swig_obj[1])) {\n      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), \"in method '\" \"DoubleVector___delitem__\" \"', argument \" \"2\"\" of type '\" \"PySliceObject *\"\"'\");\n    }\n    arg2 = (PySliceObject *) swig_obj[1];\n  }\n  try {\n    std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);\n  } catch(std::out_of_range &_e) {\n    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());\n  } catch(std::invalid_argument &_e) {\n    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());\n  }\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___delitem__(PyObject *self, PyObject *args) {\n  Py_ssize_t argc;\n  PyObject *argv[3] = {\n    0\n  };\n  \n  if (!(argc = SWIG_Python_UnpackTuple(args, \"DoubleVector___delitem__\", 0, 2, argv))) SWIG_fail;\n  --argc;\n  if (argc == 2) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      {\n        _v = PySlice_Check(argv[1]);\n      }\n      if (_v) {\n        return _wrap_DoubleVector___delitem____SWIG_1(self, argc, argv);\n      }\n    }\n  }\n  if (argc == 2) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      {\n        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);\n        _v = SWIG_CheckState(res);\n      }\n      if (_v) {\n        return _wrap_DoubleVector___delitem____SWIG_0(self, argc, argv);\n      }\n    }\n  }\n  \nfail:\n  SWIG_Python_RaiseOrModifyTypeError(\"Wrong number or type of arguments for overloaded function 'DoubleVector___delitem__'.\\n\"\n    \"  Possible C/C++ prototypes are:\\n\"\n    \"    std::vector< double >::__delitem__(std::vector< double >::difference_type)\\n\"\n    \"    std::vector< double >::__delitem__(PySliceObject *)\\n\");\n  return 0;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::difference_type arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  ptrdiff_t val2 ;\n  int ecode2 = 0 ;\n  std::vector< double >::value_type *result = 0 ;\n  \n  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector___getitem__\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"DoubleVector___getitem__\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::difference_type\"\"'\");\n  } \n  arg2 = static_cast< std::vector< double >::difference_type >(val2);\n  try {\n    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,SWIG_STD_MOVE(arg2));\n  } catch(std::out_of_range &_e) {\n    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());\n  }\n  resultobj = SWIG_From_double(static_cast< double >(*result));\n  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___getitem__(PyObject *self, PyObject *args) {\n  Py_ssize_t argc;\n  PyObject *argv[3] = {\n    0\n  };\n  \n  if (!(argc = SWIG_Python_UnpackTuple(args, \"DoubleVector___getitem__\", 0, 2, argv))) SWIG_fail;\n  --argc;\n  if (argc == 2) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      {\n        _v = PySlice_Check(argv[1]);\n      }\n      if (_v) {\n        return _wrap_DoubleVector___getitem____SWIG_0(self, argc, argv);\n      }\n    }\n  }\n  if (argc == 2) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      {\n        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);\n        _v = SWIG_CheckState(res);\n      }\n      if (_v) {\n        return _wrap_DoubleVector___getitem____SWIG_1(self, argc, argv);\n      }\n    }\n  }\n  \nfail:\n  SWIG_Python_RaiseOrModifyTypeError(\"Wrong number or type of arguments for overloaded function 'DoubleVector___getitem__'.\\n\"\n    \"  Possible C/C++ prototypes are:\\n\"\n    \"    std::vector< double >::__getitem__(PySliceObject *)\\n\"\n    \"    std::vector< double >::__getitem__(std::vector< double >::difference_type) const\\n\");\n  return 0;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::difference_type arg2 ;\n  std::vector< double >::value_type *arg3 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  ptrdiff_t val2 ;\n  int ecode2 = 0 ;\n  std::vector< double >::value_type temp3 ;\n  double val3 ;\n  int ecode3 = 0 ;\n  \n  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector___setitem__\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"DoubleVector___setitem__\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::difference_type\"\"'\");\n  } \n  arg2 = static_cast< std::vector< double >::difference_type >(val2);\n  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);\n  if (!SWIG_IsOK(ecode3)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode3), \"in method '\" \"DoubleVector___setitem__\" \"', argument \" \"3\"\" of type '\" \"std::vector< double >::value_type\"\"'\");\n  } \n  temp3 = static_cast< std::vector< double >::value_type >(val3);\n  arg3 = &temp3;\n  try {\n    std_vector_Sl_double_Sg____setitem____SWIG_2(arg1,SWIG_STD_MOVE(arg2),(double const &)*arg3);\n  } catch(std::out_of_range &_e) {\n    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());\n  }\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector___setitem__(PyObject *self, PyObject *args) {\n  Py_ssize_t argc;\n  PyObject *argv[4] = {\n    0\n  };\n  \n  if (!(argc = SWIG_Python_UnpackTuple(args, \"DoubleVector___setitem__\", 0, 3, argv))) SWIG_fail;\n  --argc;\n  if (argc == 2) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      {\n        _v = PySlice_Check(argv[1]);\n      }\n      if (_v) {\n        return _wrap_DoubleVector___setitem____SWIG_1(self, argc, argv);\n      }\n    }\n  }\n  if (argc == 3) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      {\n        _v = PySlice_Check(argv[1]);\n      }\n      if (_v) {\n        int res = swig::asptr(argv[2], (std::vector< double,std::allocator< double > >**)(0));\n        _v = SWIG_CheckState(res);\n        if (_v) {\n          return _wrap_DoubleVector___setitem____SWIG_0(self, argc, argv);\n        }\n      }\n    }\n  }\n  if (argc == 3) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      {\n        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);\n        _v = SWIG_CheckState(res);\n      }\n      if (_v) {\n        {\n          int res = SWIG_AsVal_double(argv[2], NULL);\n          _v = SWIG_CheckState(res);\n        }\n        if (_v) {\n          return _wrap_DoubleVector___setitem____SWIG_2(self, argc, argv);\n        }\n      }\n    }\n  }\n  \nfail:\n  SWIG_Python_RaiseOrModifyTypeError(\"Wrong number or type of arguments for overloaded function 'DoubleVector___setitem__'.\\n\"\n    \"  Possible C/C++ prototypes are:\\n\"\n    \"    std::vector< double >::__setitem__(PySliceObject *,std::vector< double,std::allocator< double > > const &)\\n\"\n    \"    std::vector< double >::__setitem__(PySliceObject *)\\n\"\n    \"    std::vector< double >::__setitem__(std::vector< double >::difference_type,std::vector< double >::value_type const &)\\n\");\n  return 0;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_pop(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< double >::value_type result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_pop\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  try {\n    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);\n  } catch(std::out_of_range &_e) {\n    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());\n  }\n  resultobj = SWIG_From_double(static_cast< double >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_append(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::value_type *arg2 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  std::vector< double >::value_type temp2 ;\n  double val2 ;\n  int ecode2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"DoubleVector_append\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_append\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"DoubleVector_append\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::value_type\"\"'\");\n  } \n  temp2 = static_cast< std::vector< double >::value_type >(val2);\n  arg2 = &temp2;\n  std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {\n  PyObject *resultobj = 0;\n  std::vector< double > *result = 0 ;\n  \n  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;\n  result = (std::vector< double > *)new std::vector< double >();\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = 0 ;\n  int res1 = SWIG_OLDOBJ ;\n  std::vector< double > *result = 0 ;\n  \n  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;\n  {\n    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;\n    res1 = swig::asptr(swig_obj[0], &ptr);\n    if (!SWIG_IsOK(res1)) {\n      SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"new_DoubleVector\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > const &\"\"'\"); \n    }\n    if (!ptr) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"new_DoubleVector\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > const &\"\"'\"); \n    }\n    arg1 = ptr;\n  }\n  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );\n  if (SWIG_IsNewObj(res1)) delete arg1;\n  return resultobj;\nfail:\n  if (SWIG_IsNewObj(res1)) delete arg1;\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_empty(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  bool result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_empty\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  result = (bool)((std::vector< double > const *)arg1)->empty();\n  resultobj = SWIG_From_bool(static_cast< bool >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_size(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< double >::size_type result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_size\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  result = ((std::vector< double > const *)arg1)->size();\n  resultobj = SWIG_From_size_t(static_cast< size_t >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_swap(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double > *arg2 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 = 0 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"DoubleVector_swap\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_swap\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );\n  if (!SWIG_IsOK(res2)) {\n    SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"DoubleVector_swap\" \"', argument \" \"2\"\" of type '\" \"std::vector< double > &\"\"'\"); \n  }\n  if (!argp2) {\n    SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"DoubleVector_swap\" \"', argument \" \"2\"\" of type '\" \"std::vector< double > &\"\"'\"); \n  }\n  arg2 = reinterpret_cast< std::vector< double > * >(argp2);\n  (arg1)->swap(*arg2);\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_begin(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< double >::iterator result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_begin\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  result = (arg1)->begin();\n  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),\n    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_end(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< double >::iterator result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_end\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  result = (arg1)->end();\n  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),\n    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_rbegin(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< double >::reverse_iterator result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_rbegin\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  result = (arg1)->rbegin();\n  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),\n    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_rend(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< double >::reverse_iterator result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_rend\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  result = (arg1)->rend();\n  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::reverse_iterator & >(result)),\n    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_clear(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_clear\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  (arg1)->clear();\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_get_allocator(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  SwigValueWrapper< std::allocator< double > > result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_get_allocator\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  result = ((std::vector< double > const *)arg1)->get_allocator();\n  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(result)), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_2(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double >::size_type arg1 ;\n  size_t val1 ;\n  int ecode1 = 0 ;\n  std::vector< double > *result = 0 ;\n  \n  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;\n  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);\n  if (!SWIG_IsOK(ecode1)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode1), \"in method '\" \"new_DoubleVector\" \"', argument \" \"1\"\" of type '\" \"std::vector< double >::size_type\"\"'\");\n  } \n  arg1 = static_cast< std::vector< double >::size_type >(val1);\n  result = (std::vector< double > *)new std::vector< double >(arg1);\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_pop_back(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_pop_back\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  (arg1)->pop_back();\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::size_type arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  size_t val2 ;\n  int ecode2 = 0 ;\n  \n  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_resize\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"DoubleVector_resize\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::size_type\"\"'\");\n  } \n  arg2 = static_cast< std::vector< double >::size_type >(val2);\n  (arg1)->resize(arg2);\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::iterator arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  swig::SwigPyIterator *iter2 = 0 ;\n  int res2 ;\n  std::vector< double >::iterator result;\n  \n  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_erase\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);\n  if (!SWIG_IsOK(res2) || !iter2) {\n    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), \"in method '\" \"DoubleVector_erase\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::iterator\"\"'\");\n  } else {\n    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);\n    if (iter_t) {\n      arg2 = iter_t->get_current();\n    } else {\n      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), \"in method '\" \"DoubleVector_erase\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::iterator\"\"'\");\n    }\n  }\n  result = std_vector_Sl_double_Sg__erase__SWIG_0(arg1,SWIG_STD_MOVE(arg2));\n  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),\n    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::iterator arg2 ;\n  std::vector< double >::iterator arg3 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  swig::SwigPyIterator *iter2 = 0 ;\n  int res2 ;\n  swig::SwigPyIterator *iter3 = 0 ;\n  int res3 ;\n  std::vector< double >::iterator result;\n  \n  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_erase\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);\n  if (!SWIG_IsOK(res2) || !iter2) {\n    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), \"in method '\" \"DoubleVector_erase\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::iterator\"\"'\");\n  } else {\n    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);\n    if (iter_t) {\n      arg2 = iter_t->get_current();\n    } else {\n      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), \"in method '\" \"DoubleVector_erase\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::iterator\"\"'\");\n    }\n  }\n  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);\n  if (!SWIG_IsOK(res3) || !iter3) {\n    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), \"in method '\" \"DoubleVector_erase\" \"', argument \" \"3\"\" of type '\" \"std::vector< double >::iterator\"\"'\");\n  } else {\n    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);\n    if (iter_t) {\n      arg3 = iter_t->get_current();\n    } else {\n      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), \"in method '\" \"DoubleVector_erase\" \"', argument \" \"3\"\" of type '\" \"std::vector< double >::iterator\"\"'\");\n    }\n  }\n  result = std_vector_Sl_double_Sg__erase__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));\n  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),\n    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_erase(PyObject *self, PyObject *args) {\n  Py_ssize_t argc;\n  PyObject *argv[4] = {\n    0\n  };\n  \n  if (!(argc = SWIG_Python_UnpackTuple(args, \"DoubleVector_erase\", 0, 3, argv))) SWIG_fail;\n  --argc;\n  if (argc == 2) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      swig::SwigPyIterator *iter = 0;\n      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);\n      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));\n      if (_v) {\n        return _wrap_DoubleVector_erase__SWIG_0(self, argc, argv);\n      }\n    }\n  }\n  if (argc == 3) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      swig::SwigPyIterator *iter = 0;\n      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);\n      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));\n      if (_v) {\n        swig::SwigPyIterator *iter = 0;\n        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);\n        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));\n        if (_v) {\n          return _wrap_DoubleVector_erase__SWIG_1(self, argc, argv);\n        }\n      }\n    }\n  }\n  \nfail:\n  SWIG_Python_RaiseOrModifyTypeError(\"Wrong number or type of arguments for overloaded function 'DoubleVector_erase'.\\n\"\n    \"  Possible C/C++ prototypes are:\\n\"\n    \"    std::vector< double >::erase(std::vector< double >::iterator)\\n\"\n    \"    std::vector< double >::erase(std::vector< double >::iterator,std::vector< double >::iterator)\\n\");\n  return 0;\n}\n\n\nSWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_3(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double >::size_type arg1 ;\n  std::vector< double >::value_type *arg2 = 0 ;\n  size_t val1 ;\n  int ecode1 = 0 ;\n  std::vector< double >::value_type temp2 ;\n  double val2 ;\n  int ecode2 = 0 ;\n  std::vector< double > *result = 0 ;\n  \n  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;\n  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);\n  if (!SWIG_IsOK(ecode1)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode1), \"in method '\" \"new_DoubleVector\" \"', argument \" \"1\"\" of type '\" \"std::vector< double >::size_type\"\"'\");\n  } \n  arg1 = static_cast< std::vector< double >::size_type >(val1);\n  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"new_DoubleVector\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::value_type\"\"'\");\n  } \n  temp2 = static_cast< std::vector< double >::value_type >(val2);\n  arg2 = &temp2;\n  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_new_DoubleVector(PyObject *self, PyObject *args) {\n  Py_ssize_t argc;\n  PyObject *argv[3] = {\n    0\n  };\n  \n  if (!(argc = SWIG_Python_UnpackTuple(args, \"new_DoubleVector\", 0, 2, argv))) SWIG_fail;\n  --argc;\n  if (argc == 0) {\n    return _wrap_new_DoubleVector__SWIG_0(self, argc, argv);\n  }\n  if (argc == 1) {\n    int _v = 0;\n    {\n      int res = SWIG_AsVal_size_t(argv[0], NULL);\n      _v = SWIG_CheckState(res);\n    }\n    if (_v) {\n      return _wrap_new_DoubleVector__SWIG_2(self, argc, argv);\n    }\n  }\n  if (argc == 1) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      return _wrap_new_DoubleVector__SWIG_1(self, argc, argv);\n    }\n  }\n  if (argc == 2) {\n    int _v = 0;\n    {\n      int res = SWIG_AsVal_size_t(argv[0], NULL);\n      _v = SWIG_CheckState(res);\n    }\n    if (_v) {\n      {\n        int res = SWIG_AsVal_double(argv[1], NULL);\n        _v = SWIG_CheckState(res);\n      }\n      if (_v) {\n        return _wrap_new_DoubleVector__SWIG_3(self, argc, argv);\n      }\n    }\n  }\n  \nfail:\n  SWIG_Python_RaiseOrModifyTypeError(\"Wrong number or type of arguments for overloaded function 'new_DoubleVector'.\\n\"\n    \"  Possible C/C++ prototypes are:\\n\"\n    \"    std::vector< double >::vector()\\n\"\n    \"    std::vector< double >::vector(std::vector< double > const &)\\n\"\n    \"    std::vector< double >::vector(std::vector< double >::size_type)\\n\"\n    \"    std::vector< double >::vector(std::vector< double >::size_type,std::vector< double >::value_type const &)\\n\");\n  return 0;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_push_back(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::value_type *arg2 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  std::vector< double >::value_type temp2 ;\n  double val2 ;\n  int ecode2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"DoubleVector_push_back\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_push_back\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"DoubleVector_push_back\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::value_type\"\"'\");\n  } \n  temp2 = static_cast< std::vector< double >::value_type >(val2);\n  arg2 = &temp2;\n  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_front(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< double >::value_type *result = 0 ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_front\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();\n  resultobj = SWIG_From_double(static_cast< double >(*result));\n  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_back(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< double >::value_type *result = 0 ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_back\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();\n  resultobj = SWIG_From_double(static_cast< double >(*result));\n  (void)swig::container_owner<swig::traits<std::vector< double >::value_type>::category>::back_reference(resultobj, swig_obj[0]);\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_assign(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::size_type arg2 ;\n  std::vector< double >::value_type *arg3 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  size_t val2 ;\n  int ecode2 = 0 ;\n  std::vector< double >::value_type temp3 ;\n  double val3 ;\n  int ecode3 = 0 ;\n  PyObject *swig_obj[3] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"DoubleVector_assign\", 3, 3, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_assign\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"DoubleVector_assign\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::size_type\"\"'\");\n  } \n  arg2 = static_cast< std::vector< double >::size_type >(val2);\n  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);\n  if (!SWIG_IsOK(ecode3)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode3), \"in method '\" \"DoubleVector_assign\" \"', argument \" \"3\"\" of type '\" \"std::vector< double >::value_type\"\"'\");\n  } \n  temp3 = static_cast< std::vector< double >::value_type >(val3);\n  arg3 = &temp3;\n  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::size_type arg2 ;\n  std::vector< double >::value_type *arg3 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  size_t val2 ;\n  int ecode2 = 0 ;\n  std::vector< double >::value_type temp3 ;\n  double val3 ;\n  int ecode3 = 0 ;\n  \n  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_resize\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"DoubleVector_resize\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::size_type\"\"'\");\n  } \n  arg2 = static_cast< std::vector< double >::size_type >(val2);\n  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);\n  if (!SWIG_IsOK(ecode3)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode3), \"in method '\" \"DoubleVector_resize\" \"', argument \" \"3\"\" of type '\" \"std::vector< double >::value_type\"\"'\");\n  } \n  temp3 = static_cast< std::vector< double >::value_type >(val3);\n  arg3 = &temp3;\n  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_resize(PyObject *self, PyObject *args) {\n  Py_ssize_t argc;\n  PyObject *argv[4] = {\n    0\n  };\n  \n  if (!(argc = SWIG_Python_UnpackTuple(args, \"DoubleVector_resize\", 0, 3, argv))) SWIG_fail;\n  --argc;\n  if (argc == 2) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      {\n        int res = SWIG_AsVal_size_t(argv[1], NULL);\n        _v = SWIG_CheckState(res);\n      }\n      if (_v) {\n        return _wrap_DoubleVector_resize__SWIG_0(self, argc, argv);\n      }\n    }\n  }\n  if (argc == 3) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      {\n        int res = SWIG_AsVal_size_t(argv[1], NULL);\n        _v = SWIG_CheckState(res);\n      }\n      if (_v) {\n        {\n          int res = SWIG_AsVal_double(argv[2], NULL);\n          _v = SWIG_CheckState(res);\n        }\n        if (_v) {\n          return _wrap_DoubleVector_resize__SWIG_1(self, argc, argv);\n        }\n      }\n    }\n  }\n  \nfail:\n  SWIG_Python_RaiseOrModifyTypeError(\"Wrong number or type of arguments for overloaded function 'DoubleVector_resize'.\\n\"\n    \"  Possible C/C++ prototypes are:\\n\"\n    \"    std::vector< double >::resize(std::vector< double >::size_type)\\n\"\n    \"    std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)\\n\");\n  return 0;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_0(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::iterator arg2 ;\n  std::vector< double >::value_type *arg3 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  swig::SwigPyIterator *iter2 = 0 ;\n  int res2 ;\n  std::vector< double >::value_type temp3 ;\n  double val3 ;\n  int ecode3 = 0 ;\n  std::vector< double >::iterator result;\n  \n  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_insert\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);\n  if (!SWIG_IsOK(res2) || !iter2) {\n    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), \"in method '\" \"DoubleVector_insert\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::iterator\"\"'\");\n  } else {\n    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);\n    if (iter_t) {\n      arg2 = iter_t->get_current();\n    } else {\n      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), \"in method '\" \"DoubleVector_insert\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::iterator\"\"'\");\n    }\n  }\n  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);\n  if (!SWIG_IsOK(ecode3)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode3), \"in method '\" \"DoubleVector_insert\" \"', argument \" \"3\"\" of type '\" \"std::vector< double >::value_type\"\"'\");\n  } \n  temp3 = static_cast< std::vector< double >::value_type >(val3);\n  arg3 = &temp3;\n  result = std_vector_Sl_double_Sg__insert__SWIG_0(arg1,SWIG_STD_MOVE(arg2),(double const &)*arg3);\n  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),\n    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_1(PyObject *self, Py_ssize_t nobjs, PyObject **swig_obj) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::iterator arg2 ;\n  std::vector< double >::size_type arg3 ;\n  std::vector< double >::value_type *arg4 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  swig::SwigPyIterator *iter2 = 0 ;\n  int res2 ;\n  size_t val3 ;\n  int ecode3 = 0 ;\n  std::vector< double >::value_type temp4 ;\n  double val4 ;\n  int ecode4 = 0 ;\n  \n  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_insert\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);\n  if (!SWIG_IsOK(res2) || !iter2) {\n    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), \"in method '\" \"DoubleVector_insert\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::iterator\"\"'\");\n  } else {\n    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);\n    if (iter_t) {\n      arg2 = iter_t->get_current();\n    } else {\n      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), \"in method '\" \"DoubleVector_insert\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::iterator\"\"'\");\n    }\n  }\n  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);\n  if (!SWIG_IsOK(ecode3)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode3), \"in method '\" \"DoubleVector_insert\" \"', argument \" \"3\"\" of type '\" \"std::vector< double >::size_type\"\"'\");\n  } \n  arg3 = static_cast< std::vector< double >::size_type >(val3);\n  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);\n  if (!SWIG_IsOK(ecode4)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode4), \"in method '\" \"DoubleVector_insert\" \"', argument \" \"4\"\" of type '\" \"std::vector< double >::value_type\"\"'\");\n  } \n  temp4 = static_cast< std::vector< double >::value_type >(val4);\n  arg4 = &temp4;\n  std_vector_Sl_double_Sg__insert__SWIG_1(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(double const &)*arg4);\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_insert(PyObject *self, PyObject *args) {\n  Py_ssize_t argc;\n  PyObject *argv[5] = {\n    0\n  };\n  \n  if (!(argc = SWIG_Python_UnpackTuple(args, \"DoubleVector_insert\", 0, 4, argv))) SWIG_fail;\n  --argc;\n  if (argc == 3) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      swig::SwigPyIterator *iter = 0;\n      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);\n      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));\n      if (_v) {\n        {\n          int res = SWIG_AsVal_double(argv[2], NULL);\n          _v = SWIG_CheckState(res);\n        }\n        if (_v) {\n          return _wrap_DoubleVector_insert__SWIG_0(self, argc, argv);\n        }\n      }\n    }\n  }\n  if (argc == 4) {\n    int _v = 0;\n    int res = swig::asptr(argv[0], (std::vector< double,std::allocator< double > >**)(0));\n    _v = SWIG_CheckState(res);\n    if (_v) {\n      swig::SwigPyIterator *iter = 0;\n      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);\n      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));\n      if (_v) {\n        {\n          int res = SWIG_AsVal_size_t(argv[2], NULL);\n          _v = SWIG_CheckState(res);\n        }\n        if (_v) {\n          {\n            int res = SWIG_AsVal_double(argv[3], NULL);\n            _v = SWIG_CheckState(res);\n          }\n          if (_v) {\n            return _wrap_DoubleVector_insert__SWIG_1(self, argc, argv);\n          }\n        }\n      }\n    }\n  }\n  \nfail:\n  SWIG_Python_RaiseOrModifyTypeError(\"Wrong number or type of arguments for overloaded function 'DoubleVector_insert'.\\n\"\n    \"  Possible C/C++ prototypes are:\\n\"\n    \"    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::value_type const &)\\n\"\n    \"    std::vector< double >::insert(std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\\n\");\n  return 0;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_reserve(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  std::vector< double >::size_type arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  size_t val2 ;\n  int ecode2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"DoubleVector_reserve\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_reserve\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"DoubleVector_reserve\" \"', argument \" \"2\"\" of type '\" \"std::vector< double >::size_type\"\"'\");\n  } \n  arg2 = static_cast< std::vector< double >::size_type >(val2);\n  (arg1)->reserve(arg2);\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_DoubleVector_capacity(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< double >::size_type result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"DoubleVector_capacity\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > const *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  result = ((std::vector< double > const *)arg1)->capacity();\n  resultobj = SWIG_From_size_t(static_cast< size_t >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_delete_DoubleVector(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  std::vector< double > *arg1 = (std::vector< double > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"delete_DoubleVector\" \"', argument \" \"1\"\" of type '\" \"std::vector< double > *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< std::vector< double > * >(argp1);\n  delete arg1;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *DoubleVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {\n  PyObject *obj;\n  if (!SWIG_Python_UnpackTuple(args, \"swigregister\", 1, 1, &obj)) return NULL;\n  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));\n  return SWIG_Py_Void();\n}\n\nSWIGINTERN PyObject *DoubleVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {\n  return SWIG_Python_InitShadowInstance(args);\n}\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_data_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_data_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_data_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  {\n    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_GenericSignalT_SimpleVecWrapperT_double_t_true_t,  0  | 0);\n    if (!SWIG_IsOK(res2)) {\n      SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_data_set\" \"', argument \" \"2\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType\"\"'\"); \n    }  \n    if (!argp2) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"InstFreqNormSincExtractor_data_set\" \"', argument \" \"2\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType\"\"'\");\n    } else {\n      NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * temp = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * >(argp2);\n      arg2 = *temp;\n      if (SWIG_IsNewObj(res2)) delete temp;\n    }\n  }\n  if (arg1) (arg1)->data = arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_data_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_data_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result =  ((arg1)->data);\n  resultobj = SWIG_NewPointerObj((new NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType(result)), SWIGTYPE_p_GenericSignalT_SimpleVecWrapperT_double_t_true_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_data_buffer_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_data_buffer_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_data_buffer_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  {\n    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_GenericSignalT_SimpleVecWrapperT_double_t_true_t,  0  | 0);\n    if (!SWIG_IsOK(res2)) {\n      SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_data_buffer_set\" \"', argument \" \"2\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType\"\"'\"); \n    }  \n    if (!argp2) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"InstFreqNormSincExtractor_data_buffer_set\" \"', argument \" \"2\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType\"\"'\");\n    } else {\n      NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * temp = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * >(argp2);\n      arg2 = *temp;\n      if (SWIG_IsNewObj(res2)) delete temp;\n    }\n  }\n  if (arg1) (arg1)->data_buffer = arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_data_buffer_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_data_buffer_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result =  ((arg1)->data_buffer);\n  resultobj = SWIG_NewPointerObj((new NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType(result)), SWIGTYPE_p_GenericSignalT_SimpleVecWrapperT_double_t_true_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_compute_buffer_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_compute_buffer_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_compute_buffer_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  {\n    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_GenericSignalT_SimpleVecWrapperT_double_t_true_t,  0  | 0);\n    if (!SWIG_IsOK(res2)) {\n      SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_compute_buffer_set\" \"', argument \" \"2\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType\"\"'\"); \n    }  \n    if (!argp2) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"InstFreqNormSincExtractor_compute_buffer_set\" \"', argument \" \"2\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType\"\"'\");\n    } else {\n      NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * temp = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * >(argp2);\n      arg2 = *temp;\n      if (SWIG_IsNewObj(res2)) delete temp;\n    }\n  }\n  if (arg1) (arg1)->compute_buffer = arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_compute_buffer_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_compute_buffer_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result =  ((arg1)->compute_buffer);\n  resultobj = SWIG_NewPointerObj((new NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType(result)), SWIGTYPE_p_GenericSignalT_SimpleVecWrapperT_double_t_true_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_compute_buffer2_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_compute_buffer2_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_compute_buffer2_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  {\n    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_GenericSignalT_SimpleVecWrapperT_double_t_true_t,  0  | 0);\n    if (!SWIG_IsOK(res2)) {\n      SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_compute_buffer2_set\" \"', argument \" \"2\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType\"\"'\"); \n    }  \n    if (!argp2) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"InstFreqNormSincExtractor_compute_buffer2_set\" \"', argument \" \"2\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType\"\"'\");\n    } else {\n      NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * temp = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * >(argp2);\n      arg2 = *temp;\n      if (SWIG_IsNewObj(res2)) delete temp;\n    }\n  }\n  if (arg1) (arg1)->compute_buffer2 = arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_compute_buffer2_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_compute_buffer2_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result =  ((arg1)->compute_buffer2);\n  resultobj = SWIG_NewPointerObj((new NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType(result)), SWIGTYPE_p_GenericSignalT_SimpleVecWrapperT_double_t_true_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_modes_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *arg2 = (std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 = 0 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_modes_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_modes_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res2)) {\n    SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_modes_set\" \"', argument \" \"2\"\" of type '\" \"std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *\"\"'\"); \n  }\n  arg2 = reinterpret_cast< std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > * >(argp2);\n  if (arg1) (arg1)->modes = *arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_modes_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *result = 0 ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_modes_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result = (std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *)& ((arg1)->modes);\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t, 0 |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_inst_freqs_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *arg2 = (std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 = 0 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_inst_freqs_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_inst_freqs_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res2)) {\n    SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_inst_freqs_set\" \"', argument \" \"2\"\" of type '\" \"std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *\"\"'\"); \n  }\n  arg2 = reinterpret_cast< std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > * >(argp2);\n  if (arg1) (arg1)->inst_freqs = *arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_inst_freqs_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *result = 0 ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_inst_freqs_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result = (std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *)& ((arg1)->inst_freqs);\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t, 0 |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_inst_ampls_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *arg2 = (std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 = 0 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_inst_ampls_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_inst_ampls_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res2)) {\n    SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_inst_ampls_set\" \"', argument \" \"2\"\" of type '\" \"std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *\"\"'\"); \n  }\n  arg2 = reinterpret_cast< std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > * >(argp2);\n  if (arg1) (arg1)->inst_ampls = *arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_inst_ampls_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *result = 0 ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_inst_ampls_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result = (std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *)& ((arg1)->inst_ampls);\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t, 0 |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_phases_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *arg2 = (std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 = 0 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_phases_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_phases_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res2)) {\n    SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_phases_set\" \"', argument \" \"2\"\" of type '\" \"std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *\"\"'\"); \n  }\n  arg2 = reinterpret_cast< std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > * >(argp2);\n  if (arg1) (arg1)->phases = *arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_phases_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *result = 0 ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_phases_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result = (std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *)& ((arg1)->phases);\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t, 0 |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_freq_conv_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 = 0 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_freq_conv_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_freq_conv_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res2)) {\n    SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_freq_conv_set\" \"', argument \" \"2\"\" of type '\" \"std::vector< double,std::allocator< double > > *\"\"'\"); \n  }\n  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);\n  if (arg1) (arg1)->freq_conv = *arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_freq_conv_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< double,std::allocator< double > > *result = 0 ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_freq_conv_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->freq_conv);\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_freq_conv_image_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  std::vector< double,std::allocator< double > > *arg2 = (std::vector< double,std::allocator< double > > *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 = 0 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_freq_conv_image_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_freq_conv_image_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  if (!SWIG_IsOK(res2)) {\n    SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_freq_conv_image_set\" \"', argument \" \"2\"\" of type '\" \"std::vector< double,std::allocator< double > > *\"\"'\"); \n  }\n  arg2 = reinterpret_cast< std::vector< double,std::allocator< double > > * >(argp2);\n  if (arg1) (arg1)->freq_conv_image = *arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_freq_conv_image_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  std::vector< double,std::allocator< double > > *result = 0 ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_freq_conv_image_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result = (std::vector< double,std::allocator< double > > *)& ((arg1)->freq_conv_image);\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_period_muller_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  double arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  double val2 ;\n  int ecode2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_period_muller_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_period_muller_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"InstFreqNormSincExtractor_period_muller_set\" \"', argument \" \"2\"\" of type '\" \"double\"\"'\");\n  } \n  arg2 = static_cast< double >(val2);\n  if (arg1) (arg1)->period_muller = arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_period_muller_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  double result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_period_muller_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result = (double) ((arg1)->period_muller);\n  resultobj = SWIG_From_double(static_cast< double >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_locality_coeff_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  double arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  double val2 ;\n  int ecode2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_locality_coeff_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_locality_coeff_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"InstFreqNormSincExtractor_locality_coeff_set\" \"', argument \" \"2\"\" of type '\" \"double\"\"'\");\n  } \n  arg2 = static_cast< double >(val2);\n  if (arg1) (arg1)->locality_coeff = arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_locality_coeff_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  double result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_locality_coeff_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result = (double) ((arg1)->locality_coeff);\n  resultobj = SWIG_From_double(static_cast< double >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_integrator_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint > arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_integrator_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_integrator_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  {\n    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t,  0  | 0);\n    if (!SWIG_IsOK(res2)) {\n      SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_integrator_set\" \"', argument \" \"2\"\" of type '\" \"INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >\"\"'\"); \n    }  \n    if (!argp2) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"InstFreqNormSincExtractor_integrator_set\" \"', argument \" \"2\"\" of type '\" \"INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >\"\"'\");\n    } else {\n      INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint > * temp = reinterpret_cast< INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint > * >(argp2);\n      arg2 = *temp;\n      if (SWIG_IsNewObj(res2)) delete temp;\n    }\n  }\n  if (arg1) (arg1)->integrator = arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_integrator_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint > result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_integrator_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result =  ((arg1)->integrator);\n  resultobj = SWIG_NewPointerObj((new INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >(result)), SWIGTYPE_p_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_derivator_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_derivator_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_derivator_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  {\n    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t,  0  | 0);\n    if (!SWIG_IsOK(res2)) {\n      SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_derivator_set\" \"', argument \" \"2\"\" of type '\" \"DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward >\"\"'\"); \n    }  \n    if (!argp2) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"InstFreqNormSincExtractor_derivator_set\" \"', argument \" \"2\"\" of type '\" \"DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward >\"\"'\");\n    } else {\n      DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > * temp = reinterpret_cast< DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > * >(argp2);\n      arg2 = *temp;\n      if (SWIG_IsNewObj(res2)) delete temp;\n    }\n  }\n  if (arg1) (arg1)->derivator = arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_derivator_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_derivator_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result =  ((arg1)->derivator);\n  resultobj = SWIG_NewPointerObj((new DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward >(result)), SWIGTYPE_p_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_phase_computer_der_atan_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::DerArctg,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > > arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_phase_computer_der_atan_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_phase_computer_der_atan_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  {\n    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__DerArctg_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t,  0  | 0);\n    if (!SWIG_IsOK(res2)) {\n      SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_phase_computer_der_atan_set\" \"', argument \" \"2\"\" of type '\" \"PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::DerArctg,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > >\"\"'\"); \n    }  \n    if (!argp2) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"InstFreqNormSincExtractor_phase_computer_der_atan_set\" \"', argument \" \"2\"\" of type '\" \"PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::DerArctg,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > >\"\"'\");\n    } else {\n      PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::DerArctg,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > > * temp = reinterpret_cast< PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::DerArctg,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > > * >(argp2);\n      arg2 = *temp;\n      if (SWIG_IsNewObj(res2)) delete temp;\n    }\n  }\n  if (arg1) (arg1)->phase_computer_der_atan = arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_phase_computer_der_atan_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::DerArctg,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > > result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_phase_computer_der_atan_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result =  ((arg1)->phase_computer_der_atan);\n  resultobj = SWIG_NewPointerObj((new PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::DerArctg,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > >(result)), SWIGTYPE_p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__DerArctg_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_phase_computer_simple_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::Simple,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > > arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_phase_computer_simple_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_phase_computer_simple_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  {\n    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__Simple_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t,  0  | 0);\n    if (!SWIG_IsOK(res2)) {\n      SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_phase_computer_simple_set\" \"', argument \" \"2\"\" of type '\" \"PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::Simple,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > >\"\"'\"); \n    }  \n    if (!argp2) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"InstFreqNormSincExtractor_phase_computer_simple_set\" \"', argument \" \"2\"\" of type '\" \"PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::Simple,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > >\"\"'\");\n    } else {\n      PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::Simple,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > > * temp = reinterpret_cast< PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::Simple,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > > * >(argp2);\n      arg2 = *temp;\n      if (SWIG_IsNewObj(res2)) delete temp;\n    }\n  }\n  if (arg1) (arg1)->phase_computer_simple = arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_phase_computer_simple_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::Simple,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > > result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_phase_computer_simple_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result =  ((arg1)->phase_computer_simple);\n  resultobj = SWIG_NewPointerObj((new PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::Simple,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > >(result)), SWIGTYPE_p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__Simple_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_inst_freq_computer_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  INST_FREQ_COMPUTERS::ComputedOnPhase< double,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward >,INST_FREQ_COMPUTERS::InstFreqDerivativeBasedKind::TimeAverage > arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_inst_freq_computer_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_inst_freq_computer_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  {\n    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_INST_FREQ_COMPUTERS__ComputedOnPhaseT_double_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_INST_FREQ_COMPUTERS__InstFreqDerivativeBasedKind__TimeAverage_t,  0  | 0);\n    if (!SWIG_IsOK(res2)) {\n      SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_inst_freq_computer_set\" \"', argument \" \"2\"\" of type '\" \"INST_FREQ_COMPUTERS::ComputedOnPhase< double,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward >,INST_FREQ_COMPUTERS::InstFreqDerivativeBasedKind::TimeAverage >\"\"'\"); \n    }  \n    if (!argp2) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"InstFreqNormSincExtractor_inst_freq_computer_set\" \"', argument \" \"2\"\" of type '\" \"INST_FREQ_COMPUTERS::ComputedOnPhase< double,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward >,INST_FREQ_COMPUTERS::InstFreqDerivativeBasedKind::TimeAverage >\"\"'\");\n    } else {\n      INST_FREQ_COMPUTERS::ComputedOnPhase< double,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward >,INST_FREQ_COMPUTERS::InstFreqDerivativeBasedKind::TimeAverage > * temp = reinterpret_cast< INST_FREQ_COMPUTERS::ComputedOnPhase< double,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward >,INST_FREQ_COMPUTERS::InstFreqDerivativeBasedKind::TimeAverage > * >(argp2);\n      arg2 = *temp;\n      if (SWIG_IsNewObj(res2)) delete temp;\n    }\n  }\n  if (arg1) (arg1)->inst_freq_computer = arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_inst_freq_computer_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  INST_FREQ_COMPUTERS::ComputedOnPhase< double,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward >,INST_FREQ_COMPUTERS::InstFreqDerivativeBasedKind::TimeAverage > result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_inst_freq_computer_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result =  ((arg1)->inst_freq_computer);\n  resultobj = SWIG_NewPointerObj((new INST_FREQ_COMPUTERS::ComputedOnPhase< double,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward >,INST_FREQ_COMPUTERS::InstFreqDerivativeBasedKind::TimeAverage >(result)), SWIGTYPE_p_INST_FREQ_COMPUTERS__ComputedOnPhaseT_double_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_INST_FREQ_COMPUTERS__InstFreqDerivativeBasedKind__TimeAverage_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_inst_ampl_computer_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  INST_AMPL_COMPUTERS::HilbertTransformBased< UTILITY_MATH::HTKind::Mull > arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_inst_ampl_computer_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_inst_ampl_computer_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  {\n    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_INST_AMPL_COMPUTERS__HilbertTransformBasedT_UTILITY_MATH__HTKind__Mull_t,  0  | 0);\n    if (!SWIG_IsOK(res2)) {\n      SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_inst_ampl_computer_set\" \"', argument \" \"2\"\" of type '\" \"INST_AMPL_COMPUTERS::HilbertTransformBased< UTILITY_MATH::HTKind::Mull >\"\"'\"); \n    }  \n    if (!argp2) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"InstFreqNormSincExtractor_inst_ampl_computer_set\" \"', argument \" \"2\"\" of type '\" \"INST_AMPL_COMPUTERS::HilbertTransformBased< UTILITY_MATH::HTKind::Mull >\"\"'\");\n    } else {\n      INST_AMPL_COMPUTERS::HilbertTransformBased< UTILITY_MATH::HTKind::Mull > * temp = reinterpret_cast< INST_AMPL_COMPUTERS::HilbertTransformBased< UTILITY_MATH::HTKind::Mull > * >(argp2);\n      arg2 = *temp;\n      if (SWIG_IsNewObj(res2)) delete temp;\n    }\n  }\n  if (arg1) (arg1)->inst_ampl_computer = arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_inst_ampl_computer_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  INST_AMPL_COMPUTERS::HilbertTransformBased< UTILITY_MATH::HTKind::Mull > result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_inst_ampl_computer_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result =  ((arg1)->inst_ampl_computer);\n  resultobj = SWIG_NewPointerObj((new INST_AMPL_COMPUTERS::HilbertTransformBased< UTILITY_MATH::HTKind::Mull >(result)), SWIGTYPE_p_INST_AMPL_COMPUTERS__HilbertTransformBasedT_UTILITY_MATH__HTKind__Mull_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_non_opt_filter_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  FILTERS::NonOptPeriodBasedFilter< double,FILTERS::FilteringType::AverageBased,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,FILTERS::InstFreqKind::Average > arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_non_opt_filter_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_non_opt_filter_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  {\n    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FILTERS__NonOptPeriodBasedFilterT_double_FILTERS__FilteringType__AverageBased_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_FILTERS__InstFreqKind__Average_t,  0  | 0);\n    if (!SWIG_IsOK(res2)) {\n      SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_non_opt_filter_set\" \"', argument \" \"2\"\" of type '\" \"FILTERS::NonOptPeriodBasedFilter< double,FILTERS::FilteringType::AverageBased,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,FILTERS::InstFreqKind::Average >\"\"'\"); \n    }  \n    if (!argp2) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"InstFreqNormSincExtractor_non_opt_filter_set\" \"', argument \" \"2\"\" of type '\" \"FILTERS::NonOptPeriodBasedFilter< double,FILTERS::FilteringType::AverageBased,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,FILTERS::InstFreqKind::Average >\"\"'\");\n    } else {\n      FILTERS::NonOptPeriodBasedFilter< double,FILTERS::FilteringType::AverageBased,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,FILTERS::InstFreqKind::Average > * temp = reinterpret_cast< FILTERS::NonOptPeriodBasedFilter< double,FILTERS::FilteringType::AverageBased,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,FILTERS::InstFreqKind::Average > * >(argp2);\n      arg2 = *temp;\n      if (SWIG_IsNewObj(res2)) delete temp;\n    }\n  }\n  if (arg1) (arg1)->non_opt_filter = arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_non_opt_filter_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  FILTERS::NonOptPeriodBasedFilter< double,FILTERS::FilteringType::AverageBased,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,FILTERS::InstFreqKind::Average > result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_non_opt_filter_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result =  ((arg1)->non_opt_filter);\n  resultobj = SWIG_NewPointerObj((new FILTERS::NonOptPeriodBasedFilter< double,FILTERS::FilteringType::AverageBased,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,FILTERS::InstFreqKind::Average >(result)), SWIGTYPE_p_FILTERS__NonOptPeriodBasedFilterT_double_FILTERS__FilteringType__AverageBased_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_FILTERS__InstFreqKind__Average_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_filter_set(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  FILTERS::SincResLocalFilter< double > arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  void *argp2 ;\n  int res2 = 0 ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_filter_set\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_filter_set\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  {\n    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_FILTERS__SincResLocalFilterT_double_t,  0  | 0);\n    if (!SWIG_IsOK(res2)) {\n      SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_filter_set\" \"', argument \" \"2\"\" of type '\" \"FILTERS::SincResLocalFilter< double >\"\"'\"); \n    }  \n    if (!argp2) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"InstFreqNormSincExtractor_filter_set\" \"', argument \" \"2\"\" of type '\" \"FILTERS::SincResLocalFilter< double >\"\"'\");\n    } else {\n      FILTERS::SincResLocalFilter< double > * temp = reinterpret_cast< FILTERS::SincResLocalFilter< double > * >(argp2);\n      arg2 = *temp;\n      if (SWIG_IsNewObj(res2)) delete temp;\n    }\n  }\n  if (arg1) (arg1)->filter = arg2;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_filter_get(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  FILTERS::SincResLocalFilter< double > result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_filter_get\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result =  ((arg1)->filter);\n  resultobj = SWIG_NewPointerObj((new FILTERS::SincResLocalFilter< double >(result)), SWIGTYPE_p_FILTERS__SincResLocalFilterT_double_t, SWIG_POINTER_OWN |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_getModesCount(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  int result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_getModesCount\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result = (int)(arg1)->getModesCount();\n  resultobj = SWIG_From_int(static_cast< int >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_getDataSize(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  int result;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_getDataSize\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  result = (int)(arg1)->getDataSize();\n  resultobj = SWIG_From_int(static_cast< int >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_getMode(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  int arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  int val2 ;\n  int ecode2 = 0 ;\n  PyObject *swig_obj[2] ;\n  std::vector< double,std::allocator< double > > result;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_getMode\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_getMode\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"InstFreqNormSincExtractor_getMode\" \"', argument \" \"2\"\" of type '\" \"int\"\"'\");\n  } \n  arg2 = static_cast< int >(val2);\n  result = (arg1)->getMode(arg2);\n  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_getInstFreq(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  int arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  int val2 ;\n  int ecode2 = 0 ;\n  PyObject *swig_obj[2] ;\n  std::vector< double,std::allocator< double > > result;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_getInstFreq\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_getInstFreq\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"InstFreqNormSincExtractor_getInstFreq\" \"', argument \" \"2\"\" of type '\" \"int\"\"'\");\n  } \n  arg2 = static_cast< int >(val2);\n  result = (arg1)->getInstFreq(arg2);\n  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_getInstAmpl(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  int arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  int val2 ;\n  int ecode2 = 0 ;\n  PyObject *swig_obj[2] ;\n  std::vector< double,std::allocator< double > > result;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_getInstAmpl\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_getInstAmpl\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"InstFreqNormSincExtractor_getInstAmpl\" \"', argument \" \"2\"\" of type '\" \"int\"\"'\");\n  } \n  arg2 = static_cast< int >(val2);\n  result = (arg1)->getInstAmpl(arg2);\n  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_getPhase(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  int arg2 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  int val2 ;\n  int ecode2 = 0 ;\n  PyObject *swig_obj[2] ;\n  std::vector< double,std::allocator< double > > result;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_getPhase\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_getPhase\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);\n  if (!SWIG_IsOK(ecode2)) {\n    SWIG_exception_fail(SWIG_ArgError(ecode2), \"in method '\" \"InstFreqNormSincExtractor_getPhase\" \"', argument \" \"2\"\" of type '\" \"int\"\"'\");\n  } \n  arg2 = static_cast< int >(val2);\n  result = (arg1)->getPhase(arg2);\n  resultobj = swig::from(static_cast< std::vector< double,std::allocator< double > > >(result));\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_InstFreqNormSincExtractor_computeVec(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  std::vector< double,std::allocator< double > > *arg2 = 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  int res2 = SWIG_OLDOBJ ;\n  PyObject *swig_obj[2] ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"InstFreqNormSincExtractor_computeVec\", 2, 2, swig_obj)) SWIG_fail;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0 |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"InstFreqNormSincExtractor_computeVec\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  {\n    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;\n    res2 = swig::asptr(swig_obj[1], &ptr);\n    if (!SWIG_IsOK(res2)) {\n      SWIG_exception_fail(SWIG_ArgError(res2), \"in method '\" \"InstFreqNormSincExtractor_computeVec\" \"', argument \" \"2\"\" of type '\" \"std::vector< double,std::allocator< double > > const &\"\"'\"); \n    }\n    if (!ptr) {\n      SWIG_exception_fail(SWIG_ValueError, \"invalid null reference \" \"in method '\" \"InstFreqNormSincExtractor_computeVec\" \"', argument \" \"2\"\" of type '\" \"std::vector< double,std::allocator< double > > const &\"\"'\"); \n    }\n    arg2 = ptr;\n  }\n  (arg1)->SWIGTEMPLATEDISAMBIGUATOR compute< std::vector< double > >((std::vector< double,std::allocator< double > > const &)*arg2);\n  resultobj = SWIG_Py_Void();\n  if (SWIG_IsNewObj(res2)) delete arg2;\n  return resultobj;\nfail:\n  if (SWIG_IsNewObj(res2)) delete arg2;\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_new_InstFreqNormSincExtractor(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *result = 0 ;\n  \n  if (!SWIG_Python_UnpackTuple(args, \"new_InstFreqNormSincExtractor\", 0, 0, 0)) SWIG_fail;\n  result = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *)new NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor();\n  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, SWIG_POINTER_NEW |  0 );\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *_wrap_delete_InstFreqNormSincExtractor(PyObject *self, PyObject *args) {\n  PyObject *resultobj = 0;\n  NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *arg1 = (NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *) 0 ;\n  void *argp1 = 0 ;\n  int res1 = 0 ;\n  PyObject *swig_obj[1] ;\n  \n  if (!args) SWIG_fail;\n  swig_obj[0] = args;\n  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, SWIG_POINTER_DISOWN |  0 );\n  if (!SWIG_IsOK(res1)) {\n    SWIG_exception_fail(SWIG_ArgError(res1), \"in method '\" \"delete_InstFreqNormSincExtractor\" \"', argument \" \"1\"\" of type '\" \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\"\"'\"); \n  }\n  arg1 = reinterpret_cast< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor * >(argp1);\n  delete arg1;\n  resultobj = SWIG_Py_Void();\n  return resultobj;\nfail:\n  return NULL;\n}\n\n\nSWIGINTERN PyObject *InstFreqNormSincExtractor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {\n  PyObject *obj;\n  if (!SWIG_Python_UnpackTuple(args, \"swigregister\", 1, 1, &obj)) return NULL;\n  SWIG_TypeNewClientData(SWIGTYPE_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, SWIG_NewClientData(obj));\n  return SWIG_Py_Void();\n}\n\nSWIGINTERN PyObject *InstFreqNormSincExtractor_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {\n  return SWIG_Python_InitShadowInstance(args);\n}\n\nstatic PyMethodDef SwigMethods[] = {\n\t { \"delete_SwigPyIterator\", _wrap_delete_SwigPyIterator, METH_O, NULL},\n\t { \"SwigPyIterator_value\", _wrap_SwigPyIterator_value, METH_O, NULL},\n\t { \"SwigPyIterator_incr\", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},\n\t { \"SwigPyIterator_decr\", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},\n\t { \"SwigPyIterator_distance\", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},\n\t { \"SwigPyIterator_equal\", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},\n\t { \"SwigPyIterator_copy\", _wrap_SwigPyIterator_copy, METH_O, NULL},\n\t { \"SwigPyIterator_next\", _wrap_SwigPyIterator_next, METH_O, NULL},\n\t { \"SwigPyIterator___next__\", _wrap_SwigPyIterator___next__, METH_O, NULL},\n\t { \"SwigPyIterator_previous\", _wrap_SwigPyIterator_previous, METH_O, NULL},\n\t { \"SwigPyIterator_advance\", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},\n\t { \"SwigPyIterator___eq__\", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},\n\t { \"SwigPyIterator___ne__\", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},\n\t { \"SwigPyIterator___iadd__\", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},\n\t { \"SwigPyIterator___isub__\", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},\n\t { \"SwigPyIterator___add__\", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},\n\t { \"SwigPyIterator___sub__\", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},\n\t { \"SwigPyIterator_swigregister\", SwigPyIterator_swigregister, METH_O, NULL},\n\t { \"DoubleVector_iterator\", _wrap_DoubleVector_iterator, METH_O, NULL},\n\t { \"DoubleVector___nonzero__\", _wrap_DoubleVector___nonzero__, METH_O, NULL},\n\t { \"DoubleVector___bool__\", _wrap_DoubleVector___bool__, METH_O, NULL},\n\t { \"DoubleVector___len__\", _wrap_DoubleVector___len__, METH_O, NULL},\n\t { \"DoubleVector___getslice__\", _wrap_DoubleVector___getslice__, METH_VARARGS, NULL},\n\t { \"DoubleVector___setslice__\", _wrap_DoubleVector___setslice__, METH_VARARGS, NULL},\n\t { \"DoubleVector___delslice__\", _wrap_DoubleVector___delslice__, METH_VARARGS, NULL},\n\t { \"DoubleVector___delitem__\", _wrap_DoubleVector___delitem__, METH_VARARGS, NULL},\n\t { \"DoubleVector___getitem__\", _wrap_DoubleVector___getitem__, METH_VARARGS, NULL},\n\t { \"DoubleVector___setitem__\", _wrap_DoubleVector___setitem__, METH_VARARGS, NULL},\n\t { \"DoubleVector_pop\", _wrap_DoubleVector_pop, METH_O, NULL},\n\t { \"DoubleVector_append\", _wrap_DoubleVector_append, METH_VARARGS, NULL},\n\t { \"DoubleVector_empty\", _wrap_DoubleVector_empty, METH_O, NULL},\n\t { \"DoubleVector_size\", _wrap_DoubleVector_size, METH_O, NULL},\n\t { \"DoubleVector_swap\", _wrap_DoubleVector_swap, METH_VARARGS, NULL},\n\t { \"DoubleVector_begin\", _wrap_DoubleVector_begin, METH_O, NULL},\n\t { \"DoubleVector_end\", _wrap_DoubleVector_end, METH_O, NULL},\n\t { \"DoubleVector_rbegin\", _wrap_DoubleVector_rbegin, METH_O, NULL},\n\t { \"DoubleVector_rend\", _wrap_DoubleVector_rend, METH_O, NULL},\n\t { \"DoubleVector_clear\", _wrap_DoubleVector_clear, METH_O, NULL},\n\t { \"DoubleVector_get_allocator\", _wrap_DoubleVector_get_allocator, METH_O, NULL},\n\t { \"DoubleVector_pop_back\", _wrap_DoubleVector_pop_back, METH_O, NULL},\n\t { \"DoubleVector_erase\", _wrap_DoubleVector_erase, METH_VARARGS, NULL},\n\t { \"new_DoubleVector\", _wrap_new_DoubleVector, METH_VARARGS, NULL},\n\t { \"DoubleVector_push_back\", _wrap_DoubleVector_push_back, METH_VARARGS, NULL},\n\t { \"DoubleVector_front\", _wrap_DoubleVector_front, METH_O, NULL},\n\t { \"DoubleVector_back\", _wrap_DoubleVector_back, METH_O, NULL},\n\t { \"DoubleVector_assign\", _wrap_DoubleVector_assign, METH_VARARGS, NULL},\n\t { \"DoubleVector_resize\", _wrap_DoubleVector_resize, METH_VARARGS, NULL},\n\t { \"DoubleVector_insert\", _wrap_DoubleVector_insert, METH_VARARGS, NULL},\n\t { \"DoubleVector_reserve\", _wrap_DoubleVector_reserve, METH_VARARGS, NULL},\n\t { \"DoubleVector_capacity\", _wrap_DoubleVector_capacity, METH_O, NULL},\n\t { \"delete_DoubleVector\", _wrap_delete_DoubleVector, METH_O, NULL},\n\t { \"DoubleVector_swigregister\", DoubleVector_swigregister, METH_O, NULL},\n\t { \"DoubleVector_swiginit\", DoubleVector_swiginit, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_data_set\", _wrap_InstFreqNormSincExtractor_data_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_data_get\", _wrap_InstFreqNormSincExtractor_data_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_data_buffer_set\", _wrap_InstFreqNormSincExtractor_data_buffer_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_data_buffer_get\", _wrap_InstFreqNormSincExtractor_data_buffer_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_compute_buffer_set\", _wrap_InstFreqNormSincExtractor_compute_buffer_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_compute_buffer_get\", _wrap_InstFreqNormSincExtractor_compute_buffer_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_compute_buffer2_set\", _wrap_InstFreqNormSincExtractor_compute_buffer2_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_compute_buffer2_get\", _wrap_InstFreqNormSincExtractor_compute_buffer2_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_modes_set\", _wrap_InstFreqNormSincExtractor_modes_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_modes_get\", _wrap_InstFreqNormSincExtractor_modes_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_inst_freqs_set\", _wrap_InstFreqNormSincExtractor_inst_freqs_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_inst_freqs_get\", _wrap_InstFreqNormSincExtractor_inst_freqs_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_inst_ampls_set\", _wrap_InstFreqNormSincExtractor_inst_ampls_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_inst_ampls_get\", _wrap_InstFreqNormSincExtractor_inst_ampls_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_phases_set\", _wrap_InstFreqNormSincExtractor_phases_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_phases_get\", _wrap_InstFreqNormSincExtractor_phases_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_freq_conv_set\", _wrap_InstFreqNormSincExtractor_freq_conv_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_freq_conv_get\", _wrap_InstFreqNormSincExtractor_freq_conv_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_freq_conv_image_set\", _wrap_InstFreqNormSincExtractor_freq_conv_image_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_freq_conv_image_get\", _wrap_InstFreqNormSincExtractor_freq_conv_image_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_period_muller_set\", _wrap_InstFreqNormSincExtractor_period_muller_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_period_muller_get\", _wrap_InstFreqNormSincExtractor_period_muller_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_locality_coeff_set\", _wrap_InstFreqNormSincExtractor_locality_coeff_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_locality_coeff_get\", _wrap_InstFreqNormSincExtractor_locality_coeff_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_integrator_set\", _wrap_InstFreqNormSincExtractor_integrator_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_integrator_get\", _wrap_InstFreqNormSincExtractor_integrator_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_derivator_set\", _wrap_InstFreqNormSincExtractor_derivator_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_derivator_get\", _wrap_InstFreqNormSincExtractor_derivator_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_phase_computer_der_atan_set\", _wrap_InstFreqNormSincExtractor_phase_computer_der_atan_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_phase_computer_der_atan_get\", _wrap_InstFreqNormSincExtractor_phase_computer_der_atan_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_phase_computer_simple_set\", _wrap_InstFreqNormSincExtractor_phase_computer_simple_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_phase_computer_simple_get\", _wrap_InstFreqNormSincExtractor_phase_computer_simple_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_inst_freq_computer_set\", _wrap_InstFreqNormSincExtractor_inst_freq_computer_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_inst_freq_computer_get\", _wrap_InstFreqNormSincExtractor_inst_freq_computer_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_inst_ampl_computer_set\", _wrap_InstFreqNormSincExtractor_inst_ampl_computer_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_inst_ampl_computer_get\", _wrap_InstFreqNormSincExtractor_inst_ampl_computer_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_non_opt_filter_set\", _wrap_InstFreqNormSincExtractor_non_opt_filter_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_non_opt_filter_get\", _wrap_InstFreqNormSincExtractor_non_opt_filter_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_filter_set\", _wrap_InstFreqNormSincExtractor_filter_set, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_filter_get\", _wrap_InstFreqNormSincExtractor_filter_get, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_getModesCount\", _wrap_InstFreqNormSincExtractor_getModesCount, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_getDataSize\", _wrap_InstFreqNormSincExtractor_getDataSize, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_getMode\", _wrap_InstFreqNormSincExtractor_getMode, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_getInstFreq\", _wrap_InstFreqNormSincExtractor_getInstFreq, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_getInstAmpl\", _wrap_InstFreqNormSincExtractor_getInstAmpl, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_getPhase\", _wrap_InstFreqNormSincExtractor_getPhase, METH_VARARGS, NULL},\n\t { \"InstFreqNormSincExtractor_computeVec\", _wrap_InstFreqNormSincExtractor_computeVec, METH_VARARGS, NULL},\n\t { \"new_InstFreqNormSincExtractor\", _wrap_new_InstFreqNormSincExtractor, METH_NOARGS, NULL},\n\t { \"delete_InstFreqNormSincExtractor\", _wrap_delete_InstFreqNormSincExtractor, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_swigregister\", InstFreqNormSincExtractor_swigregister, METH_O, NULL},\n\t { \"InstFreqNormSincExtractor_swiginit\", InstFreqNormSincExtractor_swiginit, METH_VARARGS, NULL},\n\t { NULL, NULL, 0, NULL }\n};\n\n\n/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */\n\nstatic swig_type_info _swigt__p_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t = {\"_p_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t\", \"DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_DataType = {\"_p_DataType\", \"DataType *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_FILTERS__NonOptPeriodBasedFilterT_double_FILTERS__FilteringType__AverageBased_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_FILTERS__InstFreqKind__Average_t = {\"_p_FILTERS__NonOptPeriodBasedFilterT_double_FILTERS__FilteringType__AverageBased_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_FILTERS__InstFreqKind__Average_t\", \"FILTERS::NonOptPeriodBasedFilter< double,FILTERS::FilteringType::AverageBased,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,FILTERS::InstFreqKind::Average > *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_FILTERS__SincResLocalFilterT_double_t = {\"_p_FILTERS__SincResLocalFilterT_double_t\", \"FILTERS::SincResLocalFilter< double > *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_GenericSignalT_SimpleVecWrapperT_double_t_true_t = {\"_p_GenericSignalT_SimpleVecWrapperT_double_t_true_t\", \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *|GenericSignal< SimpleVecWrapper< double >,true > *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_INST_AMPL_COMPUTERS__HilbertTransformBasedT_UTILITY_MATH__HTKind__Mull_t = {\"_p_INST_AMPL_COMPUTERS__HilbertTransformBasedT_UTILITY_MATH__HTKind__Mull_t\", \"INST_AMPL_COMPUTERS::HilbertTransformBased< UTILITY_MATH::HTKind::Mull > *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_INST_FREQ_COMPUTERS__ComputedOnPhaseT_double_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_INST_FREQ_COMPUTERS__InstFreqDerivativeBasedKind__TimeAverage_t = {\"_p_INST_FREQ_COMPUTERS__ComputedOnPhaseT_double_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_INST_FREQ_COMPUTERS__InstFreqDerivativeBasedKind__TimeAverage_t\", \"INST_FREQ_COMPUTERS::ComputedOnPhase< double,INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint >,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward >,INST_FREQ_COMPUTERS::InstFreqDerivativeBasedKind::TimeAverage > *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t = {\"_p_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t\", \"INTEGRATORS::Riman< INTEGRATORS::PolygonType::ByPoint > *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor = {\"_p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor\", \"NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__DerArctg_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t = {\"_p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__DerArctg_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t\", \"PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::DerArctg,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > > *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__Simple_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t = {\"_p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__Simple_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t\", \"PHASE_COMPUTERS::ExtremumsBasedNonOpt< double,PHASE_COMPUTERS::ExtremumsKind::Simple,DERIVATORS::FinniteDifference< DERIVATORS::FinniteDifferenceType::Backward > > *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_allocator_type = {\"_p_allocator_type\", \"allocator_type *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_char = {\"_p_char\", \"char *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_difference_type = {\"_p_difference_type\", \"difference_type *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_p_PyObject = {\"_p_p_PyObject\", \"PyObject **\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_size_type = {\"_p_size_type\", \"size_type *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_std__allocatorT_double_t = {\"_p_std__allocatorT_double_t\", \"std::vector< double >::allocator_type *|std::allocator< double > *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_std__invalid_argument = {\"_p_std__invalid_argument\", \"std::invalid_argument *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t = {\"_p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t\", \"std::vector< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType *,std::allocator< NP_DSP::ONE_D::MODES_EXTRACTORS::InstFreqNormSincExtractor::DataType * > > *|std::vector< GenericSignal< SimpleVecWrapper< double >,true > *,std::allocator< GenericSignal< SimpleVecWrapper< double >,true > * > > *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {\"_p_std__vectorT_double_std__allocatorT_double_t_t\", \"std::vector< double,std::allocator< double > > *|std::vector< double > *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_swig__SwigPyIterator = {\"_p_swig__SwigPyIterator\", \"swig::SwigPyIterator *\", 0, 0, (void*)0, 0};\nstatic swig_type_info _swigt__p_value_type = {\"_p_value_type\", \"value_type *\", 0, 0, (void*)0, 0};\n\nstatic swig_type_info *swig_type_initial[] = {\n  &_swigt__p_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t,\n  &_swigt__p_DataType,\n  &_swigt__p_FILTERS__NonOptPeriodBasedFilterT_double_FILTERS__FilteringType__AverageBased_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_FILTERS__InstFreqKind__Average_t,\n  &_swigt__p_FILTERS__SincResLocalFilterT_double_t,\n  &_swigt__p_GenericSignalT_SimpleVecWrapperT_double_t_true_t,\n  &_swigt__p_INST_AMPL_COMPUTERS__HilbertTransformBasedT_UTILITY_MATH__HTKind__Mull_t,\n  &_swigt__p_INST_FREQ_COMPUTERS__ComputedOnPhaseT_double_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_INST_FREQ_COMPUTERS__InstFreqDerivativeBasedKind__TimeAverage_t,\n  &_swigt__p_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t,\n  &_swigt__p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor,\n  &_swigt__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__DerArctg_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t,\n  &_swigt__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__Simple_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t,\n  &_swigt__p_allocator_type,\n  &_swigt__p_char,\n  &_swigt__p_difference_type,\n  &_swigt__p_p_PyObject,\n  &_swigt__p_size_type,\n  &_swigt__p_std__allocatorT_double_t,\n  &_swigt__p_std__invalid_argument,\n  &_swigt__p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t,\n  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,\n  &_swigt__p_swig__SwigPyIterator,\n  &_swigt__p_value_type,\n};\n\nstatic swig_cast_info _swigc__p_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t[] = {  {&_swigt__p_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_DataType[] = {  {&_swigt__p_DataType, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_FILTERS__NonOptPeriodBasedFilterT_double_FILTERS__FilteringType__AverageBased_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_FILTERS__InstFreqKind__Average_t[] = {  {&_swigt__p_FILTERS__NonOptPeriodBasedFilterT_double_FILTERS__FilteringType__AverageBased_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_FILTERS__InstFreqKind__Average_t, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_FILTERS__SincResLocalFilterT_double_t[] = {  {&_swigt__p_FILTERS__SincResLocalFilterT_double_t, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_GenericSignalT_SimpleVecWrapperT_double_t_true_t[] = {  {&_swigt__p_GenericSignalT_SimpleVecWrapperT_double_t_true_t, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_INST_AMPL_COMPUTERS__HilbertTransformBasedT_UTILITY_MATH__HTKind__Mull_t[] = {  {&_swigt__p_INST_AMPL_COMPUTERS__HilbertTransformBasedT_UTILITY_MATH__HTKind__Mull_t, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_INST_FREQ_COMPUTERS__ComputedOnPhaseT_double_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_INST_FREQ_COMPUTERS__InstFreqDerivativeBasedKind__TimeAverage_t[] = {  {&_swigt__p_INST_FREQ_COMPUTERS__ComputedOnPhaseT_double_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_INST_FREQ_COMPUTERS__InstFreqDerivativeBasedKind__TimeAverage_t, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t[] = {  {&_swigt__p_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor[] = {  {&_swigt__p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__DerArctg_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t[] = {  {&_swigt__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__DerArctg_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__Simple_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t[] = {  {&_swigt__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__Simple_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t[] = {  {&_swigt__p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};\nstatic swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};\n\nstatic swig_cast_info *swig_cast_initial[] = {\n  _swigc__p_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t,\n  _swigc__p_DataType,\n  _swigc__p_FILTERS__NonOptPeriodBasedFilterT_double_FILTERS__FilteringType__AverageBased_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_FILTERS__InstFreqKind__Average_t,\n  _swigc__p_FILTERS__SincResLocalFilterT_double_t,\n  _swigc__p_GenericSignalT_SimpleVecWrapperT_double_t_true_t,\n  _swigc__p_INST_AMPL_COMPUTERS__HilbertTransformBasedT_UTILITY_MATH__HTKind__Mull_t,\n  _swigc__p_INST_FREQ_COMPUTERS__ComputedOnPhaseT_double_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_INST_FREQ_COMPUTERS__InstFreqDerivativeBasedKind__TimeAverage_t,\n  _swigc__p_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t,\n  _swigc__p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor,\n  _swigc__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__DerArctg_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t,\n  _swigc__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__Simple_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t,\n  _swigc__p_allocator_type,\n  _swigc__p_char,\n  _swigc__p_difference_type,\n  _swigc__p_p_PyObject,\n  _swigc__p_size_type,\n  _swigc__p_std__allocatorT_double_t,\n  _swigc__p_std__invalid_argument,\n  _swigc__p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t,\n  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,\n  _swigc__p_swig__SwigPyIterator,\n  _swigc__p_value_type,\n};\n\n\n/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */\n\nstatic swig_const_info swig_const_table[] = {\n{0, 0, 0, 0.0, 0, 0}};\n\n#ifdef __cplusplus\n}\n#endif\n/* -----------------------------------------------------------------------------\n * Type initialization:\n * This problem is tough by the requirement that no dynamic\n * memory is used. Also, since swig_type_info structures store pointers to\n * swig_cast_info structures and swig_cast_info structures store pointers back\n * to swig_type_info structures, we need some lookup code at initialization.\n * The idea is that swig generates all the structures that are needed.\n * The runtime then collects these partially filled structures.\n * The SWIG_InitializeModule function takes these initial arrays out of\n * swig_module, and does all the lookup, filling in the swig_module.types\n * array with the correct data and linking the correct swig_cast_info\n * structures together.\n *\n * The generated swig_type_info structures are assigned statically to an initial\n * array. We just loop through that array, and handle each type individually.\n * First we lookup if this type has been already loaded, and if so, use the\n * loaded structure instead of the generated one. Then we have to fill in the\n * cast linked list. The cast data is initially stored in something like a\n * two-dimensional array. Each row corresponds to a type (there are the same\n * number of rows as there are in the swig_type_initial array). Each entry in\n * a column is one of the swig_cast_info structures for that type.\n * The cast_initial array is actually an array of arrays, because each row has\n * a variable number of columns. So to actually build the cast linked list,\n * we find the array of casts associated with the type, and loop through it\n * adding the casts to the list. The one last trick we need to do is making\n * sure the type pointer in the swig_cast_info struct is correct.\n *\n * First off, we lookup the cast->type name to see if it is already loaded.\n * There are three cases to handle:\n *  1) If the cast->type has already been loaded AND the type we are adding\n *     casting info to has not been loaded (it is in this module), THEN we\n *     replace the cast->type pointer with the type pointer that has already\n *     been loaded.\n *  2) If BOTH types (the one we are adding casting info to, and the\n *     cast->type) are loaded, THEN the cast info has already been loaded by\n *     the previous module so we just ignore it.\n *  3) Finally, if cast->type has not already been loaded, then we add that\n *     swig_cast_info to the linked list (because the cast->type) pointer will\n *     be correct.\n * ----------------------------------------------------------------------------- */\n\n#ifdef __cplusplus\nextern \"C\" {\n#if 0\n} /* c-mode */\n#endif\n#endif\n\n#if 0\n#define SWIGRUNTIME_DEBUG\n#endif\n\n#ifndef SWIG_INIT_CLIENT_DATA_TYPE\n#define SWIG_INIT_CLIENT_DATA_TYPE void *\n#endif\n\nSWIGRUNTIME void\nSWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {\n  size_t i;\n  swig_module_info *module_head, *iter;\n  int init;\n  \n  /* check to see if the circular list has been setup, if not, set it up */\n  if (swig_module.next==0) {\n    /* Initialize the swig_module */\n    swig_module.type_initial = swig_type_initial;\n    swig_module.cast_initial = swig_cast_initial;\n    swig_module.next = &swig_module;\n    init = 1;\n  } else {\n    init = 0;\n  }\n  \n  /* Try and load any already created modules */\n  module_head = SWIG_GetModule(clientdata);\n  if (!module_head) {\n    /* This is the first module loaded for this interpreter */\n    /* so set the swig module into the interpreter */\n    SWIG_SetModule(clientdata, &swig_module);\n  } else {\n    /* the interpreter has loaded a SWIG module, but has it loaded this one? */\n    iter=module_head;\n    do {\n      if (iter==&swig_module) {\n        /* Our module is already in the list, so there's nothing more to do. */\n        return;\n      }\n      iter=iter->next;\n    } while (iter!= module_head);\n    \n    /* otherwise we must add our module into the list */\n    swig_module.next = module_head->next;\n    module_head->next = &swig_module;\n  }\n  \n  /* When multiple interpreters are used, a module could have already been initialized in\n       a different interpreter, but not yet have a pointer in this interpreter.\n       In this case, we do not want to continue adding types... everything should be\n       set up already */\n  if (init == 0) return;\n  \n  /* Now work on filling in swig_module.types */\n#ifdef SWIGRUNTIME_DEBUG\n  printf(\"SWIG_InitializeModule: size %lu\\n\", (unsigned long)swig_module.size);\n#endif\n  for (i = 0; i < swig_module.size; ++i) {\n    swig_type_info *type = 0;\n    swig_type_info *ret;\n    swig_cast_info *cast;\n    \n#ifdef SWIGRUNTIME_DEBUG\n    printf(\"SWIG_InitializeModule: type %lu %s\\n\", (unsigned long)i, swig_module.type_initial[i]->name);\n#endif\n    \n    /* if there is another module already loaded */\n    if (swig_module.next != &swig_module) {\n      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);\n    }\n    if (type) {\n      /* Overwrite clientdata field */\n#ifdef SWIGRUNTIME_DEBUG\n      printf(\"SWIG_InitializeModule: found type %s\\n\", type->name);\n#endif\n      if (swig_module.type_initial[i]->clientdata) {\n        type->clientdata = swig_module.type_initial[i]->clientdata;\n#ifdef SWIGRUNTIME_DEBUG\n        printf(\"SWIG_InitializeModule: found and overwrite type %s \\n\", type->name);\n#endif\n      }\n    } else {\n      type = swig_module.type_initial[i];\n    }\n    \n    /* Insert casting types */\n    cast = swig_module.cast_initial[i];\n    while (cast->type) {\n      /* Don't need to add information already in the list */\n      ret = 0;\n#ifdef SWIGRUNTIME_DEBUG\n      printf(\"SWIG_InitializeModule: look cast %s\\n\", cast->type->name);\n#endif\n      if (swig_module.next != &swig_module) {\n        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);\n#ifdef SWIGRUNTIME_DEBUG\n        if (ret) printf(\"SWIG_InitializeModule: found cast %s\\n\", ret->name);\n#endif\n      }\n      if (ret) {\n        if (type == swig_module.type_initial[i]) {\n#ifdef SWIGRUNTIME_DEBUG\n          printf(\"SWIG_InitializeModule: skip old type %s\\n\", ret->name);\n#endif\n          cast->type = ret;\n          ret = 0;\n        } else {\n          /* Check for casting already in the list */\n          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);\n#ifdef SWIGRUNTIME_DEBUG\n          if (ocast) printf(\"SWIG_InitializeModule: skip old cast %s\\n\", ret->name);\n#endif\n          if (!ocast) ret = 0;\n        }\n      }\n      \n      if (!ret) {\n#ifdef SWIGRUNTIME_DEBUG\n        printf(\"SWIG_InitializeModule: adding cast %s\\n\", cast->type->name);\n#endif\n        if (type->cast) {\n          type->cast->prev = cast;\n          cast->next = type->cast;\n        }\n        type->cast = cast;\n      }\n      cast++;\n    }\n    /* Set entry in modules->types array equal to the type */\n    swig_module.types[i] = type;\n  }\n  swig_module.types[i] = 0;\n  \n#ifdef SWIGRUNTIME_DEBUG\n  printf(\"**** SWIG_InitializeModule: Cast List ******\\n\");\n  for (i = 0; i < swig_module.size; ++i) {\n    int j = 0;\n    swig_cast_info *cast = swig_module.cast_initial[i];\n    printf(\"SWIG_InitializeModule: type %lu %s\\n\", (unsigned long)i, swig_module.type_initial[i]->name);\n    while (cast->type) {\n      printf(\"SWIG_InitializeModule: cast type %s\\n\", cast->type->name);\n      cast++;\n      ++j;\n    }\n    printf(\"---- Total casts: %d\\n\",j);\n  }\n  printf(\"**** SWIG_InitializeModule: Cast List ******\\n\");\n#endif\n}\n\n/* This function will propagate the clientdata field of type to\n* any new swig_type_info structures that have been added into the list\n* of equivalent types.  It is like calling\n* SWIG_TypeClientData(type, clientdata) a second time.\n*/\nSWIGRUNTIME void\nSWIG_PropagateClientData(void) {\n  size_t i;\n  swig_cast_info *equiv;\n  static int init_run = 0;\n  \n  if (init_run) return;\n  init_run = 1;\n  \n  for (i = 0; i < swig_module.size; i++) {\n    if (swig_module.types[i]->clientdata) {\n      equiv = swig_module.types[i]->cast;\n      while (equiv) {\n        if (!equiv->converter) {\n          if (equiv->type && !equiv->type->clientdata)\n          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);\n        }\n        equiv = equiv->next;\n      }\n    }\n  }\n}\n\n#ifdef __cplusplus\n#if 0\n{\n  /* c-mode */\n#endif\n}\n#endif\n\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n  \n  /* -----------------------------------------------------------------------------\n   * constants/methods manipulation\n   * ----------------------------------------------------------------------------- */\n  \n  /* Install Constants */\n  SWIGINTERN void\n  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {\n    PyObject *obj = 0;\n    size_t i;\n    for (i = 0; constants[i].type; ++i) {\n      switch(constants[i].type) {\n      case SWIG_PY_POINTER:\n        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);\n        break;\n      case SWIG_PY_BINARY:\n        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));\n        break;\n      default:\n        obj = 0;\n        break;\n      }\n      if (obj) {\n        PyDict_SetItemString(d, constants[i].name, obj);\n        Py_DECREF(obj);\n      }\n    }\n  }\n  \n  /* -----------------------------------------------------------------------------\n   * Patch %callback methods' docstrings to hold the callback ptrs\n   * -----------------------------------------------------------------------------*/\n  \n  SWIGINTERN void\n  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {\n    size_t i;\n    for (i = 0; methods[i].ml_name; ++i) {\n      const char *c = methods[i].ml_doc;\n      if (!c) continue;\n      c = strstr(c, \"swig_ptr: \");\n      if (c) {\n        int j;\n        const swig_const_info *ci = 0;\n        const char *name = c + 10;\n        for (j = 0; const_table[j].type; ++j) {\n          if (strncmp(const_table[j].name, name, \n              strlen(const_table[j].name)) == 0) {\n            ci = &(const_table[j]);\n            break;\n          }\n        }\n        if (ci) {\n          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;\n          if (ptr) {\n            size_t shift = (ci->ptype) - types;\n            swig_type_info *ty = types_initial[shift];\n            size_t ldoc = (c - methods[i].ml_doc);\n            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;\n            char *ndoc = (char*)malloc(ldoc + lptr + 10);\n            if (ndoc) {\n              char *buff = ndoc;\n              memcpy(buff, methods[i].ml_doc, ldoc);\n              buff += ldoc;\n              memcpy(buff, \"swig_ptr: \", 10);\n              buff += 10;\n              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);\n              methods[i].ml_doc = ndoc;\n            }\n          }\n        }\n      }\n    }\n  } \n  \n#ifdef __cplusplus\n}\n#endif\n\n\n\n\n/* -----------------------------------------------------------------------------*\n *  Partial Init method\n * -----------------------------------------------------------------------------*/\n\n#ifdef __cplusplus\nextern \"C\"\n#endif\n\nSWIGEXPORT \n#if PY_VERSION_HEX >= 0x03000000\nPyObject*\n#else\nvoid\n#endif\nSWIG_init(void) {\n  PyObject *m, *d, *md, *globals;\n  \n#if PY_VERSION_HEX >= 0x03000000\n  static struct PyModuleDef SWIG_module = {\n    PyModuleDef_HEAD_INIT,\n    SWIG_name,\n    NULL,\n    -1,\n    SwigMethods,\n    NULL,\n    NULL,\n    NULL,\n    NULL\n  };\n#endif\n  \n#if defined(SWIGPYTHON_BUILTIN)\n  static SwigPyClientData SwigPyObject_clientdata = {\n    0, 0, 0, 0, 0, 0, 0\n  };\n  static PyGetSetDef this_getset_def = {\n    (char *)\"this\", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL\n  };\n  static SwigPyGetSet thisown_getset_closure = {\n    SwigPyObject_own,\n    SwigPyObject_own\n  };\n  static PyGetSetDef thisown_getset_def = {\n    (char *)\"thisown\", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure\n  };\n  PyTypeObject *builtin_pytype;\n  int builtin_base_count;\n  swig_type_info *builtin_basetype;\n  PyObject *tuple;\n  PyGetSetDescrObject *static_getset;\n  PyTypeObject *metatype;\n  PyTypeObject *swigpyobject;\n  SwigPyClientData *cd;\n  PyObject *public_interface, *public_symbol;\n  PyObject *this_descr;\n  PyObject *thisown_descr;\n  PyObject *self = 0;\n  int i;\n  \n  (void)builtin_pytype;\n  (void)builtin_base_count;\n  (void)builtin_basetype;\n  (void)tuple;\n  (void)static_getset;\n  (void)self;\n  \n  /* Metaclass is used to implement static member variables */\n  metatype = SwigPyObjectType();\n  assert(metatype);\n#endif\n  \n  (void)globals;\n  \n  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */\n  SWIG_This();\n  SWIG_Python_TypeCache();\n  SwigPyPacked_type();\n#ifndef SWIGPYTHON_BUILTIN\n  SwigPyObject_type();\n#endif\n  \n  /* Fix SwigMethods to carry the callback ptrs when needed */\n  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);\n  \n#if PY_VERSION_HEX >= 0x03000000\n  m = PyModule_Create(&SWIG_module);\n#else\n  m = Py_InitModule(SWIG_name, SwigMethods);\n#endif\n  \n  md = d = PyModule_GetDict(m);\n  (void)md;\n  \n  SWIG_InitializeModule(0);\n  \n#ifdef SWIGPYTHON_BUILTIN\n  swigpyobject = SwigPyObject_TypeOnce();\n  \n  SwigPyObject_stype = SWIG_MangledTypeQuery(\"_p_SwigPyObject\");\n  assert(SwigPyObject_stype);\n  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;\n  if (!cd) {\n    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;\n    SwigPyObject_clientdata.pytype = swigpyobject;\n  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {\n    PyErr_SetString(PyExc_RuntimeError, \"Import error: attempted to load two incompatible swig-generated modules.\");\n# if PY_VERSION_HEX >= 0x03000000\n    return NULL;\n# else\n    return;\n# endif\n  }\n  \n  /* All objects have a 'this' attribute */\n  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);\n  (void)this_descr;\n  \n  /* All objects have a 'thisown' attribute */\n  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);\n  (void)thisown_descr;\n  \n  public_interface = PyList_New(0);\n  public_symbol = 0;\n  (void)public_symbol;\n  \n  PyDict_SetItemString(md, \"__all__\", public_interface);\n  Py_DECREF(public_interface);\n  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)\n  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);\n  for (i = 0; swig_const_table[i].name != 0; ++i)\n  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);\n#endif\n  \n  SWIG_InstallConstants(d,swig_const_table);\n  \n  \n  // thread safe initialization\n  swig::container_owner_attribute();\n  \n#if PY_VERSION_HEX >= 0x03000000\n  return m;\n#else\n  return;\n#endif\n}\n\n","uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp","version":1}}}},{"pid":0,"ph":"X","name":"Queued:codeAction","ts":57561169.170999996,"tid":6130,"dur":3.5660000070929527,"args":{"CurrentRequest":"Update","PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":57561075.284000002,"tid":6130,"id":54,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":58461174.023000002,"tid":6237,"bp":"e","id":54,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":58461179.593000002,"tid":6237,"dur":9.9689999967813492,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58461348.090999998,"tid":6237,"args":{"Message":"--> reply:textDocument/codeAction(50) 900 ms"}},{"pid":0,"ph":"X","name":"codeAction","ts":58461165.376999997,"tid":6237,"dur":231.777000002563,"args":{}},{"pid":0,"ph":"X","name":"textDocument/codeAction","ts":57561075.284000002,"tid":6130,"dur":102.22199999541044,"args":{"Params":{"context":{"diagnostics":[],"triggerKind":2},"range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},"Reply":[]}},{"pid":0,"ph":"X","name":"Queued:DocumentSymbols","ts":57561632.664999999,"tid":6130,"dur":3.2559999972581863,"args":{"CurrentRequest":"Update","PreambleRequestsNames":[],"RequestsNames":["codeAction"]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":57561579.844999999,"tid":6130,"id":55,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":58461429.413999997,"tid":6237,"bp":"e","id":55,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":58461431.517999999,"tid":6237,"dur":4.2880000025033951,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58461444.141999997,"tid":6237,"args":{"Message":"--> reply:textDocument/documentSymbol(51) 899 ms, error: Task was cancelled."}},{"pid":0,"ph":"X","name":"DocumentSymbols","ts":58461425.957999997,"tid":6237,"dur":35.928000003099442,"args":{}},{"pid":0,"ph":"X","name":"textDocument/documentSymbol","ts":57561579.844999999,"tid":6130,"dur":57.829000003635883,"args":{"Error":"Task was cancelled.","Params":{"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}}}},{"pid":0,"ph":"X","name":"Queued:SemanticHighlights","ts":57596060.832000002,"tid":6130,"dur":5.6110000014305115,"args":{"CurrentRequest":"Build AST","PreambleRequestsNames":[],"RequestsNames":["codeAction","DocumentSymbols"]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":57595943.952,"tid":6130,"id":56,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":58461502.162,"tid":6237,"bp":"e","id":56,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":58461506.059,"tid":6237,"dur":4.0979999974370003,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58476321.409000002,"tid":6237,"args":{"Message":"--> reply:textDocument/semanticTokens/full(52) 880 ms"}},{"pid":0,"ph":"X","name":"SemanticHighlights","ts":58461479.869999997,"tid":6237,"dur":20604.934000000358,"args":{}},{"pid":0,"ph":"X","name":"textDocument/semanticTokens/full","ts":57595943.952,"tid":6130,"dur":129.50400000065565,"args":{"Params":{"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},"Reply":{"data":[9,8,12,19,131073,1,8,10,19,131073,1,8,30,19,131073,8,8,25,19,131072,1,13,11,19,131072,2,15,8,19,131072,5,10,25,19,131073,5,8,10,19,131072,1,13,11,19,131072,0,25,8,19,131072,0,22,15,19,131072,1,11,10,19,131073,7,8,10,19,131072,1,13,8,19,131072,1,17,11,19,131072,0,18,8,19,131072,0,17,8,19,131072,0,17,14,19,131072,1,13,10,19,131073,11,8,24,19,131072,1,13,8,19,131072,5,8,14,19,131072,1,8,11,19,131072,1,11,14,19,131073,7,8,10,19,131072,1,9,10,19,131073,0,18,10,19,131072,4,8,16,19,131072,1,9,16,19,131073,0,17,10,19,131072,0,11,10,19,131072,4,12,8,19,131072,1,7,8,19,131072,0,19,8,19,131072,0,17,14,19,131072,1,12,22,19,131072,1,14,22,19,131073,5,8,10,19,131072,1,13,6,19,131072,0,19,9,19,131072,0,22,10,19,131072,7,15,8,19,131072,0,21,22,19,131072,1,13,10,19,131073,8,8,11,19,131072,1,13,6,19,131072,0,19,9,19,131072,0,22,10,19,131072,3,11,11,19,131073,5,13,31,19,131072,0,44,8,19,131072,0,22,24,19,131072,5,13,31,19,131072,0,44,8,19,131072,0,22,24,19,131072,5,12,9,19,131072,0,23,51,19,131072,9,7,16,19,131072,5,12,8,19,131072,0,21,6,19,131072,0,20,31,19,131072,5,13,16,19,131072,0,30,24,19,131072,1,8,16,19,131073,3,4,8,19,131072,7,12,6,19,131072,0,19,32,19,131072,16,4,8,19,131072,13,8,20,19,131073,3,7,15,19,131072,5,9,20,19,131073,12,8,11,19,131072,1,9,11,19,131073,0,12,10,19,131072,3,8,17,19,131072,1,9,17,19,131073,0,18,11,19,131072,0,12,10,19,131072,4,8,16,19,131072,1,9,16,19,131073,4,8,19,19,131073,1,8,20,19,131073,1,8,20,19,131073,1,8,18,19,131073,1,8,20,19,131073,0,28,18,19,131072,0,21,19,19,131072,3,8,16,19,131073,82,8,7,19,131073,2,8,10,19,131073,4,8,28,19,131073,2,8,9,19,131073,1,8,13,19,131073,0,34,10,19,131072,3,8,18,19,131073,2,8,15,19,131073,0,28,18,19,131072,2,8,15,19,131073,0,28,15,19,131072,2,8,11,19,131073,0,28,10,19,131072,1,8,11,19,131073,0,28,7,19,131072,1,8,11,19,131073,0,28,7,19,131072,0,10,15,19,131072,1,8,11,19,131073,0,28,7,19,131072,0,10,15,19,131072,2,8,15,19,131073,0,28,9,19,131072,0,20,15,19,131072,1,8,15,19,131073,0,28,9,19,131072,0,21,15,19,131072,1,8,13,19,131073,0,28,9,19,131072,0,21,15,19,131072,1,8,15,19,131073,0,28,9,19,131072,0,20,15,19,131072,1,8,15,19,131073,0,28,9,19,131072,0,21,15,19,131072,1,8,13,19,131073,0,28,9,19,131072,0,21,15,19,131072,3,12,18,19,131072,16,10,12,19,131073,1,10,15,19,131073,0,20,9,19,131072,6,7,11,19,131072,4,16,19,12,65537,1,15,14,8,131073,0,18,16,12,65537,3,15,14,8,131075,1,26,4,6,32785,1,26,3,6,32785,1,2,16,12,65536,0,24,5,6,32769,1,9,14,8,131073,0,17,4,6,32769,1,26,10,6,32769,1,25,7,6,32769,1,2,14,8,65537,3,15,14,8,131075,1,2,14,8,65536,0,24,4,6,32769,1,2,19,12,65536,0,24,9,6,32769,1,9,14,8,131072,0,17,4,6,32769,1,9,14,8,131072,0,17,4,6,32769,1,2,14,8,65537,5,15,16,8,131075,1,2,14,8,65536,0,25,5,6,32769,1,2,6,18,66048,0,23,4,6,32769,1,9,16,8,131072,0,18,4,6,32769,1,2,14,8,65536,0,25,12,6,32769,1,2,14,8,65536,0,25,12,6,32769,1,27,10,6,32769,1,2,16,8,65537,9,0,11,19,131072,1,0,17,3,65539,0,30,2,2,16403,0,16,2,2,16403,1,16,2,2,16403,0,16,2,2,16403,1,9,2,2,16400,0,3,2,21,0,0,3,2,2,16400,0,4,2,21,0,0,4,2,2,16400,0,3,2,21,0,0,3,2,2,16400,0,5,2,21,0,0,2,2,2,16400,0,2,1,21,0,0,2,2,21,0,0,2,2,2,16400,1,12,1,21,0,0,1,2,2,16400,0,3,2,21,0,0,8,2,21,0,0,4,2,2,16400,0,3,2,21,0,0,3,2,2,16400,0,5,2,21,0,0,2,2,2,16400,1,12,1,21,0,0,1,2,2,16400,0,3,2,21,0,0,8,2,21,0,0,4,2,2,16400,0,3,2,21,0,0,3,2,2,16400,0,5,2,21,0,0,2,2,2,16400,1,8,1,21,0,0,1,2,2,16400,0,3,2,21,0,0,3,1,21,0,0,1,2,2,16400,0,12,1,21,0,0,1,2,2,16400,0,3,1,21,0,0,2,1,21,0,0,1,2,2,16400,0,4,1,21,0,0,4,1,21,0,0,2,1,21,0,2,16,2,2,16400,0,3,1,21,0,0,2,2,2,16400,0,4,1,21,0,0,3,2,2,16400,0,3,1,21,0,0,2,2,2,16400,7,0,11,19,131072,1,0,12,3,65539,0,25,2,2,16403,0,16,2,2,16403,1,6,5,1,16387,1,14,2,1,16403,0,5,2,2,16400,0,3,1,21,0,0,2,6,3,131584,0,7,2,2,16400,1,14,2,1,16403,0,5,2,2,16400,1,9,5,1,16384,0,6,2,21,0,0,5,2,21,0,0,3,1,21,0,0,1,2,1,16400,1,9,2,2,16400,0,3,1,21,0,0,2,2,1,16400,0,4,1,21,0,0,1,2,1,16400,0,4,2,21,0,0,2,2,1,16400,1,10,1,21,0,0,1,2,1,16400,0,3,2,21,0,2,4,5,1,16384,0,6,1,21,0,0,2,17,3,65536,0,18,2,2,16400,0,4,2,1,16400,0,4,2,2,16400,0,4,2,1,16400,1,8,1,21,0,0,1,2,1,16400,0,4,2,21,0,0,2,2,1,16400,2,9,5,1,16384,7,0,11,19,131072,1,0,14,3,65539,0,27,2,2,16403,0,16,2,2,16403,1,9,12,3,65536,0,13,2,2,16400,0,4,2,2,16400,0,4,2,21,0,0,5,1,21,0,0,4,1,21,0,6,0,11,19,131072,0,12,14,8,65536,1,0,14,3,65539,0,27,1,2,16403,0,3,14,8,65536,0,16,2,2,16387,1,6,2,2,16384,1,4,14,8,65536,0,16,4,1,16387,0,7,2,2,16384,0,4,4,6,32768,1,11,4,1,16384,1,10,6,3,131584,0,7,4,1,16384,0,6,4,6,32768,0,6,4,6,32784,0,6,1,2,16400,0,3,2,21,0,1,12,4,1,16384,0,5,2,21,0,0,3,2,2,16384,0,4,4,6,32768,1,17,4,1,16384,2,8,4,1,16384,0,6,4,6,32768,0,6,4,6,32768,0,5,1,21,0,0,2,4,1,16384,0,6,4,6,32768,1,12,4,1,16384,0,6,4,6,32768,1,10,4,1,16384,0,6,4,6,32768,0,6,4,6,32768,0,5,1,21,0,0,2,4,1,16384,0,6,4,6,32768,1,8,4,1,16384,0,6,4,6,32768,0,5,1,21,0,0,2,2,2,16384,0,4,4,6,32768,1,8,4,1,16384,0,6,4,6,32768,0,5,1,21,0,1,12,2,2,16384,0,4,4,6,32768,0,6,2,2,16384,0,4,4,6,32768,0,6,4,6,32768,0,5,1,21,0,0,2,4,1,16384,1,8,2,2,16384,0,4,4,6,32768,0,5,1,21,0,0,2,4,1,16384,1,15,4,1,16384,2,6,4,1,16384,0,5,1,21,0,0,2,4,1,16384,0,6,4,6,32768,9,0,11,19,131072,0,12,14,8,65536,1,0,20,3,65539,0,27,14,8,65536,0,16,4,2,16403,0,6,14,8,65536,0,16,2,2,16387,1,6,2,2,16384,1,4,14,8,65536,0,16,4,1,16387,0,7,2,2,16384,0,4,4,6,32768,1,11,4,1,16384,1,10,4,1,16384,0,6,4,6,32768,0,5,2,21,0,0,3,4,2,16400,1,12,4,1,16384,0,5,2,21,0,0,3,2,2,16384,0,4,4,6,32768,1,17,4,1,16384,2,8,4,1,16384,0,6,4,6,32768,0,6,4,6,32768,0,5,1,21,0,0,2,4,1,16384,0,6,4,6,32768,1,12,4,1,16384,0,6,4,6,32768,1,10,4,1,16384,0,6,4,6,32768,0,6,4,6,32768,0,5,1,21,0,0,2,4,1,16384,0,6,4,6,32768,1,8,4,1,16384,0,6,4,6,32768,0,5,1,21,0,0,2,2,2,16384,0,4,4,6,32768,1,8,4,1,16384,0,6,4,6,32768,0,5,1,21,0,1,12,2,2,16384,0,4,4,6,32768,0,6,2,2,16384,0,4,4,6,32768,0,6,4,6,32768,0,5,1,21,0,0,2,4,1,16384,1,8,2,2,16384,0,4,4,6,32768,0,5,1,21,0,0,2,4,1,16384,1,15,4,1,16384,2,6,4,1,16384,0,5,1,21,0,0,2,4,1,16384,0,6,4,6,32768,9,0,17,19,131072,1,0,13,3,65539,0,14,14,8,65536,0,16,2,2,16387,0,10,3,2,16387,0,10,9,2,16387,1,11,1,21,0,0,1,2,2,16384,0,4,2,21,0,0,4,1,21,0,0,1,2,2,16384,0,4,9,6,32768,0,12,1,21,0,0,2,3,2,16384,0,4,1,21,0,0,3,1,21,0,0,1,2,2,16384,0,4,9,6,32768,0,11,3,2,16384,0,5,9,2,16384,6,0,11,19,131072,0,12,14,8,65536,1,0,20,3,65539,0,21,14,8,65536,0,16,2,2,16387,0,11,3,2,16387,1,2,14,8,65536,0,16,6,1,16387,0,9,2,2,16384,1,6,1,21,0,0,1,2,2,16384,0,3,2,21,0,0,3,1,21,0,0,1,2,2,16384,0,4,5,6,32768,0,14,2,2,16384,1,9,2,2,16384,0,3,2,21,0,0,4,2,2,16384,0,4,5,6,32768,1,4,2,2,16384,0,3,1,21,0,0,3,1,21,0,0,1,2,2,16384,0,4,5,6,32768,0,7,3,2,16384,1,8,2,2,16384,0,4,6,1,16384,0,7,1,21,0,0,2,2,2,16384,2,9,6,1,16384,6,0,17,19,131072,1,0,13,3,65539,0,20,14,8,65536,0,16,2,2,16403,1,9,2,2,16400,0,4,4,6,32784,7,0,11,19,131072,1,0,19,3,65539,0,26,14,8,65536,0,16,4,2,16403,5,6,1,21,0,0,1,4,2,16400,0,13,4,19,131072,1,6,4,2,16400,0,6,3,6,32784,0,4,2,21,0,0,3,4,19,131072,1,16,9,1,16403,0,12,4,2,16400,0,6,3,6,32784,1,16,1,1,16403,1,9,1,1,16400,0,2,1,21,0,0,2,4,2,16400,0,6,3,6,32784,0,5,1,21,0,0,1,1,1,16400,0,3,1,1,16400,0,1,2,21,0,1,10,1,21,0,0,1,1,1,16400,0,2,2,21,0,0,8,9,1,16400,0,10,1,21,0,0,2,1,1,16400,0,1,1,21,0,1,11,9,1,16400,3,11,4,2,16400,0,6,4,6,32784,6,0,11,19,131072,1,0,19,3,65539,0,20,14,8,65536,0,16,2,2,16387,0,10,10,2,16387,1,2,14,8,65536,0,16,4,1,16387,0,7,2,2,16384,0,4,4,6,32768,2,2,2,2,16384,0,4,10,6,32768,0,11,1,21,0,0,2,10,2,16384,2,9,4,1,16384,1,8,1,21,0,0,1,4,1,16384,0,6,9,6,32768,1,6,14,8,65536,0,16,2,1,16387,0,5,4,1,16384,0,6,4,6,32768,1,10,1,21,0,0,1,2,1,16384,0,4,10,6,32768,1,1,19,3,65536,0,20,2,1,18432,0,4,10,2,18432,3,4,4,1,16384,0,5,1,21,0,0,2,4,1,16384,0,6,4,6,32768,3,0,11,19,131072,1,0,22,3,65539,0,23,14,8,65536,0,16,2,2,16387,0,10,10,2,16387,1,2,19,3,65536,0,20,2,2,18432,0,4,10,2,18432,1,2,2,2,16384,0,4,7,6,32768,0,8,1,21,0,11,0,11,19,131072,0,12,14,8,65536,1,0,27,3,65539,0,28,16,8,65536,0,18,5,2,16387,1,28,16,8,65536,0,18,3,2,16387,1,26,4,2,16403,1,2,16,8,65536,0,18,4,1,16387,0,7,5,2,16384,2,8,4,1,16384,0,6,4,6,32768,1,6,6,18,66048,0,7,1,1,16387,1,6,6,18,66048,0,7,1,1,16387,0,4,4,1,16384,0,6,4,6,32768,0,5,1,21,0,3,1,6,18,66048,0,7,1,1,16387,0,5,1,1,16384,0,2,1,21,0,0,2,1,1,16384,0,3,2,21,0,1,13,5,1,16403,0,8,4,1,16384,0,6,5,6,32768,0,6,1,1,16384,0,4,4,6,32784,1,5,5,1,16400,1,7,7,1,16387,0,10,6,3,131584,0,7,4,2,16400,0,6,5,1,16400,1,7,7,1,16384,0,8,2,21,0,1,12,4,1,16384,0,6,5,6,32768,0,6,1,1,16384,1,14,7,1,16384,0,8,1,21,0,1,9,1,1,16384,1,7,1,1,16384,0,2,1,21,0,0,2,1,1,16384,0,2,1,21,0,4,14,7,1,16384,0,8,1,21,0,1,5,1,1,16384,0,2,1,21,0,0,2,1,1,16384,0,2,1,21,0,5,15,1,1,16384,0,2,2,21,0,0,3,1,1,16384,2,4,4,1,16384,0,5,1,21,0,0,2,4,1,16384,0,6,4,6,32768,1,11,4,1,16384,0,5,2,21,0,0,3,3,2,16384,13,0,11,19,131072,0,12,14,8,65536,1,0,20,3,65539,0,21,16,8,65536,0,18,5,2,16387,1,21,16,8,65536,0,18,3,2,16387,1,19,4,2,16403,2,2,14,8,65536,0,16,3,1,16387,0,6,27,3,65536,0,28,5,2,18432,0,7,3,2,18432,0,5,4,2,16400,1,6,3,1,16384,1,11,3,1,16384,4,4,16,8,65536,0,18,4,1,16387,0,7,5,2,16384,2,6,6,18,66048,0,7,1,1,16387,1,13,1,1,16384,0,2,1,21,0,0,2,4,1,16384,0,6,4,6,32768,0,6,2,21,0,0,2,1,1,16384,1,5,4,1,16384,0,6,5,6,32768,0,6,1,1,16384,0,4,3,6,32784,0,4,2,21,0,0,4,14,3,65536,0,15,4,1,16384,0,6,5,6,32768,0,6,1,1,16384,0,4,3,6,32784,0,5,4,2,16400,1,10,4,1,16384,0,6,5,6,32768,0,6,1,1,16384,2,6,4,1,16384,0,5,1,21,0,0,2,4,1,16384,0,6,4,6,32768,1,13,4,1,16384,0,5,2,21,0,0,3,3,2,16384,10,0,11,19,131072,1,0,13,3,65539,0,20,1,2,16387,0,9,3,2,16387,0,5,6,18,66048,0,7,2,2,16387,1,20,3,1,16435,1,23,1,1,16403,0,22,3,2,16384,1,23,2,1,16403,0,6,1,1,16400,0,2,1,21,0,0,2,2,2,16384,1,9,1,1,16400,0,2,2,21,0,0,3,2,1,16400,0,4,2,21,0,0,2,1,1,16400,1,18,2,1,16387,0,5,1,21,0,0,1,1,1,16400,1,4,1,21,0,0,2,1,2,16384,0,1,2,21,0,0,4,1,21,0,0,2,3,1,16432,0,5,2,1,16384,0,3,1,21,0,0,8,2,21,0,1,4,1,21,0,0,2,1,2,16384,0,1,2,21,0,0,4,1,21,0,0,2,3,1,16432,0,4,2,1,16384,0,3,1,21,0,2,9,1,2,16384,6,0,11,19,131072,1,0,15,3,65539,0,28,1,2,16403,0,9,3,2,16387,0,5,6,18,66048,0,7,2,2,16387,1,17,1,1,16387,0,22,3,2,16384,1,23,2,1,16403,0,5,1,1,16384,0,2,1,21,0,0,2,2,2,16384,1,9,1,1,16384,0,2,2,21,0,0,3,2,1,16400,0,4,2,21,0,0,2,1,1,16384,1,9,1,1,16387,0,4,1,21,0,0,2,1,2,16400,0,1,2,21,0,1,18,2,1,16387,1,9,1,1,16384,0,2,2,21,0,0,8,2,21,0,0,4,1,1,16384,0,2,2,21,0,1,6,2,1,16384,0,3,1,21,0,0,19,1,1,16384,0,2,1,21,0,0,7,2,21,0,1,14,1,1,16384,0,2,2,21,0,0,8,2,21,0,0,4,1,1,16384,0,2,2,21,0,1,6,2,1,16384,0,3,1,21,0,0,19,1,1,16384,0,2,1,21,0,0,6,1,21,0,0,6,2,21,0,3,4,1,1,16384,0,2,1,21,0,0,2,1,21,0,0,2,1,2,16400,0,1,2,21,0,1,9,1,1,16384,0,2,2,21,0,0,8,2,21,0,0,4,1,1,16384,0,2,2,21,0,1,6,2,1,16384,0,3,2,21,0,0,19,1,1,16384,0,2,1,21,0,1,14,1,1,16384,0,2,2,21,0,0,8,2,21,0,0,4,1,1,16384,0,2,2,21,0,1,6,2,1,16384,0,3,2,21,0,0,19,1,1,16384,0,2,1,21,0,0,6,1,21,0,3,4,1,21,0,0,1,1,1,16384,0,2,1,21,0,0,2,2,1,16384,2,9,1,2,16400,6,0,11,19,131072,1,0,16,3,65539,0,23,4,2,16387,0,12,3,2,16387,0,17,4,2,16403,0,6,6,18,66048,0,7,3,2,16387,1,8,1,1,16387,0,4,4,2,16384,1,8,1,21,0,0,16,1,21,0,0,5,1,21,0,0,2,3,2,16384,1,2,1,21,0,0,2,1,1,16384,0,1,2,21,0,0,4,1,21,0,1,2,1,1,16384,0,2,1,21,0,0,2,13,3,65536,0,14,1,1,18432,0,2,1,21,0,0,1,3,2,18432,1,6,6,3,131584,0,7,4,2,16400,0,6,1,21,0,0,4,1,21,0,0,3,3,2,16384,0,4,1,21,0,0,3,1,1,16384,0,2,1,21,0,0,2,4,2,16384,1,2,6,3,131584,0,7,1,1,18432,0,2,4,2,16400,1,9,4,2,16384,3,0,11,19,131072,1,0,18,3,65539,0,31,1,2,16403,0,10,3,2,16387,0,17,4,2,16403,1,6,1,21,0,0,1,1,2,16400,0,2,2,21,0,1,8,6,3,131584,0,7,1,2,16400,0,10,2,21,0,1,6,1,21,0,0,1,3,2,16384,0,4,1,21,0,1,13,4,2,16400,5,9,15,3,65536,0,16,2,21,0,0,2,1,2,16400,0,2,3,2,18432,3,0,11,19,131072,1,0,17,3,65539,0,24,4,2,16387,0,12,3,2,16387,0,5,6,18,66048,0,7,2,2,16387,0,16,4,2,16403,0,6,6,18,66048,0,7,3,2,16387,1,8,1,1,16387,0,4,4,2,16384,1,2,6,18,66048,0,7,5,1,16387,0,9,4,2,16400,0,5,1,21,0,0,2,6,3,131584,0,7,4,2,16400,0,6,1,21,0,1,8,1,21,0,0,1,2,2,16384,0,3,1,21,0,0,4,1,21,0,0,2,5,1,16384,0,7,1,21,0,0,2,3,2,16384,1,2,1,21,0,0,2,1,1,16384,0,1,2,21,0,0,4,1,21,0,1,2,1,1,16384,0,2,1,21,0,0,2,13,3,65536,0,14,1,1,18432,0,2,3,2,18432,0,4,2,2,16384,1,6,5,1,16384,1,4,7,3,131584,0,8,1,1,18432,0,2,4,2,16400,0,5,5,1,16384,0,5,1,21,0,2,4,1,21,0,0,1,1,1,16384,0,2,1,21,0,2,9,4,2,16384,3,0,11,19,131072,1,0,19,3,65539,0,32,1,2,16403,0,9,3,2,16387,0,5,6,18,66048,0,7,2,2,16387,0,16,4,2,16403,1,6,1,21,0,0,1,1,2,16400,0,2,2,21,0,1,8,6,3,131584,0,7,1,2,16400,0,10,2,21,0,1,6,6,3,131584,0,7,3,2,18432,0,6,2,2,16384,1,13,4,2,16400,5,9,15,3,65536,0,16,2,21,0,0,2,1,2,16400,0,2,3,2,18432,0,4,2,2,16384,3,7,11,19,131072,5,9,17,19,131073,1,9,12,19,131073,1,9,17,19,131073,1,9,15,19,131073,1,9,14,19,131073,1,9,19,19,131073,1,9,18,19,131073,1,9,16,19,131073,1,9,15,19,131073,1,9,16,19,131073,1,9,19,19,131073,1,9,16,19,131073,1,9,23,19,131073,22,8,7,19,131072,1,10,7,19,131073,8,10,26,19,131073,4,0,10,19,131072,1,0,22,3,65539,0,33,3,2,16387,5,9,17,14,256,6,8,25,19,131073,3,0,10,19,131072,1,0,24,3,65539,0,37,1,2,16403,5,9,19,14,256,0,20,1,2,16400,4,8,12,19,131072,1,9,12,19,131073,4,9,18,19,131073,1,7,18,19,131072,3,9,24,19,131073,0,48,20,19,131072,2,9,19,19,131073,0,41,20,19,131072,0,25,24,19,131072,3,8,12,19,131073,1,8,12,19,131073,1,8,9,19,131073,7,0,11,19,131072,1,0,21,3,65539,0,26,4,2,16387,1,12,4,1,16387,1,9,4,2,16384,1,7,16,19,131072,1,4,4,1,16384,0,5,1,21,8192,2,7,12,19,131072,1,4,4,1,16384,0,5,1,21,8192,2,7,17,19,131072,1,4,4,1,16384,0,5,1,21,8192,2,7,15,19,131072,1,4,4,1,16384,0,5,1,21,8192,2,7,14,19,131072,1,4,4,1,16384,0,5,1,21,8192,2,7,19,19,131072,1,4,4,1,16384,0,5,1,21,8192,2,7,18,19,131072,1,4,4,1,16384,0,5,1,21,8192,2,7,16,19,131072,1,4,4,1,16384,0,5,1,21,8192,2,7,15,19,131072,1,4,4,1,16384,0,5,1,21,8192,2,7,16,19,131072,1,4,4,1,16384,0,5,1,21,8192,2,7,19,19,131072,1,4,4,1,16384,0,5,1,21,8192,3,4,4,1,16384,0,5,1,21,8192,6,0,11,19,131072,1,0,23,3,65539,0,36,4,2,16403,2,12,4,1,16387,1,12,5,1,16387,1,12,9,1,16387,2,6,14,14,256,1,4,11,14,256,0,12,1,21,8192,0,7,1,21,8192,0,8,1,21,8192,1,6,5,1,16384,1,14,7,1,16387,1,16,3,1,16403,1,4,11,14,256,1,4,10,14,256,1,8,3,1,16400,1,6,12,14,256,0,28,3,1,16400,0,5,4,2,16400,2,6,12,14,256,0,25,4,2,16400,1,4,9,14,256,1,4,9,14,256,6,0,11,19,131072,1,0,29,3,65539,0,40,3,2,16387,2,12,5,1,16387,1,6,3,2,16384,2,2,5,1,16384,0,6,1,21,8192,0,2,14,14,256,4,0,11,19,131072,1,0,34,3,65539,0,47,7,2,16403,2,6,29,3,65536,0,30,4,19,131072,2,14,8,1,16387,1,14,4,1,16387,0,7,4,19,131072,0,15,4,19,131072,0,19,4,19,131072,7,8,8,1,16384,12,12,22,19,131072,5,12,19,19,131072,57,10,30,19,131073,1,10,30,19,131073,1,10,28,19,131073,1,10,30,19,131073,1,10,28,19,131073,7,7,11,19,131072,9,8,15,19,131073,1,8,14,19,131073,3,15,15,8,131075,1,6,4,6,32769,1,14,4,6,32785,1,7,6,6,32769,1,9,6,6,32769,1,10,6,6,32769,1,2,14,8,65536,0,17,5,6,32769,1,2,15,8,65537,2,7,11,19,131072,25,8,22,19,131073,1,8,15,19,131073,0,48,22,19,131072,1,8,21,19,131073,2,7,18,19,131072,3,8,18,19,131073,0,74,4,19,131072,3,8,26,19,131073,0,71,4,19,131072,2,8,18,19,131073,1,8,15,19,131073,1,8,12,19,131073,3,8,18,19,131073,1,8,17,19,131073,3,8,20,19,131073,0,48,15,19,131072,1,8,19,19,131073,0,48,18,19,131072,3,8,23,19,131073,1,8,22,19,131073,0,74,4,19,131072,3,8,18,19,131073,1,8,17,19,131073,5,8,14,19,131073,1,8,14,19,131073,1,8,18,19,131073,2,8,16,19,131073,1,8,16,19,131073,1,8,14,19,131073,1,8,10,19,131073,0,59,14,19,131072,1,8,9,19,131073,7,0,10,19,131072,1,0,23,3,65539,0,34,7,2,16387,0,19,3,2,16387,1,2,30,19,131072,1,2,15,14,256,1,2,9,14,256,1,2,28,19,131072,3,0,10,19,131072,1,0,23,3,65539,0,34,7,2,16387,0,21,3,2,16403,1,2,30,19,131072,1,2,15,14,256,0,25,3,2,16400,1,2,28,19,131072,3,8,17,19,131073,4,12,18,19,131072,19,0,10,19,131072,1,0,23,3,65539,0,34,1,2,16387,0,15,4,2,16403,0,16,3,2,16387,1,2,20,14,256,0,24,4,2,16400,1,2,9,14,256,7,0,10,19,131072,1,0,24,3,65539,0,35,6,2,16387,0,18,3,2,16387,1,6,1,21,8192,1,4,6,2,16384,0,7,1,21,8192,2,4,9,14,256,1,4,6,2,16384,0,7,1,21,8192,2,8,1,21,8192,0,1,12,14,256,1,16,2,1,16387,1,6,6,2,16384,0,7,1,21,8192,0,2,10,14,256,1,10,6,2,16384,1,8,15,14,256,2,8,9,14,256,4,4,13,14,256,1,4,9,14,256,7,0,10,19,131072,1,0,23,3,65539,0,34,4,2,16387,0,18,4,2,16403,0,17,3,2,16387,0,16,3,2,16387,0,16,4,2,16387,2,6,1,21,8192,1,8,1,21,8192,0,5,2,21,8192,0,3,1,21,8192,8,6,1,21,8192,0,1,13,14,256,1,8,3,2,16384,0,4,2,21,8192,0,5,2,21,8192,0,7,2,21,8192,1,17,1,1,16387,1,6,4,2,16384,0,8,1,21,8192,1,11,1,1,16384,0,2,1,21,8192,0,7,1,21,8192,0,7,2,21,8192,1,1,4,2,16384,0,8,1,21,8192,7,15,1,1,16387,1,10,1,21,8192,4,15,1,1,16384,0,2,1,21,8192,5,17,1,1,16387,1,11,1,1,16384,0,2,1,21,8192,0,7,1,21,8192,0,5,2,21,8192,1,1,4,2,16384,0,8,1,21,8192,0,2,16,14,256,2,15,1,21,8192,0,7,2,21,8192,1,1,4,2,16384,0,8,1,21,8192,2,15,1,21,8192,5,0,10,19,131072,1,0,27,3,65539,0,38,6,2,16387,0,20,4,2,16403,1,6,9,1,16387,1,6,6,2,16384,1,4,6,14,256,0,7,12,14,256,1,8,11,14,256,0,20,1,21,8192,2,6,9,1,16384,0,10,1,21,0,3,9,9,1,16384,4,8,23,19,131073,0,89,4,19,131072,6,7,11,19,131072,1,8,19,19,131073,5,7,11,19,131072,5,8,15,19,131073,1,8,15,19,131073,1,8,21,19,131073,6,15,14,8,131075,1,14,4,6,32769,1,14,8,6,32769,1,14,8,6,32769,1,9,14,8,131072,0,16,4,6,32769,1,2,14,8,65537,2,15,18,8,131075,2,2,14,6,32769,1,2,18,8,65537,2,0,10,19,131072,1,0,17,3,65539,0,28,14,19,131072,4,9,19,14,256,4,0,10,19,131072,1,0,16,3,65539,0,27,1,2,16387,1,2,18,8,131072,0,20,1,1,16387,0,5,18,8,131072,26,12,3,1,16387,1,2,14,8,131072,0,16,3,1,16387,1,7,3,1,16384,0,4,1,21,8192,0,2,1,1,16384,0,9,3,1,16384,0,5,3,1,16384,0,3,1,21,0,0,1,3,1,16384,0,5,4,6,32768,1,4,21,14,256,0,22,1,21,8192,0,5,19,14,256,0,20,3,1,16384,0,5,4,6,32768,1,8,3,1,16384,0,5,4,6,32768,0,6,21,14,256,0,22,1,21,8192,0,5,19,14,256,2,2,21,14,256,0,22,1,21,8192,0,5,19,14,256,5,0,10,19,131072,1,0,20,3,65539,0,31,1,2,16387,1,2,18,8,131072,0,20,1,1,16387,0,5,18,8,131072,1,2,14,8,131072,0,16,3,1,16387,0,6,1,1,16384,1,9,3,1,16384,1,4,14,8,131072,0,16,1,1,16387,0,4,3,1,16384,0,5,4,6,32768,1,4,4,14,256,0,5,3,1,16384,0,5,4,6,32768,1,4,4,14,256,0,5,3,1,16384,1,4,3,1,16384,0,4,1,21,0,0,2,1,1,16384,4,0,10,19,131072,1,0,20,3,65539,0,31,1,2,16387,0,9,1,2,16387,1,2,18,8,131072,0,20,1,1,16387,0,5,18,8,131072,1,12,3,1,16387,0,6,4,19,131072,1,2,14,8,131072,0,16,3,1,16387,0,6,1,1,16384,1,9,3,1,16384,1,8,6,3,131584,0,7,3,1,16384,0,5,4,6,32768,0,5,1,2,16384,0,3,2,21,0,1,6,3,1,16384,0,4,1,21,8192,0,3,1,21,8192,0,1,3,1,16384,3,4,3,1,16384,0,4,1,21,0,0,2,3,1,16384,0,5,4,6,32768,2,6,3,1,16384,0,4,2,21,8192,0,3,4,19,131072,0,5,2,21,8192,0,3,1,21,8192,0,1,14,14,256,6,0,10,19,131072,1,0,20,3,65539,0,31,1,2,16387,0,9,1,2,16387,0,13,1,2,16387,1,2,18,8,131072,0,20,1,1,16387,0,5,18,8,131072,1,6,3,1,16387,1,2,14,8,131072,0,16,3,1,16387,0,6,1,1,16384,1,9,3,1,16384,1,8,6,3,131584,0,7,3,1,16384,0,5,4,6,32768,0,5,1,2,16384,0,3,2,21,0,1,6,3,1,16384,0,4,1,21,8192,0,3,1,21,0,0,1,3,1,16384,0,5,8,6,32768,3,4,3,1,16384,0,4,1,21,0,0,2,3,1,16384,0,5,4,6,32768,2,6,3,1,16384,0,4,2,21,0,0,5,2,21,8192,0,3,1,21,8192,0,1,14,14,256,3,9,3,1,16384,3,0,10,19,131072,1,0,17,3,65539,1,14,14,1,16419,1,22,12,1,16419,1,13,9,1,16419,1,6,1,21,0,0,1,9,1,16416,1,23,3,1,16403,4,25,4,19,131072,43,7,12,19,131072,8,4,12,1,16416,0,13,1,21,8192,1,4,9,1,16416,0,10,1,21,0,1,8,12,14,256,0,13,1,21,8192,0,15,1,21,8192,1,13,4,19,131072,2,9,1,21,8192,4,0,10,19,131072,1,0,22,3,65539,1,2,18,8,131072,0,20,6,1,16387,1,6,6,1,16384,1,4,6,1,16384,0,13,1,21,8192,5,0,10,19,131072,1,0,22,3,65539,0,33,1,2,16387,0,15,4,2,16403,0,18,8,2,16387,0,23,8,2,16387,0,20,1,2,65539,1,2,18,8,131072,0,20,1,1,16387,0,5,18,8,131072,1,2,14,8,131072,0,16,2,1,16387,0,6,14,8,131072,0,18,6,14,256,0,14,14,8,131072,1,6,2,1,16384,1,4,6,18,66048,0,7,4,1,16387,0,7,6,3,131584,0,7,4,2,16400,0,5,1,21,0,1,4,2,1,16384,0,4,4,6,32768,0,5,1,21,0,0,10,6,14,256,0,7,4,1,16384,1,8,2,1,16384,0,4,4,6,32768,1,6,6,3,131584,0,7,2,1,16384,0,4,4,6,34816,0,6,4,2,16400,0,6,4,1,16384,1,6,2,1,16384,0,13,1,21,8192,1,6,2,1,16384,0,4,8,6,32768,0,9,1,21,0,0,2,8,2,16384,1,6,2,1,16384,0,4,4,6,32768,0,5,1,21,8192,0,2,1,1,16384,3,2,1,1,16384,0,8,1,21,8192,0,2,2,1,16384,4,17,19,0,65539,0,22,4,19,131072,2,0,10,19,131072,1,0,12,3,65539,1,6,19,0,65536,0,20,2,21,8192,0,3,4,19,131072,1,26,15,19,131072,5,7,11,19,131072,9,8,21,19,131073,0,29,16,19,131072,1,8,16,19,131073,0,29,21,19,131072,0,24,16,19,131072,2,8,26,19,131073,0,29,19,19,131072,2,8,20,19,131073,0,26,16,19,131072,1,8,17,19,131073,0,23,20,19,131072,0,23,16,19,131072,2,7,11,19,131072,6,0,17,19,131072,1,0,12,3,65539,2,12,4,1,16387,1,2,9,14,256,7,12,5,6,32769,1,12,6,6,32769,1,12,7,6,32769,1,12,7,6,32769,1,6,7,6,32769,1,6,12,6,32769,1,16,6,6,32769,1,2,16,8,65537,2,0,17,19,131072,1,0,25,3,65539,0,26,14,8,65536,0,16,2,2,16387,2,2,16,8,65536,0,18,4,1,16387,0,8,16,8,65536,0,19,2,2,16384,0,4,10,6,32768,1,6,4,1,16387,0,7,4,1,16384,0,5,1,21,0,0,2,4,1,16384,0,6,12,6,32768,0,13,1,21,0,3,9,4,1,16384,3,0,17,19,131072,1,0,25,3,65539,0,26,14,8,65536,0,16,4,2,16387,1,2,16,8,65536,0,18,4,1,16387,0,7,4,2,16384,0,5,1,21,0,0,3,16,8,65536,0,20,4,2,16384,0,6,10,6,32768,0,11,1,21,0,1,12,5,1,16387,5,0,11,19,131072,0,12,16,8,65536,1,0,20,3,65539,0,31,3,2,16387,2,6,1,21,8192,3,4,16,8,65536,0,18,4,1,16387,0,8,16,8,65536,0,19,6,14,256,0,14,16,8,65536,2,4,4,1,16384,0,12,1,21,8192,1,4,9,14,256,0,10,4,1,16384,2,8,13,14,256,1,6,4,1,16384,0,13,1,21,8192,1,6,9,14,256,1,6,4,1,16384,0,14,1,21,8192,2,6,4,1,16384,0,13,1,21,8192,0,2,22,14,256,0,23,4,1,16384,1,10,4,1,16384,1,8,4,1,16384,0,14,1,21,8192,0,2,11,14,256,1,12,4,1,16384,1,10,9,14,256,1,10,16,14,256,0,17,4,1,16384,2,10,9,14,256,0,10,4,1,16384,1,10,9,14,256,0,10,4,1,16384,1,10,4,14,256,0,5,4,1,16384,4,8,9,14,256,1,8,4,1,16384,0,14,1,21,8192,4,4,4,1,16384,0,14,1,21,8192,0,2,22,14,256,0,23,4,1,16384,1,8,14,14,256,1,6,11,14,256,1,6,4,1,16384,0,14,1,21,8192,2,8,4,1,16384,3,6,4,1,16384,0,6,7,6,32768,0,8,1,21,0,2,4,4,1,16384,0,6,12,6,32768,0,13,1,21,0,1,4,4,1,16384,0,13,1,21,8192,1,11,4,1,16384,4,0,11,19,131072,1,0,20,3,65539,0,21,16,8,65536,0,18,4,2,16387,2,2,10,14,256,0,11,4,2,16384,1,2,10,14,256,0,11,4,2,16384,1,2,10,14,256,0,11,4,2,16384,1,2,10,14,256,0,11,4,2,16384,1,2,4,14,256,0,5,4,2,16384,7,8,3,6,32769,1,2,14,8,65536,0,16,2,6,32769,1,6,3,6,32769,1,12,4,6,32769,1,7,18,19,131072,3,2,12,8,65537,3,7,18,19,131072,16,0,11,19,131072,1,0,17,3,65539,0,18,12,8,65536,0,14,1,2,16387,2,9,18,14,256,0,19,1,2,16384,3,0,11,19,131072,1,0,19,3,65539,0,32,3,2,16403,0,5,12,8,65536,0,14,1,2,16387,2,12,3,1,16387,0,6,4,19,131072,1,12,4,1,16387,1,6,4,1,16384,1,14,3,1,16387,1,8,3,1,16384,1,16,4,1,16387,1,6,16,14,256,2,10,4,1,16384,4,8,3,1,16384,0,4,1,21,8192,0,2,15,14,256,2,8,9,14,256,3,4,9,14,256,5,0,11,19,131072,1,0,16,3,65539,0,17,12,8,65536,0,14,1,2,16387,5,0,11,19,131072,1,0,16,3,65539,0,17,12,8,65536,0,14,1,2,16387,5,0,11,19,131072,1,0,17,3,65539,0,18,12,8,65536,0,14,1,2,16387,2,14,4,1,16403,0,7,19,3,65536,0,20,1,2,16384,0,3,2,6,32768,1,12,4,1,16387,0,7,26,19,131072,1,6,4,1,16384,0,5,2,21,8192,0,3,1,2,16384,1,14,4,1,16387,1,8,4,1,16384,7,6,21,14,256,0,22,1,21,8192,3,6,9,14,256,1,6,4,1,16384,0,5,1,21,8192,0,2,4,19,131072,8,0,11,19,131072,1,0,18,3,65539,0,29,1,2,16387,0,13,14,19,131072,5,0,11,19,131072,1,0,20,3,65539,0,21,12,8,65536,0,14,1,2,16387,0,3,12,8,65536,0,14,1,2,16387,2,8,1,1,16387,0,4,1,2,16384,1,8,1,1,16387,0,4,1,2,16384,1,10,1,1,16384,0,2,1,21,0,0,2,1,1,16384,0,3,1,21,0,0,2,1,21,0,0,3,1,21,0,0,4,1,1,16384,0,2,1,21,0,0,2,1,1,16384,0,3,1,21,0,0,4,1,21,0,4,0,11,19,131072,1,0,24,3,65539,0,25,12,8,65536,0,14,1,2,16387,0,3,12,8,65536,0,14,1,2,16387,0,7,2,2,16387,2,12,3,1,16387,10,0,11,19,131072,0,26,21,3,65537,2,7,18,19,131072,12,0,11,19,131072,1,0,17,3,65539,1,23,19,19,131072,0,20,4,1,16419,5,0,17,19,131072,1,0,18,3,65539,0,29,2,2,16387,1,7,18,19,131072,6,10,7,19,131072,1,15,7,19,131072,4,0,11,19,131072,1,0,16,3,65537,0,23,3,2,16387,0,5,14,8,65536,0,16,2,2,16387,0,8,3,2,16387,2,17,19,0,65539,0,22,4,19,131072,2,0,11,19,131072,1,0,20,3,65539,0,31,1,2,16387,2,2,12,8,65536,0,14,4,1,16387,0,8,12,8,65536,1,12,4,1,16387,1,6,4,1,16384,0,6,3,6,32768,0,4,2,21,0,0,3,16,19,131072,1,4,14,8,65536,0,16,2,1,16387,0,5,4,1,16384,0,6,2,6,32768,1,4,16,8,65536,0,18,4,1,16387,0,7,2,1,16384,0,3,1,21,0,0,3,16,8,65536,0,20,2,1,16384,0,4,10,6,32768,0,11,1,21,0,1,14,7,1,16387,1,8,7,1,16384,2,16,3,1,16387,9,16,4,1,16387,0,7,4,19,131072,0,15,4,19,131072,0,19,4,19,131072,3,10,4,1,16384,0,6,7,6,32768,2,18,3,1,16387,1,12,3,1,16384,1,10,3,1,16384,0,4,1,21,8192,0,2,23,19,131072,2,10,3,1,16384,0,4,1,21,8192,2,8,10,14,256,2,20,4,1,16387,1,18,5,1,16387,1,8,3,1,16384,0,4,1,21,8192,0,4,1,21,8192,2,10,1,21,8192,1,8,21,14,256,4,6,10,14,256,2,13,26,19,131072,2,18,4,1,16403,0,7,19,3,65536,0,20,2,1,16384,1,6,6,14,256,0,83,4,1,16400,0,5,1,21,0,0,2,4,1,16400,0,5,1,21,0,3,4,10,14,256,2,2,10,14,256,1,7,18,19,131072,3,2,12,19,131072,3,0,11,19,131072,1,0,19,3,65539,0,30,1,2,16387,0,13,4,2,16387,2,2,12,8,65536,0,14,4,1,16387,0,8,12,8,65536,3,11,4,19,131072,2,4,12,8,65536,0,27,1,21,8192,0,2,4,1,16384,1,2,4,1,16384,0,11,1,21,8192,1,2,9,14,256,4,0,11,19,131072,1,0,17,3,65539,0,28,1,2,16387,0,13,14,19,131072,2,2,12,8,65536,0,14,4,1,16387,0,8,12,8,65536,1,6,4,1,16384,1,4,9,14,256,0,10,4,1,16384,1,11,4,1,16384,6,0,10,19,131072,1,0,19,3,65539,0,30,1,2,16387,0,13,14,19,131072,2,2,12,8,65536,0,14,4,1,16387,0,8,12,8,65536,1,2,4,1,16384,0,6,3,6,32768,0,4,1,21,0,4,0,10,19,131072,1,0,20,3,65539,0,31,1,2,16387,0,13,14,19,131072,2,2,12,8,65536,0,14,4,1,16387,0,8,12,8,65536,1,2,4,1,16384,0,6,3,6,32768,0,4,1,21,0,0,2,16,19,131072,4,0,10,19,131072,1,0,16,3,65539,0,27,1,2,16387,0,13,4,2,16387,2,12,3,1,16387,1,6,1,21,8192,0,1,17,14,256,0,37,1,21,8192,1,11,4,19,131072,2,4,12,8,65536,0,14,4,1,16387,0,8,12,8,65536,1,14,3,1,16387,1,8,3,1,16384,1,10,15,14,256,11,0,18,0,65539,10,0,11,19,131072,1,0,21,3,65539,1,14,14,1,16419,2,25,22,1,16419,44,22,17,1,16419,1,13,9,1,16419,1,6,1,21,0,0,1,9,1,16416,1,23,3,1,16403,4,25,4,19,131072,66,7,12,19,131072,8,4,17,1,16416,0,18,1,21,8192,1,4,9,1,16416,0,10,1,21,0,1,8,12,14,256,0,13,1,21,8192,0,20,2,21,8192,1,13,4,19,131072,2,9,1,21,8192,3,0,11,19,131072,1,0,16,3,65539,0,23,3,2,16387,0,5,14,8,65536,0,16,2,2,16387,0,8,3,2,16387,2,2,12,8,65536,0,14,4,1,16387,1,6,4,1,16384,1,4,4,1,16384,0,11,1,21,8192,0,2,3,2,16384,1,4,4,1,16384,0,6,2,6,32768,0,5,1,21,0,0,2,2,2,16384,1,4,4,1,16384,0,6,3,6,32768,0,5,1,21,0,0,2,3,2,16384,1,4,4,1,16384,0,11,1,21,8192,1,7,18,19,131072,3,8,3,2,16384,0,4,2,21,0,0,3,16,19,131072,4,6,10,14,256,12,8,4,6,32769,1,2,14,8,65536,0,16,2,6,32769,1,2,6,18,66048,0,7,4,6,32769,1,2,12,8,65537,2,0,11,19,131072,1,0,17,3,65539,0,18,12,8,65536,0,14,1,2,16387,2,7,6,1,16387,0,7,16,19,131072,1,6,17,3,65536,0,18,6,1,16384,0,8,1,2,16384,0,9,1,2,16384,0,3,4,6,32768,0,16,6,1,16384,1,11,26,19,131072,0,52,6,1,16384,0,8,1,2,16384,0,3,2,6,32768,0,4,4,6,32784,2,11,26,19,131072,0,47,1,2,16384,0,3,2,6,32768,0,4,4,6,32784,4,0,11,19,131072,1,0,16,3,65539,0,17,12,8,65536,0,14,1,2,16387,2,7,6,1,16387,0,7,16,19,131072,1,6,17,3,65536,0,18,6,1,16384,0,8,1,2,16384,0,9,1,2,16384,0,3,4,6,32768,0,16,6,1,16384,1,11,26,19,131072,0,35,6,1,16384,0,8,1,2,16384,0,3,2,6,32768,0,4,4,6,32784,6,0,11,19,131072,1,0,20,3,65539,0,21,12,8,65536,0,14,1,2,16387,0,3,12,8,65536,0,14,1,2,16387,2,2,6,18,66048,0,7,1,1,16387,0,4,1,2,16384,0,3,4,6,32768,1,2,6,18,66048,0,7,1,1,16387,0,4,1,2,16384,0,3,4,6,32768,1,6,1,1,16387,0,5,1,1,16384,0,2,1,21,0,0,2,1,1,16384,0,3,1,21,0,0,2,1,21,0,0,3,1,21,0,0,4,1,1,16384,0,2,1,21,0,0,2,1,1,16384,0,3,1,21,0,0,4,1,21,0,1,9,1,1,16384,0,2,1,21,0,0,2,1,1,16384,0,2,1,21,0,0,2,7,3,131584,0,22,1,2,16384,0,23,1,2,16384,0,10,1,21,0,0,1,1,2,16384,0,3,4,6,32768,3,0,11,19,131072,0,26,21,3,65537,2,0,11,19,131072,1,0,17,3,65539,1,23,19,19,131072,0,20,4,1,16419,4,0,17,19,131072,1,0,18,3,65539,0,29,2,2,16387,5,0,11,19,131072,1,0,20,3,65539,0,31,1,2,16387,2,6,18,3,65536,1,4,12,8,65536,0,14,4,1,16387,0,8,12,8,65536,1,4,4,14,256,0,5,4,1,16384,2,2,12,19,131072,3,0,11,19,131072,1,0,21,3,65539,1,14,14,1,16419,1,22,17,1,16419,1,13,9,1,16419,1,6,1,21,0,0,1,9,1,16416,1,23,3,1,16403,4,25,4,19,131072,66,7,12,19,131072,8,4,17,1,16416,0,18,1,21,8192,1,4,9,1,16416,0,10,1,21,0,1,8,12,14,256,0,13,1,21,8192,0,20,2,21,8192,1,13,4,19,131072,2,9,1,21,8192,3,0,11,19,131072,1,0,16,3,65539,0,23,3,2,16387,0,5,6,18,66048,0,7,4,2,16387,0,6,14,8,65536,0,16,2,2,16387,2,2,12,8,65536,0,14,4,1,16387,1,6,4,1,16384,1,10,4,1,16387,0,7,6,14,256,0,7,4,2,16384,1,8,4,1,16384,1,6,6,3,131584,0,7,4,1,18432,0,6,3,2,16384,0,5,4,2,16384,1,6,4,1,16384,0,11,1,21,8192,0,2,4,1,16384,1,6,4,1,16384,0,6,2,6,32768,0,5,1,21,0,0,2,2,2,16384,1,6,4,1,16384,0,6,4,6,32768,0,5,1,21,0,0,2,4,2,16384,2,6,12,19,131072,1,6,4,1,16384,0,5,1,21,0,6,0,11,19,131072,0,12,14,8,65536,1,0,23,3,65539,0,34,3,2,16387,0,11,3,2,16387,0,5,6,18,66048,0,7,4,2,16387,2,6,18,3,65536,1,4,12,8,65536,0,14,4,1,16387,0,8,12,8,65536,1,8,4,1,16384,0,6,4,6,32768,0,5,2,21,0,0,3,4,2,16384,1,4,6,3,131584,0,7,3,2,16384,0,5,4,1,16384,0,12,4,2,16384,1,11,4,1,16384,0,6,2,6,32768,10,17,16,0,65539,0,19,4,19,131072,2,0,11,19,131072,1,0,9,3,65539,2,26,4,19,131072,12,0,11,19,131072,0,12,12,8,65536,1,0,23,3,65539,0,34,5,2,16387,2,12,3,1,16387,2,6,18,3,65536,1,12,12,8,65536,2,7,18,19,131072,12,2,3,1,16384,0,4,1,21,8192,2,13,28,19,131072,1,6,16,14,256,3,15,7,1,16387,1,8,7,1,16384,0,8,2,21,8192,0,3,4,19,131072,1,16,4,1,16387,3,7,20,19,131072,7,10,3,1,16384,1,1,9,14,256,2,5,14,14,256,0,18,11,14,256,19,10,12,8,65536,6,0,11,19,131072,1,0,22,3,65539,0,33,3,2,16387,0,9,3,2,16387,1,6,3,2,16384,0,4,2,21,0,0,3,16,19,131072,1,4,12,8,65536,0,14,4,1,16387,1,8,4,1,16384,1,10,6,1,16387,0,9,4,1,16384,0,6,3,6,32768,1,6,4,1,16384,0,6,3,6,32768,0,4,1,21,0,0,2,3,2,16384,1,13,6,1,16384,8,0,11,19,131072,1,0,28,3,65539,0,39,3,2,16387,0,12,3,2,16387,0,5,14,8,65536,0,16,2,2,16387,0,8,5,2,16387,0,12,3,2,16387,1,6,3,1,16387,1,2,12,8,65536,0,14,4,1,16387,1,6,13,1,16387,0,17,5,2,16384,0,6,1,21,0,0,2,26,19,131072,0,28,2,21,0,2,6,1,21,8192,1,11,10,19,131072,2,8,3,2,16384,1,6,1,21,0,0,1,3,2,16384,0,4,1,21,0,1,12,5,2,16384,0,6,1,21,0,0,2,20,19,131072,0,22,1,21,0,0,2,23,19,131072,0,24,1,21,0,0,2,7,19,131072,3,2,3,1,16384,0,4,1,21,0,0,2,10,19,131072,3,6,3,2,16384,1,4,1,21,0,0,1,3,2,16384,0,4,1,21,0,1,9,4,1,16384,1,10,4,1,16387,0,7,4,1,16384,1,8,2,2,16384,1,6,14,8,65536,0,16,2,1,16387,0,5,4,1,16384,0,6,2,6,32768,1,10,2,1,16384,0,3,2,21,0,0,3,2,2,16384,2,12,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,4,1,16384,3,8,14,8,65536,0,16,2,1,16387,0,5,14,3,65536,0,15,2,1,16384,0,4,4,6,32784,0,5,2,2,18432,1,12,1,21,0,0,1,2,1,16384,1,10,4,1,16384,0,5,1,21,0,0,3,12,8,65536,0,15,4,1,16384,2,14,3,2,16384,1,16,9,1,16387,1,12,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,13,3,65536,0,14,2,1,18432,0,3,4,1,18432,0,5,1,21,0,0,1,9,1,18432,1,16,9,1,16384,0,10,2,21,0,0,3,20,19,131072,1,14,6,14,256,0,7,3,2,16384,1,18,3,2,16384,1,16,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,20,19,131072,7,10,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,4,1,16384,4,6,4,1,16384,1,10,5,2,16384,0,6,1,21,0,0,2,20,19,131072,0,22,2,21,0,0,3,20,19,131072,0,22,2,21,0,0,3,1,21,0,0,1,4,1,16384,0,6,3,6,32768,1,6,3,1,16384,0,4,1,21,0,0,2,28,19,131072,2,10,3,2,16384,1,8,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,4,1,16384,0,6,3,6,32768,1,10,5,2,16384,0,6,1,21,0,0,2,19,19,131072,1,8,4,1,16384,0,6,3,6,32768,0,4,1,21,0,2,10,5,2,16384,0,6,1,21,0,0,2,18,19,131072,1,8,4,1,16384,0,10,1,21,8192,2,6,3,1,16384,0,4,1,21,0,0,2,7,19,131072,3,8,13,1,16384,1,6,16,8,65536,0,18,4,1,16387,0,7,2,2,16384,0,3,1,21,0,0,3,16,8,65536,0,20,2,2,16384,0,4,10,6,32768,0,11,1,21,0,1,10,4,1,16384,0,5,2,21,0,0,3,1,21,0,0,1,4,1,16384,0,6,12,6,32768,1,18,5,1,16387,1,12,5,1,16384,1,20,7,1,16387,1,10,4,1,16384,0,6,12,6,32768,0,13,1,21,0,1,10,7,1,16384,0,8,1,21,8192,0,2,23,19,131072,1,10,4,1,16384,0,6,12,6,32768,0,13,1,21,0,1,14,14,14,256,1,12,11,14,256,1,12,7,1,16384,0,8,1,21,8192,2,14,7,1,16384,1,12,12,8,65536,0,14,4,1,16387,1,16,4,1,16384,1,20,4,1,16387,2,18,9,19,131072,0,10,3,1,16384,1,20,3,2,16384,1,18,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,4,1,16384,2,18,4,1,16384,0,6,3,6,32768,0,4,1,21,0,1,18,3,1,16384,0,4,1,21,0,0,2,12,19,131072,0,13,3,1,16384,1,18,3,1,16384,0,4,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,18,3,1,16384,0,4,1,21,0,0,2,12,19,131072,0,13,3,1,16384,4,12,9,14,256,4,11,9,19,131072,1,12,3,2,16384,1,10,1,21,0,0,1,3,2,16384,0,4,1,21,0,1,12,14,14,256,1,10,11,14,256,1,8,3,1,16384,0,4,1,21,0,0,2,7,19,131072,4,9,3,1,16384,5,0,11,19,131072,1,0,30,3,65539,0,41,3,2,16387,0,12,3,2,16387,0,5,14,8,65536,0,16,2,2,16387,1,6,1,21,8192,0,1,17,14,256,1,11,15,19,131072,2,10,4,1,16387,1,4,14,8,65536,0,16,2,1,16387,3,16,3,1,16403,1,16,4,1,16403,0,7,3,1,16400,0,4,1,21,0,0,2,6,3,131584,0,7,3,1,16400,0,19,1,21,0,1,8,4,1,16400,1,6,4,1,16400,0,5,1,21,0,0,2,2,2,16384,0,3,1,21,0,0,2,18,3,65536,0,19,4,1,16400,0,5,1,21,0,0,6,1,21,0,0,1,4,1,18432,0,6,2,2,16384,0,4,4,6,32784,0,6,1,21,0,1,8,1,21,0,0,1,4,1,16400,1,13,10,19,131072,1,4,2,1,16384,0,3,1,21,0,0,2,14,3,65536,0,15,4,1,16400,0,5,2,2,18432,1,8,2,1,16384,1,10,9,1,16387,1,6,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,13,3,65536,0,14,2,1,18432,0,3,4,1,18432,0,5,1,21,0,0,1,9,1,18432,1,6,6,14,256,0,7,1,21,0,0,1,9,1,16384,2,13,10,19,131072,2,11,7,19,131072,6,0,11,19,131072,1,0,25,3,65539,0,36,3,2,16387,0,11,3,2,16387,0,5,6,18,66048,0,7,2,2,16387,0,4,14,8,65536,0,16,2,2,16387,1,2,14,8,65536,0,16,2,1,16387,1,6,1,21,0,0,1,2,1,16384,0,11,10,19,131072,1,6,2,2,16384,1,8,2,1,16384,0,3,2,21,0,0,3,2,2,16384,2,6,14,8,65536,0,16,2,1,16387,0,5,14,3,65536,0,15,2,1,16384,0,4,4,6,32784,0,5,2,2,18432,1,10,1,21,0,0,1,2,1,16384,0,11,10,19,131072,3,9,7,19,131072,12,0,11,19,131072,1,0,29,3,65539,0,30,16,8,65536,0,18,4,2,16387,0,16,9,2,16387,2,12,4,1,16387,1,12,6,1,16387,1,6,6,1,16384,1,4,4,1,16384,0,5,1,21,8192,0,2,13,14,256,0,22,4,2,16384,0,15,4,19,131072,1,8,4,1,16384,1,13,28,19,131072,1,17,7,1,16387,1,10,7,1,16384,0,8,2,21,8192,0,3,4,19,131072,1,18,4,1,16387,1,12,4,1,16384,0,5,2,21,8192,0,3,4,19,131072,1,10,4,1,16384,0,5,1,21,8192,0,2,10,14,256,1,10,1,21,8192,0,9,1,21,8192,2,12,4,1,16384,3,10,9,14,256,1,10,4,1,16384,0,5,1,21,8192,30,14,4,1,16387,1,8,4,1,16384,2,6,4,1,16384,0,5,1,21,8192,0,2,17,14,256,0,18,4,2,16384,1,6,9,14,256,7,0,11,19,131072,1,0,23,3,65539,0,34,4,2,16387,0,16,9,2,16387,2,13,28,19,131072,1,13,7,1,16387,1,6,7,1,16384,0,8,2,21,8192,0,3,4,19,131072,1,14,4,1,16387,1,8,4,1,16384,0,5,2,21,8192,0,3,4,19,131072,1,6,4,1,16384,0,5,1,21,8192,0,2,10,14,256,1,6,1,21,8192,0,9,1,21,8192,2,8,4,1,16384,3,13,1,21,0,8,0,10,19,131072,1,0,30,3,65539,0,41,4,2,16387,1,12,3,1,16387,2,11,4,19,131072,2,4,12,8,65536,0,14,5,1,16387,1,8,5,1,16384,3,10,23,3,65536,0,40,2,21,8192,1,15,4,19,131072,8,0,11,19,131072,1,0,25,3,65539,0,36,4,2,16387,0,12,3,2,16387,0,5,14,8,65536,0,16,4,2,16387,0,10,5,2,16387,1,2,16,8,65536,0,18,10,1,16387,1,13,4,1,16387,1,6,3,1,16387,5,2,10,1,16384,0,11,1,21,0,0,2,4,2,16384,0,5,1,21,0,0,3,16,8,65536,0,20,4,2,16384,0,6,10,6,32768,0,12,1,21,0,1,2,3,1,16384,0,4,1,21,0,0,3,5,2,16384,0,6,1,21,0,0,2,16,19,131072,0,18,1,21,0,0,2,16,19,131072,0,17,1,21,0,1,6,10,1,16384,0,11,2,21,8192,0,3,10,1,16384,1,4,12,8,65536,0,14,6,1,16387,1,8,5,2,16384,0,6,1,21,0,0,2,20,19,131072,1,6,6,1,16384,0,7,1,21,0,0,3,12,8,65536,1,10,6,1,16384,1,18,9,1,16387,1,15,6,1,16384,1,3,6,1,16384,0,7,1,21,0,0,3,12,8,65536,0,16,6,1,16384,1,8,6,1,16384,0,13,1,21,8192,1,8,6,1,16384,0,7,1,21,0,0,3,12,8,65536,1,7,18,19,131072,5,6,6,1,16384,0,7,1,21,8192,0,2,12,14,256,0,27,10,1,16384,1,7,18,19,131072,6,8,6,1,16384,1,6,6,1,16384,0,12,1,21,8192,0,2,3,2,16384,1,6,6,1,16384,0,8,2,6,32768,0,3,1,21,0,0,2,4,2,16384,1,6,6,1,16384,0,8,3,6,32768,0,4,1,21,0,0,2,3,1,16384,1,6,6,1,16384,0,13,1,21,8192,6,2,6,14,256,0,7,1,21,0,0,2,5,2,16384,0,6,1,21,0,0,2,20,19,131072,3,6,4,1,16384,0,5,2,21,8192,0,3,10,1,16384,0,11,2,21,8192,0,3,1,21,0,0,2,5,2,16384,0,6,1,21,0,0,2,21,19,131072,1,14,4,1,16387,1,4,9,14,256,1,4,4,1,16384,0,5,1,21,8192,7,0,17,19,131072,1,0,24,3,65539,0,31,3,2,16387,0,5,6,18,66048,0,7,2,2,16387,0,4,14,8,65536,0,16,4,2,16387,8,7,17,19,131072,4,17,21,0,65539,0,24,4,19,131072,3,0,11,19,131072,1,0,21,3,65539,1,6,21,0,65536,0,22,2,21,8192,0,3,4,19,131072,1,4,21,0,65536,0,22,1,21,8192,0,2,10,14,256,5,0,11,19,131072,0,12,16,8,65536,1,0,21,3,65539,0,28,14,19,131072,1,7,17,19,131072,7,8,12,1,16387,0,15,16,14,256,0,17,19,19,131072,1,6,14,14,256,1,4,11,14,256,1,4,12,1,16384,0,13,1,21,0,3,10,16,8,65536,0,20,12,1,16384,4,11,19,0,65539,2,0,11,19,131072,1,0,25,3,65539,0,36,3,2,16387,2,2,16,8,65536,0,18,11,1,16387,0,15,16,8,65536,0,20,20,14,256,0,26,19,19,131072,1,2,14,8,65536,0,17,5,1,16387,0,8,11,1,16384,0,13,5,6,32768,1,2,6,18,66048,0,7,1,1,16387,1,6,2,21,0,0,2,19,0,65536,0,20,2,21,0,2,7,1,1,16384,0,2,1,21,0,0,4,1,1,16384,0,2,1,21,0,0,2,11,1,16384,0,13,4,6,32768,0,6,2,21,0,0,2,1,1,16384,1,4,14,8,65536,0,16,2,1,16387,0,5,5,1,16384,0,6,1,1,16384,1,8,2,1,16384,0,4,7,6,32768,1,6,16,8,65536,0,18,4,1,16387,0,8,16,8,65536,0,20,2,1,16384,0,4,10,6,32768,1,6,2,1,16384,0,4,10,6,32768,0,11,1,21,0,1,10,4,1,16384,0,6,20,3,65536,0,21,4,1,18432,4,2,16,0,65536,0,17,1,21,8192,0,2,4,19,131072,2,2,19,0,65536,0,20,1,21,8192,0,2,4,19,131072,2,2,21,0,65536,0,22,1,21,8192,0,2,4,19,131072,1,2,19,0,65536,0,20,1,21,8192,0,2,4,19,131072,3,0,11,19,131072,1,0,21,3,65539,0,22,16,8,65536,0,18,11,2,16387,5,21,31,1,16419,0,39,4,19,131072,0,6,4,19,131072,0,9,4,19,131072,1,12,6,1,16387,0,43,20,19,131072,2,12,7,1,16387,0,46,19,19,131072,1,6,7,1,16384,0,8,2,21,8192,1,8,18,14,256,0,27,24,19,131072,0,35,2,21,8192,1,6,2,21,0,0,2,19,0,65536,1,6,19,0,65536,0,20,1,21,8192,2,6,9,14,256,3,4,10,14,256,4,0,11,19,131072,0,12,14,8,65536,1,0,21,3,65539,0,34,4,2,16403,2,12,5,1,16387,1,12,3,1,16387,1,12,3,1,16387,1,2,14,8,65536,0,16,10,1,16387,1,6,3,1,16384,1,4,10,1,16384,0,11,1,21,0,0,3,14,8,65536,0,18,20,14,256,0,26,4,19,131072,2,4,16,8,65536,0,18,11,1,16387,0,14,14,19,131072,1,4,10,1,16384,0,11,1,21,0,0,2,20,3,65536,0,21,11,1,18432,0,13,11,1,18432,0,13,4,2,16400,1,8,10,1,16384,1,6,3,1,16384,0,4,1,21,8192,0,2,13,14,256,0,22,10,1,16384,0,12,4,19,131072,0,6,4,19,131072,1,10,3,1,16384,1,8,14,14,256,1,8,9,14,256,4,2,9,14,256,1,9,10,1,16384,6,8,22,19,131073,1,8,13,19,131073,1,8,15,19,131073,2,0,11,19,131072,1,0,22,3,65539,0,35,4,2,16403,0,10,7,2,16387,2,6,14,14,256,1,14,4,1,16387,1,14,5,1,16387,1,14,9,1,16387,1,4,11,14,256,0,12,1,21,8192,0,7,1,21,8192,0,8,1,21,8192,1,8,5,1,16384,1,16,7,1,16387,1,18,3,1,16403,1,18,7,1,16403,0,10,3,1,16400,0,4,1,21,0,0,2,3,1,16400,0,4,1,21,0,1,6,10,14,256,1,6,11,14,256,1,10,7,2,16384,1,1,12,14,256,0,28,4,2,16400,0,6,7,1,16400,2,1,12,14,256,0,28,7,1,16400,0,9,4,2,16400,2,6,9,14,256,8,0,11,19,131072,1,0,19,3,65539,0,24,6,2,16387,2,6,14,14,256,2,9,4,1,16387,1,4,13,14,256,0,14,4,1,16384,0,13,4,1,16384,0,30,6,2,16384,1,11,22,3,65536,0,23,4,1,16384,6,0,17,19,131072,1,0,20,3,65539,0,31,4,2,16387,2,2,12,8,65536,0,14,1,1,16387,0,5,12,8,65536,1,2,14,8,65536,0,16,2,1,16387,0,5,1,1,16384,0,2,1,21,0,0,2,1,1,16384,0,3,2,6,32768,0,3,1,21,0,1,9,2,1,16384,0,3,1,21,0,0,2,2,1,16384,0,4,3,6,32784,0,4,1,21,0,3,0,11,19,131072,1,0,21,3,65539,0,34,4,2,16403,0,16,3,2,16387,2,6,4,2,16400,1,12,18,19,131072,11,18,5,1,16403,0,9,3,2,16384,0,4,1,21,0,0,7,7,14,33024,0,9,7,14,33024,0,8,1,21,0,1,10,5,1,16400,1,11,3,1,16387,1,13,4,1,16403,1,5,4,1,16400,7,1,10,14,256,12,0,11,19,131072,1,0,22,3,65539,0,33,3,2,16387,0,5,14,8,65536,0,16,2,2,16387,0,8,14,19,131072,0,28,5,2,16387,1,8,6,1,16387,1,6,22,19,131072,0,28,1,21,0,0,1,6,1,16384,0,8,2,2,16384,0,4,5,2,16384,0,7,2,21,8192,0,3,1,21,0,1,4,11,14,256,2,9,6,1,16384,3,7,18,19,131072,56,7,11,19,131072,6,8,19,19,131073,0,36,10,19,131072,0,23,9,19,131072,2,8,20,19,131073,0,52,10,19,131072,0,11,17,19,131072,0,25,9,19,131072,4,10,14,19,131073,0,31,10,19,131072,0,23,9,19,131072,5,8,87,19,131073,1,8,19,19,131073,1,8,177,19,131073,1,8,48,19,131073,1,8,59,19,131073,1,8,83,19,131073,1,8,252,19,131073,1,8,66,19,131073,1,8,69,19,131073,1,8,176,19,131073,1,8,174,19,131073,1,8,25,19,131073,1,8,15,19,131073,1,8,26,19,131073,1,8,21,19,131073,1,8,20,19,131073,1,8,35,19,131073,1,8,32,19,131073,1,8,145,19,131073,1,8,57,19,131073,1,8,31,19,131073,1,8,21,19,131073,1,7,14,8,65536,0,16,10,0,65539,1,7,16,8,65536,0,17,11,0,65539,0,15,10,0,65536,1,8,14,19,131073,1,8,21,19,131073,4,7,14,19,131072,1,8,14,19,131072,2,8,14,19,131073,9,10,9,19,131073,3,8,9,19,131073,2,7,11,19,131072,3,8,1,22,0,0,10,1,16,32771,0,1,1,22,0,0,8,16,8,131075,1,9,16,8,32771,1,4,1,16,32768,0,3,3,6,32769,1,4,16,8,36867,0,17,1,16,32768,0,3,1,2,16387,0,5,3,6,32768,0,4,1,2,16384,1,5,16,8,36867,0,21,6,21,0,0,7,3,6,32768,1,4,16,8,32768,0,26,1,21,3,0,2,16,8,32768,0,18,3,2,16387,0,7,1,16,32768,0,3,6,1,16387,0,9,3,6,32768,0,5,3,6,32768,0,4,1,21,8192,0,5,6,21,0,0,7,6,1,16384,0,8,3,6,32768,0,4,1,21,8192,0,2,3,2,16384,0,4,3,6,33024,0,5,3,2,16384,0,4,3,6,33024,0,4,1,21,8192,0,12,1,21,8192,1,9,5,4,32771,0,6,1,16,32768,0,3,1,2,16387,0,5,1,16,32768,0,3,6,1,16387,0,9,3,6,32768,0,5,3,6,32768,0,4,1,21,8192,0,5,6,21,0,0,7,6,1,16384,0,8,3,6,32768,0,4,1,21,8192,0,2,1,2,16384,1,4,7,6,32769,1,2,16,8,131072,0,26,1,21,1,0,8,16,8,131072,0,16,1,22,0,0,1,1,16,32768,0,1,1,22,0,0,3,3,2,16403,1,2,16,8,36865,0,23,16,8,131072,0,16,1,22,0,0,1,1,16,32768,0,1,1,22,0,0,3,3,2,16403,2,2,16,8,36867,0,21,7,6,32768,1,2,16,8,131072,0,26,1,21,3,0,8,1,16,32768,0,3,1,2,16403,0,5,16,8,32768,0,17,3,1,16387,0,4,3,21,0,0,4,1,16,32768,0,2,1,2,16400,0,5,7,6,32768,0,8,1,21,8192,0,2,3,1,16384,0,12,1,21,8192,1,4,11,19,131072,1,2,16,8,131072,0,26,1,21,3,0,2,1,16,32768,0,4,1,2,16387,0,5,16,8,32768,0,17,3,1,16387,0,4,3,21,0,0,4,1,16,32768,0,2,3,15,131584,0,5,4,3,131584,0,5,1,2,16384,0,6,7,6,32768,0,8,1,21,8192,0,2,3,1,16384,0,12,1,21,8192,1,11,1,16,32768,0,21,3,15,131584,0,5,4,3,131584,0,5,1,21,8192,0,1,7,6,32768,0,8,3,6,33024,4,2,1,16,32768,0,11,1,21,3,0,19,7,6,32768,0,8,3,6,33024,1,14,5,5,32803,0,6,16,8,131072,0,18,1,2,16387,0,3,1,16,32768,0,3,1,2,16387,0,5,1,2,16384,0,2,7,6,33024,0,8,5,4,33024,0,6,1,2,16384,12,9,1,22,0,0,10,1,16,16387,0,1,1,22,0,0,2,1,16,16384,0,2,13,3,131075,1,9,1,16,16384,3,4,11,19,131072,1,9,13,19,131073,8,8,15,19,131073,1,8,18,19,131073,0,29,15,19,131072,6,10,4,15,131073,1,8,16,8,131075,2,14,4,6,32769,3,4,16,8,36867,4,4,16,8,36867,0,23,16,8,131072,0,18,4,2,16403,2,6,30,19,131072,2,6,28,19,131072,3,4,16,8,36867,0,27,3,2,16387,0,10,11,2,16387,2,10,11,2,16384,1,8,30,19,131072,2,8,28,19,131072,4,4,16,8,131072,0,27,1,21,3,0,8,16,8,131072,0,18,4,2,16403,2,6,30,19,131072,1,6,10,14,256,0,11,4,2,16400,3,6,28,19,131072,1,13,1,21,0,3,5,16,8,135171,2,6,30,19,131072,2,6,28,19,131072,16,10,4,15,131073,1,9,16,8,131075,0,19,16,8,131072,1,4,16,8,36867,0,27,3,2,16387,0,11,16,8,131072,2,4,16,8,131072,0,28,1,21,3,0,13,3,2,16387,4,13,1,21,0,16,12,8,19,131072,1,6,8,19,131072,17,9,16,19,131073,4,10,4,15,131073,1,9,14,8,131075,3,9,14,8,131139,2,4,16,8,131072,0,17,4,6,32769,3,4,14,8,36867,0,25,3,2,16387,5,13,14,8,135235,3,22,5,4,32785,3,12,14,8,131136,0,16,4,4,32961,0,5,6,18,66048,0,7,1,2,16387,3,12,14,8,131136,0,16,4,4,32899,0,5,6,18,66048,2,12,14,8,131072,4,12,9,18,66048,0,10,8,4,32915,0,15,14,8,131136,2,12,3,15,131584,0,5,16,8,131584,3,17,5,4,32915,0,13,14,8,131136,2,12,3,15,131584,0,5,16,8,131584,4,12,14,8,131136,0,16,4,4,32977,2,14,4,4,32771,2,6,30,19,131072,1,16,3,1,16387,1,6,4,4,32960,1,6,28,19,131072,5,14,8,4,32771,5,14,8,4,32771,2,6,30,19,131072,1,6,4,4,32896,1,16,3,1,16387,1,6,28,19,131072,4,4,14,8,131136,0,16,7,4,32771,0,8,9,18,66048,0,10,1,2,16387,2,15,1,2,16384,0,2,1,21,0,0,5,1,21,0,0,3,4,4,32960,0,5,1,2,16384,0,3,1,21,0,0,2,4,4,32896,0,5,1,21,0,0,1,1,2,16384,3,18,2,21,3,0,10,14,8,131136,0,16,1,2,16403,2,13,5,4,32912,0,6,1,2,16400,3,18,2,21,3,0,10,14,8,131136,0,16,1,2,16403,2,13,1,21,0,0,10,2,21,8192,0,3,1,2,16400,3,4,14,8,131136,0,25,2,21,3,0,4,9,18,66048,0,10,1,2,16387,2,13,1,21,0,0,1,7,4,32768,0,8,1,2,16384,3,4,14,8,131136,0,25,2,21,3,0,4,9,18,66048,0,10,1,2,16387,2,13,1,21,0,0,1,7,4,32768,0,8,1,21,0,0,1,1,2,16384,3,4,14,8,131136,0,25,1,21,3,0,3,9,18,66048,0,10,1,2,16387,2,13,4,4,32976,0,8,7,4,32768,0,8,1,2,16384,3,4,14,8,131136,0,25,1,21,3,0,3,9,18,66048,0,10,1,2,16387,2,13,4,4,32976,0,8,7,4,32768,0,8,1,21,0,0,1,1,2,16384,3,4,9,18,66048,0,19,1,21,3,0,9,14,8,131136,0,16,1,2,16403,2,13,1,2,16400,0,2,8,4,32912,0,9,1,21,0,3,11,14,8,65536,0,16,10,5,32803,1,17,4,1,16419,1,13,14,8,65536,0,16,4,1,16419,1,10,1,21,0,0,1,4,1,16416,1,1,4,1,16416,0,5,1,21,0,0,2,14,19,131072,1,1,4,1,16416,0,5,1,21,0,2,13,4,1,16416,4,12,18,19,131072,10,0,10,19,131072,1,0,17,3,65539,0,29,3,2,16387,0,13,3,2,16387,2,6,3,1,16387,0,6,14,19,131072,1,6,13,14,256,1,8,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,8192,0,2,16,14,256,1,11,7,19,131072,2,13,11,14,256,1,8,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,11,12,14,256,1,11,7,19,131072,2,13,12,14,256,1,11,1,1,16387,0,4,15,14,256,1,8,1,21,8192,0,1,14,14,256,1,10,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,1,1,16384,1,13,7,19,131072,2,6,11,14,256,3,7,21,19,131072,21,9,3,1,16384,10,0,16,19,131072,1,0,21,3,65539,0,30,1,2,16387,0,10,3,2,16387,0,12,3,2,16387,1,9,1,1,16387,0,4,1,21,0,0,1,1,2,16384,1,7,3,2,16384,0,4,2,21,0,0,3,1,1,16384,0,2,2,21,0,0,3,1,1,16384,0,2,2,21,0,0,3,3,2,16384,1,10,2,1,16387,0,5,5,3,66048,0,6,1,1,16384,1,10,2,1,16387,0,5,4,3,66048,0,5,1,1,16384,1,10,2,1,16387,0,8,1,1,16384,0,2,1,21,0,0,2,2,1,16384,0,4,1,21,0,0,7,1,21,0,0,2,2,1,16384,0,3,1,21,0,0,2,2,1,16384,1,8,5,19,131072,0,6,2,21,0,0,3,4,19,131072,0,6,2,21,0,0,4,5,19,131072,0,6,2,21,0,0,3,6,19,131072,1,5,5,19,131072,0,6,1,21,0,2,12,4,1,16387,0,6,4,1,16387,0,6,4,1,16387,1,9,2,1,16384,0,3,1,21,0,0,2,1,1,16384,1,7,4,1,16384,0,5,1,21,0,0,2,1,1,16384,0,2,1,21,0,0,2,2,1,16384,1,16,2,1,16384,0,3,1,21,0,0,2,1,1,16384,1,7,4,1,16384,0,5,1,21,0,0,2,2,1,16384,0,3,1,21,0,0,2,1,1,16384,4,5,4,1,16384,0,5,1,21,0,0,2,2,1,16384,0,3,1,21,0,0,2,1,1,16384,1,5,4,1,16384,0,5,1,21,0,0,2,4,1,16384,0,4,1,21,0,0,1,4,1,16384,1,9,4,1,16384,0,5,1,21,0,0,3,1,21,0,0,1,11,19,131072,1,7,1,21,0,0,1,1,2,16384,0,2,1,21,0,0,2,2,1,16384,9,0,10,19,131072,1,0,27,3,65539,0,39,3,2,16387,0,20,3,2,16387,3,6,11,14,256,1,9,1,1,16387,0,4,12,14,256,1,8,1,1,16384,0,2,2,21,0,1,10,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,1,1,16384,1,13,7,19,131072,2,13,18,19,131072,4,6,12,14,256,1,18,1,1,16387,0,4,21,14,256,1,8,1,21,8192,0,1,14,14,256,1,10,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,1,1,16384,1,13,7,19,131072,2,6,11,14,256,1,13,18,19,131072,3,7,21,19,131072,20,9,14,19,131072,5,13,17,19,131072,1,14,9,19,131072,0,22,8,19,131072,0,22,17,19,131072,8,12,9,19,131072,0,23,24,19,131072,1,10,24,19,131073,4,7,24,19,131072,1,0,10,19,131072,1,0,35,3,65539,0,47,3,2,16387,0,25,3,2,16387,2,6,3,1,16387,0,6,14,19,131072,1,6,12,14,256,1,23,1,1,16387,0,4,25,14,256,1,8,1,21,8192,0,1,14,14,256,1,10,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,1,1,16384,1,13,7,19,131072,2,6,11,14,256,1,6,3,1,16384,0,4,1,21,0,0,2,18,19,131072,3,18,1,1,16387,2,8,9,19,131072,0,10,3,1,16384,1,10,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,1,1,16384,1,13,3,1,16384,3,7,21,19,131072,14,9,3,1,16384,5,0,16,19,131072,1,0,17,3,65539,0,30,3,2,16387,0,5,6,18,66048,0,8,3,2,16387,2,6,3,1,16387,0,6,14,19,131072,1,7,24,19,131072,1,13,6,18,66048,0,8,2,21,0,2,18,1,1,16387,2,8,9,19,131072,0,10,3,1,16384,0,5,2,21,0,0,3,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,13,1,22,0,0,2,6,18,66048,0,7,1,22,0,0,2,1,1,16384,1,7,24,19,131072,1,20,6,18,66048,0,8,2,21,0,1,23,1,1,16387,2,8,9,19,131072,0,10,3,1,16384,0,5,2,21,0,0,3,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,13,1,22,0,0,2,6,18,66048,0,7,1,22,0,0,2,1,1,16384,3,9,3,1,16384,4,10,14,19,131073,3,7,24,19,131072,1,0,16,19,131072,1,0,22,3,65539,0,35,5,2,16387,2,11,5,2,16384,0,6,1,21,0,0,2,8,19,131072,0,10,2,21,0,0,4,5,2,16384,0,6,1,21,0,0,2,8,19,131072,0,11,1,21,0,1,4,19,14,256,0,20,5,2,16384,0,7,1,21,0,0,2,14,14,256,0,26,1,22,0,0,7,1,22,0,0,2,5,2,16384,5,0,16,19,131072,1,0,19,3,65539,0,22,9,18,66048,0,10,5,2,16387,2,7,24,19,131072,1,13,9,18,66048,0,11,2,21,0,2,11,14,19,131072,0,28,1,22,0,0,7,1,22,0,0,2,5,2,16384,1,7,24,19,131072,9,0,16,19,131072,1,2,14,3,65539,0,22,5,2,16387,2,9,15,14,256,0,16,5,2,16384,0,6,1,21,0,0,4,1,21,0,4,0,10,19,131072,1,0,15,3,65539,0,27,3,2,16387,0,11,3,2,16387,3,6,11,14,256,1,8,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,8192,0,2,12,14,256,1,11,7,19,131072,3,6,12,14,256,1,9,1,1,16387,0,4,13,14,256,1,8,1,21,8192,0,1,14,14,256,1,10,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,1,1,16384,1,13,7,19,131072,2,6,11,14,256,1,13,18,19,131072,3,7,21,19,131072,20,9,14,19,131072,4,7,24,19,131072,1,0,10,19,131072,1,0,23,3,65539,0,35,3,2,16387,0,16,3,2,16387,2,6,3,1,16387,0,6,14,19,131072,1,6,12,14,256,1,14,1,1,16387,0,4,17,14,256,1,8,1,21,8192,0,1,14,14,256,1,10,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,1,1,16384,1,13,7,19,131072,2,6,11,14,256,1,6,3,1,16384,0,4,1,21,0,0,2,18,19,131072,3,9,1,1,16387,2,8,9,19,131072,0,10,3,1,16384,1,10,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,2,1,1,16384,1,13,3,1,16384,3,7,21,19,131072,15,9,3,1,16384,5,0,16,19,131072,1,0,20,3,65539,0,33,3,2,16387,0,5,9,18,66048,0,11,3,2,16387,2,6,3,1,16387,0,6,14,19,131072,1,7,24,19,131072,1,13,9,18,66048,0,11,2,21,0,2,9,1,1,16387,2,8,9,19,131072,0,10,3,1,16384,0,5,2,21,0,0,3,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,13,1,22,0,0,2,9,18,66048,0,10,1,22,0,0,2,1,1,16384,1,7,24,19,131072,1,20,9,18,66048,0,11,2,21,0,1,14,1,1,16387,2,8,9,19,131072,0,10,3,1,16384,0,5,2,21,0,0,3,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,13,1,22,0,0,2,9,18,66048,0,10,1,22,0,0,2,1,1,16384,3,9,3,1,16384,19,10,4,15,131073,1,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,1,9,14,8,131075,1,12,4,16,32768,0,5,12,16,32769,3,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,1,9,14,8,131075,0,14,1,22,0,0,7,4,16,32768,0,4,1,22,0,1,12,4,16,32768,0,5,12,16,32769,6,9,16,8,131075,1,9,14,8,131075,5,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,0,9,6,8,131075,2,11,1,22,0,0,7,4,16,16387,0,4,1,22,0,1,21,9,3,131075,1,11,6,8,131072,0,6,1,22,0,0,10,14,8,131072,0,14,1,22,0,0,1,4,16,16384,0,5,1,22,0,0,3,12,13,33024,0,13,1,22,0,0,3,9,14,33024,3,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,0,9,11,8,131075,1,11,14,8,65536,0,16,10,5,32803,0,11,3,15,131584,0,5,6,18,66048,0,7,4,2,16387,1,6,4,2,16384,1,13,14,19,131072,0,15,4,2,16384,2,11,14,8,65536,0,16,9,5,32803,1,13,14,8,65536,0,16,4,1,16419,0,7,10,5,32800,0,11,9,3,131072,0,9,1,22,0,0,1,4,16,32768,0,4,1,22,0,1,13,4,1,16416,7,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,0,9,11,8,131075,0,11,1,22,0,0,1,4,16,32768,0,6,1,22,0,1,11,14,8,65536,0,16,10,5,32803,0,11,3,15,131584,0,5,6,18,66048,0,7,4,2,16387,1,6,4,2,16384,1,13,14,19,131072,0,15,4,2,16384,2,11,14,8,65536,0,16,9,5,32803,1,13,14,8,65536,0,16,4,1,16419,0,7,10,5,32800,0,11,9,3,131072,0,9,1,22,0,0,1,4,16,32768,0,4,1,22,0,1,13,4,1,16416,4,11,1,22,0,0,7,4,16,16387,0,4,1,22,0,1,9,14,8,65536,0,16,9,3,131075,1,11,11,8,131072,0,11,1,22,0,0,1,4,16,16384,0,4,1,22,0,0,3,9,5,33056,6,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,0,9,6,8,131075,0,7,1,22,0,0,1,4,16,32768,0,6,1,22,0,1,12,16,8,131072,0,17,8,8,32769,1,11,3,15,131584,0,5,6,18,66048,0,7,13,5,32803,0,26,4,2,16403,1,6,3,15,131584,0,5,6,18,66048,0,7,7,1,16387,0,10,4,2,16400,1,6,7,1,16384,1,13,7,1,16384,2,23,9,5,32803,1,13,3,15,131584,0,5,6,18,66048,0,7,4,1,16419,0,7,13,5,32800,0,14,4,15,131072,0,6,9,3,131072,0,9,1,22,0,0,1,4,16,32768,0,4,1,22,0,1,13,4,1,16416,4,11,1,22,0,0,7,4,16,32771,0,12,8,16,32771,0,8,1,22,0,1,9,9,8,131075,2,11,1,22,0,0,7,4,16,32771,0,12,8,16,32771,0,8,1,22,0,1,9,12,8,131075,5,10,4,15,131073,4,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,0,9,15,8,131075,1,21,4,5,32803,0,5,4,16,32768,0,6,3,2,16387,0,9,5,2,16387,1,13,26,19,131072,4,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,0,9,11,8,131075,1,21,4,5,32803,0,11,4,16,32768,0,6,3,2,16403,1,13,15,8,131072,0,15,1,22,0,0,1,4,16,32768,0,4,1,22,0,0,3,4,5,33056,0,5,3,21,0,0,4,4,16,32768,0,5,3,2,16400,4,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,0,9,11,8,131075,0,11,1,22,0,0,1,4,16,32768,0,6,1,22,0,1,21,4,5,32803,0,5,4,16,32768,0,6,3,2,16387,1,13,15,8,131072,0,15,1,22,0,0,1,4,16,32768,0,4,1,22,0,0,3,4,5,33056,0,5,3,2,16384,4,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,0,9,11,8,131075,0,11,1,22,0,0,7,4,16,32768,0,6,1,22,0,1,21,4,5,32803,0,11,4,16,32768,0,6,3,2,16403,1,13,15,8,131072,0,15,1,22,0,0,1,4,16,32768,0,4,1,22,0,0,3,4,5,33056,0,15,1,22,0,0,1,4,16,32768,0,5,1,22,0,0,2,3,2,16400,5,11,1,22,0,0,7,4,16,16387,0,4,1,22,0,1,19,4,3,131075,0,11,4,16,16384,0,6,3,2,16403,1,11,11,8,131072,0,11,1,22,0,0,1,4,16,16384,0,4,1,22,0,0,3,4,5,33056,0,5,3,2,16400,3,11,1,22,0,0,7,4,16,16387,0,4,1,22,0,1,19,8,3,131075,0,9,4,16,16384,0,6,3,2,16387,0,9,5,2,16387,1,11,15,8,131072,0,15,1,22,0,0,1,4,16,16384,0,4,1,22,0,0,3,4,5,33056,0,5,3,2,16384,0,5,5,2,16384,6,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,1,9,12,8,131075,1,15,5,5,32803,0,16,3,2,16387,0,5,4,16,32768,0,7,3,2,16387,1,10,3,1,16387,0,6,10,19,131072,1,6,14,8,65536,0,16,10,1,16387,0,13,9,3,131072,0,9,1,22,0,0,1,4,16,32768,0,4,1,22,0,1,10,3,2,16384,1,8,4,16,32768,0,6,1,1,16387,1,12,6,1,16387,1,27,21,19,131072,0,66,10,19,131072,1,12,9,19,131072,0,10,3,1,16384,1,14,6,1,16384,0,7,1,21,0,0,2,20,19,131072,1,12,3,1,16384,0,4,2,21,0,0,3,15,19,131072,2,10,1,21,8192,0,1,3,2,16384,0,4,1,21,8192,0,2,1,1,16384,3,27,15,19,131072,0,41,10,19,131072,2,13,3,1,16384,4,11,1,22,0,0,7,4,16,16387,0,4,1,22,0,1,13,5,3,131075,0,16,3,2,16387,0,5,4,16,16384,0,7,4,2,16387,1,11,12,8,131072,0,12,1,22,0,0,1,4,16,16384,0,4,1,22,0,0,3,5,5,33056,0,11,4,2,16384,3,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,1,9,12,8,131075,1,15,5,5,32803,0,16,3,2,16387,0,5,4,16,32768,0,6,3,2,16387,1,10,3,2,16384,1,1,4,16,32768,0,6,1,1,16387,1,5,3,1,16387,0,6,12,8,131072,0,12,1,22,0,0,1,4,16,32768,0,4,1,22,0,0,3,5,5,33056,0,11,1,21,8192,0,1,1,1,16384,1,5,1,21,0,0,1,9,19,131072,0,10,3,1,16384,0,13,3,1,16384,1,5,1,1,16384,1,20,14,8,131072,0,14,1,22,0,0,1,4,16,32768,0,4,1,22,0,0,3,12,13,33024,0,13,12,12,16385,1,3,1,21,8192,0,12,1,22,0,0,1,12,12,16384,0,13,1,22,0,0,2,3,2,16384,0,6,1,21,8192,0,2,1,21,8192,0,1,1,1,16384,1,7,13,19,131072,0,14,3,1,16384,1,5,6,21,0,0,7,1,1,16384,1,5,3,1,16384,0,4,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,10,3,1,16384,2,10,10,19,131072,3,8,12,8,131072,0,12,1,22,0,0,1,4,16,32768,0,4,1,22,0,0,3,5,5,33056,0,12,4,16,32768,5,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,0,9,12,8,131075,0,12,1,22,0,0,1,4,16,32768,0,5,1,22,0,1,15,5,5,32803,0,16,3,2,16387,0,5,4,16,32768,0,7,3,2,16387,1,10,3,2,16384,1,25,14,8,131072,0,14,1,22,0,0,1,4,16,32768,0,4,1,22,0,0,3,12,13,33024,0,13,12,12,16385,1,8,12,12,16384,0,14,1,1,16387,1,12,3,1,16387,0,6,12,8,131072,0,12,1,22,0,0,1,12,12,16384,0,12,1,22,0,0,3,5,5,33056,0,12,1,21,8192,0,1,1,1,16384,1,12,9,19,131072,0,10,3,1,16384,1,10,1,21,8192,0,12,1,22,0,0,1,12,12,16384,0,14,1,22,0,0,2,3,2,16384,0,6,1,21,8192,0,2,1,1,16384,2,8,3,1,16384,2,8,12,8,131072,0,12,1,22,0,0,1,4,16,32768,0,4,1,22,0,0,3,5,5,33056,0,12,4,16,32768,5,11,1,22,0,0,7,4,16,16387,0,4,1,22,0,1,13,5,3,131075,0,16,3,2,16387,0,5,4,16,16384,0,6,3,2,16387,1,11,12,8,131072,0,12,1,22,0,0,1,4,16,16384,0,4,1,22,0,0,3,5,5,33056,0,11,3,2,16384,3,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,1,9,9,8,131075,0,9,1,22,0,0,1,4,16,32768,0,6,14,8,131072,0,14,1,22,0,1,11,4,16,32768,0,5,2,5,32803,0,13,3,2,16387,1,6,4,16,32768,0,5,1,1,16387,1,10,3,1,16387,0,6,5,3,131072,0,11,1,21,8192,0,1,1,1,16384,1,10,1,21,8192,0,5,2,21,8192,0,3,1,21,0,0,1,9,19,131072,0,10,3,1,16384,1,5,1,21,8192,0,1,14,14,256,1,5,10,19,131072,0,11,14,19,131072,2,7,3,15,131584,0,5,16,8,131584,2,13,1,1,16384,4,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,1,9,9,8,131075,0,9,1,22,0,0,1,4,16,32768,0,6,16,8,131072,0,16,1,22,0,1,11,4,16,32768,0,5,2,5,32803,0,13,3,2,16387,1,6,4,16,32768,0,6,1,1,16387,1,10,3,1,16387,0,7,3,2,16384,0,4,1,21,0,0,2,12,8,131072,0,12,1,22,0,0,1,4,16,32768,0,4,1,22,0,0,3,5,5,33056,0,11,1,21,8192,0,1,1,1,16384,0,3,1,21,0,0,2,10,19,131072,1,10,9,19,131072,0,10,3,1,16384,0,5,2,21,8192,0,3,1,1,16384,1,5,13,19,131072,0,14,3,1,16384,1,3,4,16,32768,0,5,1,1,16387,0,2,1,21,8192,0,1,1,1,16384,1,3,6,21,0,0,7,1,1,16384,1,10,1,1,16384,2,10,1,21,8192,0,1,1,1,16384,3,5,1,21,8192,0,1,14,14,256,1,3,10,19,131072,0,11,14,19,131072,2,7,3,15,131584,0,5,16,8,131584,5,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,1,9,9,8,131075,0,9,1,22,0,0,1,4,16,32768,0,7,16,8,131072,0,16,1,22,0,1,11,4,16,32768,0,6,2,5,32803,0,13,3,2,16387,1,6,4,16,32768,0,6,1,1,16387,1,10,3,1,16387,0,7,3,2,16384,0,4,1,21,0,0,2,12,8,131072,0,12,1,22,0,0,1,4,16,32768,0,4,1,22,0,0,3,5,5,33056,0,11,1,21,8192,0,1,1,1,16384,0,3,1,21,0,0,2,10,19,131072,1,10,9,19,131072,0,10,3,1,16384,1,8,1,1,16384,2,5,1,21,8192,0,1,14,14,256,1,3,10,19,131072,0,11,14,19,131072,2,7,3,15,131584,0,5,16,8,131584,5,11,1,22,0,0,7,4,16,16387,0,4,1,22,0,1,9,4,16,16384,0,5,2,3,131075,0,13,3,2,16387,1,11,9,8,131072,0,9,1,22,0,0,1,4,16,16384,0,15,6,8,131072,0,6,1,22,0,0,1,4,16,16384,0,4,1,22,0,0,3,8,13,33024,0,8,1,22,0,0,3,2,14,33024,3,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,1,9,12,8,131075,0,12,1,22,0,0,1,4,16,32768,0,6,14,8,131072,0,14,1,22,0,1,16,5,5,32803,0,16,3,2,16387,1,10,3,1,16387,0,10,1,21,0,0,2,5,3,131072,0,12,4,16,32768,0,12,1,21,0,0,2,10,19,131072,1,13,9,19,131072,0,10,3,1,16384,0,5,1,21,0,0,7,1,21,0,4,11,1,22,0,0,7,4,16,32771,0,4,1,22,0,1,9,12,8,131075,0,12,1,22,0,0,1,4,16,32768,0,6,16,8,131072,0,16,1,22,0,1,16,5,5,32803,0,16,3,2,16387,1,10,3,1,16387,0,10,1,21,0,0,2,5,3,131072,0,12,4,16,32768,0,13,1,21,0,0,2,10,19,131072,1,13,9,19,131072,0,10,3,1,16384,0,5,1,21,0,0,7,1,21,0,4,11,1,22,0,0,7,4,16,16387,0,4,1,22,0,1,14,5,3,131075,0,16,3,2,16387,1,11,12,8,131072,0,12,1,22,0,0,1,4,16,16384,0,15,6,8,131072,0,6,1,22,0,0,1,4,16,16384,0,4,1,22,0,0,3,8,13,33024,0,8,1,22,0,0,3,5,14,33024,7,10,3,15,131073,8,6,30,19,131072,13,6,28,19,131072,5,11,1,22,0,0,1,1,22,0,1,9,4,8,131075,0,5,1,22,0,0,1,4,15,131072,0,6,16,8,131072,0,16,1,22,0,3,12,1,21,3,0,1,1,21,3,0,8,4,15,131072,0,6,16,8,131072,0,18,1,2,16403,0,9,4,15,131072,0,6,16,8,131072,0,18,1,2,16403,6,11,1,22,0,0,1,1,22,0,1,9,4,8,131075,0,5,1,22,0,0,1,4,15,131072,0,6,16,8,131072,0,16,1,22,0,3,12,1,21,3,0,1,1,21,3,0,8,4,15,131072,0,6,16,8,131072,0,18,1,2,16403,0,9,4,15,131072,0,6,16,8,131072,0,18,1,2,16403,8,10,4,15,131073,10,13,7,19,131072,21,10,4,15,131073,1,11,1,22,0,0,7,10,16,16387,0,10,1,22,0,1,9,6,18,66048,1,2,11,3,131075,0,12,10,16,16384,0,11,1,2,16387,0,3,6,18,66048,0,7,4,2,16387,0,11,6,2,16387,1,9,1,2,16384,0,2,1,21,8192,1,11,6,18,66048,0,9,1,21,8192,0,1,1,2,16384,0,3,2,21,0,0,3,4,2,16384,1,9,6,18,66048,0,9,1,2,16384,0,2,1,21,8192,0,2,4,2,16384,1,17,6,18,66048,0,8,1,2,16384,0,2,1,21,0,0,2,4,2,16384,1,14,6,18,66048,0,8,1,2,16384,1,15,6,2,16384,0,7,2,21,0,0,5,6,18,66048,0,8,1,2,16384,0,2,2,21,0,0,3,4,2,16384,1,13,4,2,16384,2,10,3,15,131072,0,5,12,8,131584,3,11,1,22,0,0,7,10,16,16387,0,10,1,22,0,2,2,12,3,131075,0,13,10,16,16384,0,11,1,2,16387,0,3,10,16,16384,0,11,1,2,16387,0,14,4,2,16387,0,6,6,18,66048,0,7,4,2,16387,0,6,10,16,16384,0,12,2,2,16387,0,4,10,16,16384,0,12,2,2,16387,0,9,6,2,16387,1,8,4,2,16384,0,5,2,21,8192,1,12,3,15,131072,0,5,16,8,131584,1,15,4,2,16384,0,5,1,21,8192,2,10,1,2,16384,0,2,1,21,8192,1,8,2,2,16384,0,3,1,21,8192,1,17,1,2,16384,0,2,1,21,8192,0,3,10,16,16384,0,11,4,2,16384,1,8,2,2,16384,0,3,1,21,8192,0,2,1,2,16384,1,17,6,2,16384,0,7,2,21,8192,0,4,1,2,16384,0,2,2,21,8192,0,4,10,16,16384,0,11,4,2,16384,1,8,2,2,16384,0,3,1,21,8192,0,3,10,16,16384,0,11,4,2,16384,2,10,1,2,16384,0,2,1,21,8192,1,8,2,2,16384,0,3,1,21,8192,2,8,2,2,16384,0,3,1,21,8192,0,3,1,2,16384,0,2,1,21,8192,0,3,10,16,16384,0,11,4,2,16384,0,6,1,21,0,0,2,1,2,16384,0,2,1,21,0,0,3,10,16,16384,0,11,4,2,16384,2,10,2,2,16384,0,3,1,21,8192,0,2,2,2,16384,1,8,2,2,16384,0,3,1,21,8192,0,2,2,2,16384,3,10,1,2,16384,0,2,1,21,8192,0,2,1,21,0,1,8,2,2,16384,0,3,1,21,8192,0,2,1,21,0,1,17,1,2,16384,0,2,1,21,8192,0,3,10,16,16384,0,12,4,2,16384,1,8,2,2,16384,0,3,1,21,8192,0,2,1,2,16384,1,17,1,2,16384,0,2,2,21,8192,0,4,10,16,16384,0,12,4,2,16384,0,4,1,21,0,1,8,2,2,16384,0,3,1,21,8192,0,3,10,16,16384,0,12,4,2,16384,0,4,1,21,0,2,10,1,2,16384,0,2,1,21,8192,0,2,1,21,0,1,8,2,2,16384,0,3,1,21,8192,0,2,1,21,0,2,8,2,2,16384,0,3,1,21,8192,0,3,1,2,16384,0,2,1,21,8192,0,3,10,16,16384,0,11,4,2,16384,0,7,1,21,0,0,2,1,2,16384,0,2,1,21,0,0,3,10,16,16384,0,12,4,2,16384,0,4,1,21,0,2,10,2,2,16384,0,3,1,21,8192,0,2,2,2,16384,1,8,2,2,16384,0,3,1,21,8192,0,2,2,2,16384,4,11,1,22,0,0,7,8,16,16387,0,16,10,16,16387,0,10,1,22,0,1,18,8,16,16384,0,10,8,13,33024,1,2,6,3,131075,0,7,8,16,16384,0,10,4,2,16387,0,6,10,16,16384,0,11,1,2,16387,1,13,8,16,16384,0,10,8,13,33024,0,9,3,1,16387,0,6,4,2,16384,0,6,5,14,33024,1,4,3,15,131072,0,5,7,3,131584,0,8,3,1,16384,0,5,11,3,131072,0,12,1,2,16384,0,2,4,2,16384,0,6,4,14,33024,1,11,3,1,16384,3,11,1,22,0,0,7,8,16,16387,0,16,10,16,16387,0,10,1,22,0,1,18,8,16,16384,0,10,14,13,33024,1,2,7,3,131075,0,14,8,16,16384,0,10,4,2,16403,0,6,10,16,16384,0,11,1,2,16387,1,13,8,16,16384,0,10,14,13,33024,0,15,3,1,16387,0,6,4,2,16400,0,6,5,14,33024,1,4,3,15,131072,0,5,7,3,131584,0,8,3,1,16384,0,5,11,3,131072,0,12,1,2,16384,0,2,4,2,16400,0,6,4,14,33024,1,11,3,1,16384,3,11,1,22,0,0,7,8,16,16387,0,8,1,22,0,2,2,5,3,131075,0,6,8,16,16384,0,10,3,2,16387,0,20,8,16,16384,0,10,8,13,33024,0,10,8,2,16403,1,4,3,2,16384,0,5,5,14,33024,0,6,8,2,16400,3,11,1,22,0,0,7,8,16,32771,0,8,1,22,0,1,9,14,8,131075,1,16,7,5,32803,0,8,8,16,32768,0,29,8,16,32768,0,10,9,13,33024,5,11,1,22,0,0,7,8,16,16387,0,16,10,16,16387,0,10,1,22,0,1,9,8,16,16384,1,2,8,3,131075,0,15,8,16,16384,0,10,4,2,16403,0,6,10,16,16384,0,11,1,2,16387,0,3,10,16,16384,0,11,1,2,16387,0,14,4,2,16387,1,13,8,16,16384,0,10,9,13,33024,0,10,4,1,16387,0,7,4,2,16400,0,6,4,14,33024,1,4,10,16,16384,0,11,2,1,16387,1,4,10,16,16384,0,11,2,1,16387,1,4,4,15,131072,0,6,12,3,131072,0,13,1,2,16384,0,3,1,2,16384,0,9,4,1,16384,0,6,2,1,16384,0,4,2,1,16384,2,8,4,2,16384,0,5,1,21,8192,1,15,8,16,16384,0,10,14,13,33024,0,15,2,1,16387,0,5,4,2,16400,0,6,5,14,33024,1,15,8,16,16384,0,10,14,13,33024,0,15,2,1,16387,0,5,4,2,16400,0,6,5,14,33024,1,6,3,15,131072,0,5,7,3,131584,0,8,2,1,16384,0,3,2,1,16384,1,6,3,15,131072,0,5,7,3,131584,0,8,2,1,16384,0,3,2,1,16384,1,10,4,2,16384,0,5,2,21,8192,1,15,3,21,0,0,4,8,16,16384,0,9,2,1,16384,0,4,2,1,16384,2,8,8,16,16384,0,10,8,1,16387,0,11,3,21,0,0,4,8,16,16384,1,8,4,15,131072,0,6,14,8,131072,0,14,1,22,0,0,1,8,16,16384,0,8,1,22,0,0,3,7,5,33056,0,8,1,21,8192,0,1,8,1,16384,0,11,2,1,16384,0,3,1,21,8192,0,2,2,1,16384,0,3,1,21,8192,0,7,1,21,8192,0,5,1,21,8192,1,17,8,16,16384,0,10,14,13,33024,0,15,2,1,16387,0,5,2,1,16384,1,15,2,1,16384,0,2,2,21,8192,0,2,2,1,16384,1,10,8,1,16384,0,10,9,14,33024,0,10,1,21,8192,0,1,2,1,16384,1,26,1,1,16387,0,6,1,21,8192,0,6,2,21,8192,0,3,2,1,16384,0,2,2,21,8192,0,2,2,1,16384,0,4,2,21,8192,1,12,2,1,16384,0,2,2,21,8192,2,15,8,1,16384,3,6,8,16,16384,0,10,8,1,16387,0,11,3,21,0,0,4,8,16,16384,1,6,4,15,131072,0,6,14,8,131072,0,14,1,22,0,0,1,8,16,16384,0,8,1,22,0,0,3,7,5,33056,0,8,1,21,8192,0,1,8,1,16384,0,11,2,1,16384,0,3,1,21,8192,0,2,2,1,16384,0,3,1,21,8192,0,7,1,21,8192,0,5,1,21,8192,0,2,1,21,8192,1,15,8,16,16384,0,10,22,13,33024,0,23,2,1,16387,0,5,4,2,16400,0,6,6,14,33024,1,15,8,16,16384,0,10,22,13,33024,0,23,2,1,16387,0,5,4,2,16400,0,6,6,14,33024,1,6,3,15,131072,0,5,7,3,131584,0,8,2,1,16384,0,3,4,1,16384,0,4,1,21,8192,0,1,2,1,16384,0,2,1,21,8192,1,6,3,15,131072,0,5,7,3,131584,0,8,2,1,16384,0,3,4,1,16384,0,4,1,21,8192,0,1,2,1,16384,0,2,1,21,8192,1,15,8,16,16384,0,10,22,13,33024,0,23,2,1,16387,0,5,2,1,16384,1,13,2,1,16384,0,2,2,21,8192,0,2,2,1,16384,1,8,8,1,16384,0,10,9,14,33024,0,10,1,21,8192,0,1,2,1,16384,1,24,1,1,16387,0,6,1,21,8192,0,1,1,21,8192,0,6,2,21,8192,0,3,2,1,16384,0,2,2,21,8192,0,2,2,1,16384,0,4,2,21,8192,1,10,2,1,16384,0,2,2,21,8192,2,13,8,1,16384,4,11,1,22,0,0,7,8,16,16387,0,16,10,16,16387,0,18,8,16,16387,0,8,1,22,0,2,2,8,3,131075,0,9,8,16,16384,0,10,4,2,16387,0,6,10,16,16384,0,11,1,2,16387,0,3,10,16,16384,0,11,1,2,16387,0,14,4,2,16387,0,12,8,16,16384,0,10,2,2,16403,0,5,8,16,16384,1,13,8,16,16384,0,10,9,13,33024,0,10,4,1,16387,0,7,4,2,16384,0,6,4,14,33024,1,4,10,16,16384,0,11,2,1,16387,1,4,10,16,16384,0,11,2,1,16387,1,4,4,15,131072,0,6,12,3,131072,0,13,1,2,16384,0,3,1,2,16384,0,9,4,1,16384,0,6,2,1,16384,0,4,2,1,16384,1,8,4,2,16384,0,5,1,21,8192,1,10,4,2,16384,0,5,2,21,8192,1,8,6,18,66048,0,7,5,1,16387,0,8,2,1,16384,0,3,1,21,8192,0,2,2,1,16384,1,12,5,1,16384,0,6,2,21,8192,0,3,2,2,16400,0,3,4,14,33024,2,10,4,15,131072,0,6,14,8,131072,0,14,1,22,0,0,1,8,16,16384,0,8,1,22,0,0,3,7,5,33056,0,8,1,21,8192,0,1,4,2,16384,0,6,4,2,16384,0,6,4,14,33024,0,7,1,21,8192,0,2,5,1,16384,0,6,1,21,8192,0,2,2,2,16400,0,3,4,14,33024,1,19,8,16,16384,0,10,8,13,33024,0,9,2,1,16387,0,5,4,2,16384,0,6,5,14,33024,1,19,8,16,16384,0,10,14,13,33024,0,15,4,1,16387,0,7,2,2,16400,0,3,5,14,33024,1,10,3,15,131072,0,5,7,3,131584,0,8,2,1,16384,0,3,2,1,16384,1,10,3,15,131072,0,5,7,3,131584,0,8,4,1,16384,0,6,2,1,16384,0,3,1,21,8192,0,2,2,1,16384,1,10,4,2,16384,0,6,6,14,33024,0,7,3,15,131072,0,5,4,3,131584,0,5,2,2,16400,0,3,5,14,33024,0,9,4,1,16384,0,6,2,1,16384,0,5,4,1,16384,0,6,2,2,16400,0,3,3,14,33024,3,19,8,16,16384,0,10,8,13,33024,0,9,2,1,16387,0,5,4,2,16384,0,6,5,14,33024,1,19,8,16,16384,0,10,8,13,33024,0,9,2,1,16387,0,5,4,2,16384,0,6,5,14,33024,1,10,3,15,131072,0,5,7,3,131584,0,8,2,1,16384,0,3,2,1,16384,1,10,3,15,131072,0,5,7,3,131584,0,8,2,1,16384,0,3,2,1,16384,1,10,4,2,16384,0,6,5,14,33024,0,6,2,1,16384,0,3,2,1,16384,1,10,2,1,16384,0,3,1,21,8192,0,2,4,2,16384,0,6,5,14,33024,1,10,3,15,131072,0,5,7,3,131584,0,8,2,1,16384,0,3,2,1,16384,1,10,4,2,16384,0,6,6,14,33024,0,7,2,1,16384,0,4,2,2,16400,0,3,5,14,33024,0,9,2,2,16400,0,3,3,14,33024,3,8,6,18,66048,0,7,12,1,16387,0,16,2,1,16384,0,3,1,21,8192,0,2,2,1,16384,0,3,1,21,8192,0,7,1,21,8192,0,5,1,21,8192,1,12,2,2,16400,0,3,4,14,33024,0,7,2,21,8192,0,3,12,1,16384,1,15,3,1,16387,1,10,7,3,131584,0,8,3,1,18432,0,92,2,2,16400,0,3,4,14,33024,0,23,12,1,16384,1,16,3,15,131072,0,5,16,8,131584,0,17,3,1,16384,2,17,8,16,16384,0,10,14,13,33024,0,15,4,1,16387,0,7,2,2,16400,0,3,5,14,33024,1,17,8,16,16384,0,10,8,13,33024,0,9,2,1,16387,0,5,4,2,16384,0,6,5,14,33024,1,8,3,15,131072,0,5,7,3,131584,0,8,2,1,16384,0,3,2,1,16384,1,13,6,18,66048,0,7,2,1,16387,0,6,2,1,16384,0,2,1,21,0,0,1,12,1,16384,0,13,2,21,8192,0,3,2,1,16384,0,3,2,21,8192,0,3,4,2,16384,0,6,3,14,33024,0,7,2,21,0,0,2,2,1,16384,1,10,1,21,8192,0,1,2,1,16384,0,2,2,21,8192,0,3,1,21,8192,0,2,1,21,8192,0,1,4,1,16384,0,4,2,21,8192,1,26,1,1,16387,0,6,1,21,8192,0,2,4,2,16384,0,4,1,21,8192,0,4,2,21,8192,0,3,2,1,16384,0,3,2,21,8192,0,3,4,2,16384,0,6,3,14,33024,0,7,2,21,8192,1,12,2,1,16384,0,2,2,21,8192,4,6,6,18,66048,0,7,12,1,16387,0,16,2,1,16384,0,3,1,21,8192,0,2,2,1,16384,0,3,1,21,8192,0,7,1,21,8192,0,5,1,21,8192,0,2,1,21,8192,1,10,2,2,16400,0,3,4,14,33024,0,7,2,21,8192,0,3,12,1,16384,1,13,3,1,16387,1,8,7,3,131584,0,8,3,1,18432,0,92,2,2,16400,0,3,4,14,33024,0,23,12,1,16384,1,14,3,15,131072,0,5,16,8,131584,0,17,3,1,16384,2,15,8,16,16384,0,10,14,13,33024,0,15,4,1,16387,0,7,2,2,16400,0,3,5,14,33024,1,15,8,16,16384,0,10,16,13,33024,0,17,2,1,16387,0,5,4,2,16384,0,6,6,14,33024,1,6,3,15,131072,0,5,7,3,131584,0,8,2,1,16384,0,3,4,1,16384,0,4,1,21,8192,0,1,2,1,16384,0,2,1,21,8192,1,11,6,18,66048,0,7,2,1,16387,0,6,2,1,16384,0,2,1,21,0,0,1,12,1,16384,0,13,2,21,8192,0,3,2,1,16384,0,3,2,21,8192,0,3,4,2,16384,0,6,4,14,33024,0,8,2,21,0,0,2,2,1,16384,1,8,1,21,8192,0,1,2,1,16384,0,2,2,21,8192,0,3,1,21,8192,0,2,1,21,8192,0,1,4,1,16384,0,4,2,21,8192,1,24,1,1,16387,0,6,1,21,8192,0,2,1,21,8192,0,5,1,21,8192,0,4,2,21,8192,0,3,2,1,16384,0,3,2,21,8192,0,3,4,2,16384,0,6,4,14,33024,0,8,2,21,8192,1,10,2,1,16384,0,2,2,21,8192,5,11,1,22,0,0,7,8,16,16387,0,16,10,16,16387,0,10,1,22,0,2,2,8,3,131075,0,9,8,16,16384,0,10,4,2,16387,0,6,10,16,16384,0,11,1,2,16387,0,3,10,16,16384,0,11,1,2,16387,0,14,4,2,16387,1,13,8,16,16384,0,10,9,13,33024,0,10,4,1,16387,0,7,4,2,16384,0,6,4,14,33024,1,4,10,16,16384,0,11,2,1,16387,1,4,10,16,16384,0,11,2,1,16387,1,4,4,15,131072,0,6,12,3,131072,0,13,1,2,16384,0,3,1,2,16384,0,9,4,1,16384,0,6,2,1,16384,0,4,2,1,16384,1,8,4,2,16384,0,5,1,21,8192,1,15,8,16,16384,0,10,8,13,33024,0,9,2,1,16387,0,5,4,2,16384,0,6,5,14,33024,1,6,3,15,131072,0,5,7,3,131584,0,8,2,1,16384,0,3,2,1,16384,1,10,4,2,16384,0,5,2,21,8192,1,17,8,16,16384,0,10,8,13,33024,0,9,2,1,16387,0,5,4,2,16384,0,6,5,14,33024,1,8,3,15,131072,0,5,7,3,131584,0,8,2,1,16384,0,3,2,1,16384,1,8,4,2,16384,0,6,5,14,33024,0,6,2,1,16384,0,3,2,1,16384,2,17,8,16,16384,0,10,8,13,33024,0,9,2,1,16387,0,5,2,1,16384,1,8,6,18,66048,0,7,8,1,16387,0,12,2,1,16384,0,3,1,21,8192,0,2,2,1,16384,0,3,1,21,8192,0,7,1,21,8192,0,5,1,21,8192,1,15,8,1,16384,1,10,2,1,16384,0,3,1,21,8192,0,2,4,2,16384,0,6,5,14,33024,0,6,2,1,16384,1,26,1,1,16387,0,6,1,21,8192,0,2,4,2,16384,0,4,1,21,8192,0,4,2,21,8192,0,3,2,1,16384,0,3,2,21,8192,0,3,4,2,16384,0,6,3,14,33024,0,7,2,21,8192,1,12,2,1,16384,0,2,2,21,8192,1,10,8,1,16384,0,8,2,21,0,4,15,8,16,16384,0,10,16,13,33024,0,17,2,1,16387,0,5,4,2,16384,0,6,6,14,33024,1,6,3,15,131072,0,5,7,3,131584,0,8,2,1,16384,0,3,4,1,16384,0,4,1,21,8192,0,1,2,1,16384,0,2,1,21,8192,1,15,8,16,16384,0,10,16,13,33024,0,17,2,1,16387,0,5,2,1,16384,1,6,6,18,66048,0,7,8,1,16387,0,12,2,1,16384,0,3,1,21,8192,0,2,2,1,16384,0,3,1,21,8192,0,7,1,21,8192,0,5,1,21,8192,0,2,1,21,8192,1,13,8,1,16384,1,8,2,1,16384,0,3,1,21,8192,0,11,8,16,16384,0,10,16,13,33024,0,17,4,2,16384,0,6,5,14,33024,0,7,2,21,8192,0,2,2,1,16384,0,4,4,14,33024,1,24,1,1,16387,0,6,1,21,8192,0,2,1,21,8192,0,5,1,21,8192,0,4,2,21,8192,0,3,2,1,16384,0,3,2,21,8192,0,3,4,2,16384,0,6,4,14,33024,0,8,2,21,8192,1,10,2,1,16384,0,2,2,21,8192,1,8,8,1,16384,0,8,2,21,0,7,12,11,19,131072,0,24,10,19,131072,6,13,30,19,131072,36,10,4,15,131073,1,10,1,22,0,0,10,11,16,32771,0,11,1,22,0,1,8,16,8,131075,0,27,14,8,131136,3,12,11,16,32768,0,12,12,16,32769,1,21,3,15,131584,0,5,15,8,131584,0,15,1,22,0,0,1,12,16,32768,0,12,1,22,0,0,3,10,13,33024,0,11,10,12,32769,1,12,16,8,131072,0,16,1,22,0,0,1,12,16,32768,0,12,1,22,0,0,2,9,8,32769,2,4,16,8,36867,0,17,12,16,32768,0,13,4,2,16387,0,16,3,2,16387,1,8,14,8,131136,0,21,7,6,32768,0,8,4,2,16384,4,10,12,16,32768,0,14,11,4,32787,2,13,7,6,32768,4,9,5,4,32915,0,13,14,8,131136,0,16,4,2,16403,2,12,9,8,32768,0,11,5,1,16403,0,20,1,22,0,0,7,9,8,32768,0,11,1,22,0,0,2,1,21,0,0,1,4,2,16400,1,10,5,1,16400,1,9,7,6,32768,0,8,2,21,8192,0,3,5,1,16400,0,7,11,4,33040,2,7,3,15,131584,0,5,16,8,131584,4,4,9,18,66048,0,10,8,4,32915,0,15,14,8,131136,0,16,4,2,16403,2,12,9,8,32768,0,11,5,1,16403,0,20,1,22,0,0,7,9,8,32768,0,11,1,22,0,0,2,1,21,0,0,1,4,2,16400,1,10,5,1,16400,1,8,3,15,131584,0,5,8,3,131584,0,9,7,6,32768,0,9,5,1,16400,0,7,11,4,33040,2,7,3,15,131584,0,5,16,8,131584,5,4,12,16,32768,0,13,7,6,32769,3,11,1,22,0,0,7,9,16,32771,0,9,1,22,0,1,9,9,8,131075,2,18,9,16,32768,0,11,13,12,32769,1,22,11,12,32769,1,4,11,12,32768,0,20,1,21,3,0,1,1,21,3,0,2,13,12,32768,0,14,1,2,16403,2,13,4,15,131072,0,6,4,3,131072,0,5,1,2,16400,4,10,1,22,0,0,10,11,16,32771,1,13,9,16,32771,0,21,3,15,131584,0,5,15,8,131584,0,15,1,22,0,0,1,11,16,32768,0,11,1,22,0,0,3,10,13,33024,1,13,8,16,32771,0,11,9,8,131072,0,9,1,22,0,0,1,9,16,32768,0,9,1,22,0,0,2,1,22,0,1,8,27,8,131075,0,38,16,8,131072,0,16,1,22,0,0,1,11,16,32768,0,11,1,22,0,3,4,8,16,32768,0,9,4,6,32769,1,12,11,16,32768,0,12,12,16,32769,1,12,9,16,32768,0,10,10,16,32769,1,12,16,8,131072,0,16,1,22,0,0,1,12,16,32768,0,12,1,22,0,0,3,4,12,32769,1,12,27,8,131072,0,27,1,22,0,0,1,11,16,32768,0,13,9,16,32768,0,11,8,16,32768,0,8,1,22,0,0,2,9,8,32769,2,4,27,8,36867,0,28,12,16,32768,0,13,4,2,16387,0,16,3,2,16387,1,8,16,8,131072,0,16,1,22,0,0,1,11,16,32768,0,11,1,22,0,0,2,4,2,16384,4,14,5,4,32787,1,13,4,6,32768,0,16,1,22,0,0,7,10,16,32768,0,11,1,22,0,0,2,1,21,8192,0,2,4,12,32768,0,6,7,6,33024,3,4,14,8,131136,0,16,4,4,32787,2,13,3,21,0,0,4,9,8,32768,0,10,1,21,8192,3,4,14,8,131136,0,16,4,4,32771,0,5,6,18,66048,0,7,1,2,16387,2,13,1,2,16384,0,1,2,21,0,1,1,2,21,8192,0,2,4,12,32768,0,6,7,6,33024,7,10,1,22,0,0,10,11,16,32771,1,13,9,16,32771,0,21,3,15,131584,0,5,15,8,131584,0,15,1,22,0,0,1,11,16,32768,0,11,1,22,0,0,3,10,13,33024,1,13,8,16,32771,0,11,9,8,131072,0,9,1,22,0,0,1,9,16,32768,0,9,1,22,0,0,2,1,22,0,1,8,20,8,131075,0,31,27,8,131072,0,27,1,22,0,0,1,11,16,32768,0,13,9,16,32768,0,11,8,16,32768,0,8,1,22,0,3,4,8,16,32768,0,9,4,6,32769,1,12,11,16,32768,0,12,12,16,32769,1,12,9,16,32768,0,10,10,16,32769,1,12,16,8,131072,0,16,1,22,0,0,1,12,16,32768,0,12,1,22,0,0,3,4,12,32769,1,12,20,8,131072,0,20,1,22,0,0,1,11,16,32768,0,13,9,16,32768,0,11,8,16,32768,0,8,1,22,0,0,2,9,8,32769,2,4,20,8,36867,0,21,12,16,32768,0,13,4,2,16387,0,16,3,2,16387,5,4,14,8,131136,0,16,4,4,32771,0,5,6,18,66048,0,7,1,2,16387,2,13,1,2,16384,0,1,2,21,0,1,1,2,21,8192,0,2,4,12,32768,0,6,7,6,33024,6,10,1,22,0,0,10,11,16,32771,1,13,9,16,32771,0,21,3,15,131584,0,5,15,8,131584,0,15,1,22,0,0,1,11,16,32768,0,11,1,22,0,0,3,10,13,33024,1,13,8,16,32771,0,11,9,8,131072,0,9,1,22,0,0,1,9,16,32768,0,9,1,22,0,0,2,1,22,0,1,8,29,8,131075,0,40,16,8,131072,0,16,1,22,0,0,1,11,16,32768,0,11,1,22,0,3,4,8,16,32768,0,9,4,6,32769,1,12,11,16,32768,0,12,12,16,32769,1,12,9,16,32768,0,10,10,16,32769,1,12,16,8,131072,0,16,1,22,0,0,1,12,16,32768,0,12,1,22,0,0,3,4,12,32769,1,12,29,8,131072,0,29,1,22,0,0,1,11,16,32768,0,13,9,16,32768,0,11,8,16,32768,0,8,1,22,0,0,2,9,8,32769,2,4,29,8,36867,0,30,12,16,32768,0,13,4,2,16387,0,6,12,16,32768,0,13,5,2,16387,0,7,12,16,32768,0,13,4,2,16387,0,16,3,2,16387,1,8,16,8,131072,0,16,1,22,0,0,1,11,16,32768,0,11,1,22,0,0,2,4,2,16384,0,12,5,6,32768,0,6,5,2,16384,0,8,3,6,32768,0,4,4,2,16384,4,14,5,4,32787,1,10,4,12,32768,0,6,7,6,33024,0,8,2,21,8192,0,3,3,6,32768,1,7,14,8,131072,2,8,4,6,32768,0,16,1,22,0,0,7,10,16,32768,0,11,1,22,0,0,2,1,21,8192,0,2,4,12,32768,0,6,7,6,33024,4,4,14,8,131136,0,16,4,4,32787,2,13,3,21,0,0,4,9,8,32768,0,10,1,21,8192,3,4,14,8,131136,0,16,4,4,32771,0,5,6,18,66048,0,7,1,2,16387,2,13,1,2,16384,0,1,2,21,0,1,5,4,12,32768,0,6,7,6,33024,0,8,2,21,8192,0,3,3,6,32768,1,9,14,8,131072,2,3,2,21,8192,0,2,4,12,32768,0,6,7,6,33024,7,4,12,16,32768,0,13,5,6,32769,1,4,12,16,32768,0,13,3,6,32769,3,10,1,22,0,0,10,11,16,32771,1,13,9,16,32771,0,21,3,15,131584,0,5,15,8,131584,0,15,1,22,0,0,1,11,16,32768,0,11,1,22,0,0,3,10,13,33024,1,13,8,16,32771,0,11,9,8,131072,0,9,1,22,0,0,1,9,16,32768,0,9,1,22,0,0,2,1,22,0,1,8,22,8,131075,0,33,29,8,131072,0,29,1,22,0,0,1,11,16,32768,0,12,9,16,32768,0,10,8,16,32768,0,8,1,22,0,3,4,8,16,32768,0,9,4,6,32769,1,12,11,16,32768,0,12,12,16,32769,1,12,9,16,32768,0,10,10,16,32769,1,12,16,8,131072,0,16,1,22,0,0,1,12,16,32768,0,12,1,22,0,0,3,4,12,32769,1,12,29,8,131072,0,29,1,22,0,0,1,11,16,32768,0,13,9,16,32768,0,11,8,16,32768,0,8,1,22,0,0,2,5,12,32769,1,12,22,8,131072,0,22,1,22,0,0,1,11,16,32768,0,13,9,16,32768,0,11,8,16,32768,0,8,1,22,0,0,2,9,8,32769,2,4,22,8,36867,0,23,12,16,32768,0,13,4,2,16387,0,6,12,16,32768,0,13,5,2,16387,0,7,12,16,32768,0,13,4,2,16387,0,16,3,2,16387,1,8,29,8,131072,0,29,1,22,0,0,1,11,16,32768,0,12,9,16,32768,0,10,8,16,32768,0,8,1,22,0,0,2,4,2,16384,0,6,5,2,16384,0,7,4,2,16384,4,4,14,8,131136,0,16,4,4,32771,0,5,6,18,66048,0,7,1,2,16387,2,13,1,2,16384,0,1,2,21,0,1,5,4,12,32768,0,6,7,6,33024,0,8,2,21,8192,0,3,5,12,32768,0,7,5,6,33024,1,9,14,8,131072,2,3,2,21,8192,0,2,4,12,32768,0,6,7,6,33024,8,10,1,22,0,0,10,7,16,16387,0,7,1,22,0,1,9,14,8,131136,1,2,28,3,131075,0,35,7,16,16384,0,9,7,2,16403,0,15,7,16,16384,0,9,5,2,16403,0,12,7,16,16384,0,9,3,2,16403,0,15,3,2,16387,5,10,1,22,0,0,10,7,16,16387,0,7,1,22,0,1,9,14,8,131136,1,2,20,3,131075,0,27,7,16,16384,0,9,7,2,16403,0,15,7,16,16384,0,9,5,2,16403,0,12,7,16,16384,0,9,3,2,16403,0,15,3,2,16387,5,10,1,22,0,0,10,7,16,16387,0,7,1,22,0,1,9,14,8,131136,1,2,28,3,131075,0,35,7,16,16384,0,9,7,2,16403,0,19,3,2,16387,5,10,1,22,0,0,10,7,16,16387,0,7,1,22,0,1,9,14,8,131136,1,2,20,3,131075,0,27,7,16,16384,0,9,7,2,16403,0,19,3,2,16387,8,10,4,15,131073,2,11,1,22,0,0,7,1,16,32771,0,1,1,22,0,1,9,18,8,131075,2,4,18,8,36867,0,29,3,2,16387,0,16,5,2,16387,5,13,1,16,32768,2,6,4,15,131072,0,6,16,8,131072,0,17,4,1,16387,2,8,4,15,131072,0,6,2,3,131072,0,2,1,22,0,0,1,1,16,32768,0,1,1,22,0,0,2,4,1,16384,1,21,3,15,131584,0,5,16,8,131584,0,18,1,1,16403,1,6,3,1,16387,2,5,1,21,8192,0,1,14,14,256,1,5,10,19,131072,0,11,14,19,131072,2,1,23,3,65536,0,24,3,1,16384,1,1,23,3,65536,0,24,1,1,16400,0,2,4,4,33424,5,4,18,8,131072,0,28,1,21,3,0,8,1,16,32768,0,3,1,2,16403,3,13,1,21,8192,4,14,4,6,32769,1,15,6,6,32769,3,11,1,22,0,0,7,1,16,32771,0,1,1,22,0,1,9,25,8,131075,2,4,25,8,36867,0,32,1,16,32768,0,3,1,2,16403,0,4,7,6,32768,0,8,1,2,16400,1,10,1,16,32768,0,11,2,21,3,0,20,1,21,8192,0,1,7,6,32768,1,19,1,16,32768,0,20,1,21,8192,0,1,7,6,32768,1,4,1,16,32768,0,2,7,6,32769,3,11,1,22,0,0,7,1,16,32771,0,9,9,16,32771,0,10,1,22,0,1,9,28,8,131075,2,12,28,8,131072,0,28,1,22,0,0,1,1,16,32768,0,3,9,16,32768,0,10,1,22,0,0,2,4,8,32769,2,12,3,15,131584,0,5,26,8,131584,0,27,17,8,32769,1,12,9,16,32768,0,10,9,16,32769,1,12,1,16,32768,0,2,10,16,32769,1,12,1,16,32768,0,3,7,12,32769,1,23,15,18,32769,2,4,28,8,36867,4,4,28,8,36867,0,39,3,2,16387,0,16,5,2,16387,1,19,6,6,32768,4,4,9,16,32768,0,18,1,21,3,5,4,25,8,131072,0,25,1,22,0,0,1,1,16,32768,0,1,1,22,0,1,12,2,21,3,1,13,25,8,131072,0,25,1,22,0,0,1,1,16,32768,0,1,1,22,0,3,17,2,21,3,0,9,4,8,32768,0,6,2,2,16403,5,17,2,21,3,0,9,4,8,32768,0,6,2,2,16403,2,13,1,21,8192,0,13,2,2,16400,3,4,4,8,32768,0,15,2,21,3,2,6,2,21,0,0,2,6,6,32768,1,13,1,21,8192,3,4,4,8,32768,0,15,2,21,3,2,6,2,21,0,0,2,6,6,32768,1,13,1,21,8192,3,4,4,8,32768,0,15,2,21,3,0,4,15,18,32768,0,16,1,2,16387,2,6,6,6,32768,0,7,2,21,0,0,3,1,2,16384,1,13,1,21,8192,3,4,4,8,32768,0,14,1,21,3,0,2,15,18,32768,0,16,1,2,16387,5,4,4,8,32768,0,15,2,21,3,0,4,15,18,32768,0,16,1,2,16387,2,6,6,6,32768,0,7,2,21,0,0,3,1,2,16384,1,13,1,21,8192,3,4,4,8,32768,0,14,1,21,3,0,2,15,18,32768,0,16,1,2,16387,5,4,15,18,32768,0,25,1,21,3,0,9,4,8,32768,0,6,2,2,16403,2,13,6,6,32768,0,7,1,21,8192,0,2,2,2,16400,0,3,6,6,33024,3,18,1,21,3,0,9,4,8,32768,0,6,2,2,16403,2,13,6,6,32768,0,7,1,21,8192,0,2,2,2,16400,0,3,6,6,33024,3,4,9,16,32768,1,12,1,21,3,0,1,1,21,3,0,2,15,18,32768,0,16,1,2,16387,6,14,4,6,32769,1,4,15,18,32768,0,16,6,6,32769,4,11,1,22,0,0,7,1,16,32771,0,1,1,22,0,1,9,19,8,131075,2,12,18,8,131072,0,18,1,22,0,0,1,1,16,32768,0,1,1,22,0,0,2,9,12,32769,1,18,18,8,131072,0,18,1,22,0,0,1,1,16,32768,0,1,1,22,0,0,2,15,12,32769,1,12,1,16,32768,0,2,10,16,32769,1,12,1,16,32768,0,3,7,12,32769,1,23,15,18,32769,1,12,6,18,66048,0,7,9,18,32769,1,18,7,12,32768,0,8,13,12,32769,1,12,28,8,131072,0,28,1,22,0,0,1,1,16,32768,0,3,9,12,32768,0,9,1,22,0,0,2,8,12,32769,1,12,28,8,131072,0,28,1,22,0,0,1,1,16,32768,0,3,15,12,32768,0,15,1,22,0,0,2,14,12,32769,2,4,19,8,36867,0,30,3,2,16387,2,10,1,21,8192,0,1,16,14,256,1,7,3,15,131584,0,5,16,8,131584,6,5,19,8,135171,5,4,9,18,32768,0,10,4,4,32787,5,9,5,4,32787,2,13,4,4,32784,0,7,2,21,8192,3,4,8,12,32768,0,9,5,4,32771,5,4,14,12,32768,0,15,5,4,32787,5,4,8,12,32768,0,9,3,4,32771,5,4,14,12,32768,0,15,3,4,32787,5,4,9,12,32768,0,18,1,21,3,0,1,1,21,3,0,2,15,18,32768,0,16,1,2,16387,5,4,15,12,32768,0,24,1,21,3,0,1,1,21,3,0,2,15,18,32768,0,16,1,2,16387,5,9,5,4,32787,2,17,1,1,16387,1,22,1,1,16387,0,9,1,21,8192,0,5,2,21,8192,1,1,4,15,131072,0,6,16,8,131072,0,17,4,1,16387,1,5,1,21,8192,0,1,4,15,131072,0,6,5,3,131072,0,5,1,22,0,0,1,10,16,32768,0,10,1,22,0,0,2,4,1,16384,7,14,4,6,32769,6,10,16,19,131073,3,10,4,15,131073,1,11,1,22,0,0,1,1,22,0,0,9,6,8,131075,0,6,1,22,0,0,9,1,22,0,1,12,14,8,131072,0,15,8,8,32769,1,23,9,5,32803,2,11,1,22,0,0,1,1,22,0,0,10,12,8,131075,0,12,1,22,0,0,9,1,22,0,1,19,10,18,32769,1,15,5,5,32803,0,16,3,2,16387,0,5,10,18,32768,0,12,3,2,16387,4,11,1,22,0,0,1,1,22,0,0,10,11,8,131075,0,11,1,22,0,0,9,1,22,0,1,19,10,18,32769,1,21,4,5,32803,0,11,10,18,32768,0,12,3,2,16403,1,13,16,19,131072,0,19,3,2,16400,6,10,4,15,131073,1,11,1,22,0,0,7,9,16,16387,0,17,3,16,16387,0,3,1,22,0,2,2,6,3,131075,0,13,9,16,16384,0,11,9,2,16403,0,11,3,16,16384,0,5,3,2,16387,2,21,9,16,16384,0,11,10,13,33024,0,11,10,12,16385,1,13,9,16,16384,0,11,14,13,33024,0,15,2,1,16387,0,5,9,2,16400,0,10,5,14,33024,1,10,2,1,16384,0,3,2,21,8192,0,3,9,2,16400,0,10,3,14,33024,0,7,2,21,8192,0,2,2,1,16384,1,6,3,2,16384,0,5,6,14,33024,0,7,3,2,16384,0,5,3,14,33024,0,7,10,12,16384,0,12,1,21,8192,0,1,2,1,16384,4,11,1,22,0,0,7,3,16,32771,0,11,1,16,32771,0,13,3,16,32768,0,5,10,13,33024,0,11,1,22,0,1,9,19,8,131075,1,12,3,16,32768,0,4,8,16,32769,1,12,1,16,32768,0,2,10,16,32769,2,15,5,5,32803,0,16,3,2,16387,0,5,8,16,32768,0,11,3,2,16387,2,1,8,16,32768,0,10,1,1,16387,1,1,14,8,65536,0,16,10,1,16387,0,13,4,15,131072,0,6,9,3,131072,0,9,1,22,0,0,1,8,16,32768,0,8,1,22,0,1,5,10,1,16384,0,11,2,21,8192,0,3,9,19,131072,0,12,15,19,131072,0,30,1,21,8192,0,1,1,1,16384,0,3,10,1,16384,1,7,3,2,16384,0,5,1,21,8192,0,1,3,2,16384,0,4,1,21,8192,0,2,1,1,16384,1,10,11,19,131072,2,17,16,14,256,2,3,19,8,131072,0,19,1,22,0,0,1,10,16,32768,0,10,1,22,0,0,2,9,1,16387,0,10,3,2,16384,1,7,3,2,16384,1,5,8,16,32768,0,10,4,1,16387,0,7,3,21,0,0,4,8,16,32768,1,5,6,3,131072,0,7,9,1,16384,0,11,4,1,16384,1,5,1,21,8192,0,1,3,2,16384,0,4,1,21,8192,0,2,4,1,16384,1,12,11,19,131072,2,12,9,1,16384,0,10,5,4,33040,0,8,1,21,0,0,2,7,19,131072,0,8,1,21,0,0,2,10,19,131072,2,10,3,15,131584,0,5,9,8,131584,0,11,1,1,16387,1,7,3,2,16384,1,9,1,21,8192,0,1,14,14,256,4,10,10,19,131072,3,13,10,19,131072,4,11,1,22,0,0,7,3,16,32771,0,11,1,16,32771,0,13,3,16,32768,0,5,10,13,33024,0,11,1,22,0,1,9,18,8,131075,1,12,3,16,32768,0,4,8,16,32769,1,12,1,16,32768,0,2,10,16,32769,1,21,3,16,32768,0,5,9,13,33024,0,10,9,12,32769,1,21,8,16,32768,0,10,14,13,33024,0,15,14,12,32769,2,21,4,5,32803,0,11,8,16,32768,0,10,3,2,16403,1,7,35,19,131072,6,6,9,12,32768,0,10,4,1,16387,0,7,3,2,16400,0,4,4,14,33024,1,10,4,1,16384,0,5,2,21,8192,0,4,9,12,32768,0,10,7,19,131072,1,11,3,1,16387,1,12,1,1,16387,1,6,14,12,32768,0,15,2,1,16387,0,5,3,2,16400,0,4,5,14,33024,0,9,2,1,16384,0,3,2,21,8192,0,3,3,2,16400,0,4,3,14,33024,0,7,2,21,8192,0,2,2,1,16384,0,2,1,21,8192,0,2,2,21,8192,1,3,15,14,256,0,22,4,15,131072,0,6,4,3,131072,0,4,1,22,0,0,1,10,16,32768,0,10,1,22,0,0,2,1,21,8192,0,1,2,1,16384,5,8,4,19,131072,7,12,4,15,131073,24,16,4,15,131073,1,10,1,22,0,0,1,1,22,0,0,10,6,8,131075,0,6,1,22,0,0,1,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,10,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,2,1,22,0,1,11,16,8,131072,0,17,8,8,32769,1,22,9,5,32803,6,0,10,19,131072,0,11,4,15,131072,0,6,14,8,131136,0,16,33,3,65539,0,57,4,2,16387,0,16,11,2,16387,1,13,4,15,131072,0,6,20,3,131072,0,27,5,14,33024,0,15,5,14,33024,0,15,3,14,33024,0,7,1,21,8192,2,0,10,19,131072,0,16,36,3,65539,0,66,4,2,16403,1,13,1,21,8192,0,2,4,2,16400,0,6,5,14,33024,2,0,10,19,131072,0,16,33,3,65539,0,63,4,2,16403,1,13,1,21,8192,0,2,4,2,16400,0,6,5,14,33024,2,0,10,19,131072,0,44,32,3,65539,0,62,4,2,16403,1,19,4,14,33024,3,0,16,19,131072,1,0,26,3,65539,0,43,5,2,16387,2,10,5,2,16384,0,6,1,21,0,0,2,8,19,131072,0,10,1,21,0,1,4,23,14,256,0,24,5,2,16384,0,7,1,21,0,0,2,14,14,256,0,26,1,22,0,0,7,1,22,0,0,2,5,2,16384,4,7,24,19,131072,1,0,16,19,131072,1,0,34,3,65539,0,56,5,2,16387,2,10,5,2,16384,0,6,1,21,0,0,2,8,19,131072,0,10,1,21,0,1,4,27,14,256,0,28,5,2,16384,0,7,1,21,0,0,2,14,14,256,0,26,1,22,0,0,7,1,22,0,0,2,5,2,16384,5,0,16,19,131072,1,0,16,3,65539,0,19,6,18,66048,0,7,5,2,16387,2,7,24,19,131072,1,13,6,18,66048,0,8,2,21,0,3,7,24,19,131072,8,0,10,19,131072,0,11,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,37,3,65539,0,61,4,2,16387,0,44,1,2,16387,0,41,1,2,16387,1,13,4,15,131072,0,6,8,3,131072,2,0,10,19,131072,0,16,45,3,65539,0,69,4,2,16387,0,44,1,2,16387,0,41,1,2,16387,1,6,4,15,131072,0,6,8,3,131072,2,0,10,19,131072,0,16,45,3,65539,0,69,4,2,16387,0,44,1,2,16387,0,41,1,2,16387,0,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,9,1,2,16403,1,6,4,15,131072,0,6,8,3,131072,0,24,1,2,16400,2,0,10,19,131072,0,16,37,3,65539,0,61,4,2,16387,0,44,1,2,16387,0,41,1,2,16387,1,6,4,15,131072,0,6,8,3,131072,2,0,10,19,131072,0,16,44,3,65539,0,68,4,2,16387,0,44,1,2,16387,1,6,4,15,131072,0,6,5,3,131072,0,12,4,15,131072,0,6,6,3,131072,2,0,10,19,131072,0,11,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,44,3,65539,0,68,4,2,16387,0,20,5,2,16387,1,17,1,1,16387,1,10,1,21,8192,0,1,13,14,256,1,8,10,19,131072,0,11,14,19,131072,1,15,4,19,131072,2,25,16,19,131072,1,70,2,1,16387,1,70,2,1,16387,3,0,10,19,131072,0,16,44,3,65539,0,68,4,2,16387,0,20,5,2,16387,0,6,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,9,1,2,16403,1,17,1,1,16387,1,10,1,21,8192,0,1,13,14,256,1,8,10,19,131072,0,11,14,19,131072,3,25,16,19,131072,1,70,2,1,16387,1,70,2,1,16387,3,0,10,19,131072,0,16,44,3,65539,0,68,4,2,16387,0,20,5,2,16387,1,17,1,1,16387,1,10,1,21,8192,0,1,13,14,256,1,8,10,19,131072,0,11,14,19,131072,3,25,16,19,131072,1,70,2,1,16387,1,70,2,1,16387,3,0,10,19,131072,0,16,44,3,65539,0,68,4,2,16387,0,20,5,2,16387,1,17,1,1,16387,1,10,1,21,8192,0,1,13,14,256,1,8,10,19,131072,0,11,14,19,131072,3,25,16,19,131072,1,70,2,1,16387,1,70,2,1,16387,3,0,10,19,131072,0,52,44,3,65539,0,74,4,2,16403,0,44,1,2,16387,1,13,1,21,8192,0,2,4,15,131072,0,6,7,3,131072,3,10,4,15,131073,1,19,25,3,65539,1,21,4,1,16419,4,11,1,22,0,0,10,1,16,32771,0,1,1,22,0,1,9,15,8,131075,3,16,14,5,32803,5,11,1,22,0,0,1,1,22,0,1,9,15,8,131075,0,15,1,22,0,0,1,4,15,131072,0,6,16,8,131072,0,16,1,22,0,8,16,14,5,32803,0,25,5,2,16387,0,17,5,2,16387,1,6,12,8,65536,0,14,8,1,16387,1,10,8,1,16384,0,9,2,21,0,0,4,8,1,16384,0,10,3,6,32768,0,4,1,21,0,0,2,16,19,131072,0,18,2,21,0,0,3,16,19,131072,8,0,10,19,131072,0,16,44,3,65539,0,68,4,2,16387,0,44,1,2,16387,0,43,1,2,16403,1,6,1,21,8192,0,2,4,15,131072,0,6,6,3,131072,0,16,1,21,8192,2,0,10,19,131072,0,45,28,3,65539,0,52,4,2,16387,1,10,4,2,16384,0,6,4,14,33024,0,7,2,21,8192,1,7,3,15,131584,0,5,12,8,131584,1,65,1,1,16387,1,6,4,2,16384,0,6,8,14,33024,3,0,10,19,131072,0,16,31,3,65539,0,55,4,2,16387,0,46,1,2,16403,1,6,4,2,16384,0,6,9,14,33024,2,0,10,19,131072,0,43,38,3,65539,0,62,4,2,16387,0,37,3,2,16387,0,19,5,14,33024,1,0,10,19,131072,0,43,38,3,65539,0,62,4,2,16387,0,37,5,2,16387,0,38,4,2,16387,0,20,5,14,33024,1,0,10,19,131072,0,43,39,3,65539,0,63,4,2,16387,0,37,3,2,16387,0,45,1,2,16403,0,17,6,14,33024,1,0,10,19,131072,0,16,39,3,65539,0,63,4,2,16387,0,37,3,2,16387,0,37,1,2,16387,0,43,1,2,16403,0,4,4,2,16384,0,6,6,14,33024,2,0,16,19,131072,1,2,13,3,65539,0,20,5,2,16387,2,9,14,14,256,0,22,5,2,16384,4,0,10,19,131072,1,0,14,3,65539,0,27,3,2,16387,0,10,3,2,16387,2,7,1,1,16387,1,6,3,1,16387,1,6,9,19,131072,0,10,3,1,16384,1,9,1,1,16384,0,2,1,21,0,0,2,7,19,131072,0,8,2,21,0,0,3,1,1,16384,0,2,1,21,0,0,2,7,19,131072,1,13,18,19,131072,2,10,3,2,16384,0,5,1,21,0,0,1,3,2,16384,0,4,1,21,0,0,13,1,22,0,0,6,1,22,0,0,2,1,1,16384,3,9,3,1,16384,3,7,11,19,131072,3,0,10,19,131072,0,21,27,3,65539,0,38,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,31,19,131072,0,33,19,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,1,2,6,21,0,0,7,4,1,16384,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,26,3,65539,0,37,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,12,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,3,10,4,15,131072,0,6,14,8,131072,0,16,2,1,16387,2,12,2,1,16384,1,6,16,19,131072,1,6,9,19,131072,3,2,9,1,16384,0,10,1,21,8192,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,33,3,65539,0,44,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,2,6,18,66048,0,7,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,6,18,66048,0,7,4,1,16387,1,6,6,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,13,1,22,0,0,2,6,18,66048,0,7,1,22,0,0,2,4,1,16384,2,4,6,1,16384,0,7,1,21,0,0,3,4,15,131072,0,6,14,8,131136,0,18,4,1,16384,0,7,4,4,32960,0,5,4,1,16384,1,10,4,15,131072,0,6,14,8,131072,0,16,2,1,16387,2,12,2,1,16384,1,6,16,19,131072,1,6,9,19,131072,3,14,18,19,131072,0,19,15,19,131072,0,25,31,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,33,3,65539,0,44,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,8,5,1,16387,1,6,4,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,2,4,6,1,16384,0,7,1,21,0,0,3,4,15,131072,0,6,14,8,131136,0,18,4,1,16384,0,7,4,4,32960,1,10,4,15,131072,0,6,14,8,131072,0,16,2,1,16387,2,12,2,1,16384,1,6,16,19,131072,1,6,9,19,131072,3,14,18,19,131072,0,19,15,19,131072,0,25,31,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,25,3,65539,0,36,4,2,16387,0,16,4,2,16387,1,13,4,1,16387,1,12,4,1,16387,4,82,9,19,131072,1,2,2,21,8192,1,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,10,4,1,16387,1,8,3,1,16387,0,6,15,19,131072,0,32,31,19,131072,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,4,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,10,4,1,16387,1,8,3,1,16387,0,6,15,19,131072,0,32,31,19,131072,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,2,12,3,1,16387,0,33,4,19,131072,1,8,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,10,2,1,16384,6,0,4,23,16385,1,2,34,3,65536,8,0,10,19,131072,0,21,33,3,65539,0,44,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,2,6,18,66048,0,7,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,6,18,66048,0,7,4,1,16387,1,6,6,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,13,1,22,0,0,2,6,18,66048,0,7,1,22,0,0,2,4,1,16384,2,4,6,1,16384,0,7,1,21,0,0,3,4,15,131072,0,6,14,8,131136,0,18,4,1,16384,0,7,4,4,32896,0,5,4,1,16384,1,10,4,15,131072,0,6,14,8,131072,0,16,2,1,16387,2,12,2,1,16384,1,6,16,19,131072,1,6,9,19,131072,3,14,18,19,131072,0,19,15,19,131072,0,25,31,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,33,3,65539,0,44,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,8,5,1,16387,1,6,4,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,2,4,6,1,16384,0,7,1,21,0,0,3,4,15,131072,0,6,14,8,131136,0,18,4,1,16384,0,7,4,4,32896,1,10,4,15,131072,0,6,14,8,131072,0,16,2,1,16387,2,12,2,1,16384,1,6,16,19,131072,1,6,9,19,131072,3,14,18,19,131072,0,19,15,19,131072,0,25,31,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,25,3,65539,0,36,4,2,16387,0,16,4,2,16387,1,13,4,1,16387,1,12,4,1,16387,4,82,9,19,131072,1,2,2,21,8192,1,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,10,4,1,16387,1,8,3,1,16387,0,6,15,19,131072,0,32,31,19,131072,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,4,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,10,4,1,16387,1,8,3,1,16387,0,6,15,19,131072,0,32,31,19,131072,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,2,12,3,1,16387,0,33,4,19,131072,1,8,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,10,2,1,16384,6,0,4,23,16385,1,2,34,3,65536,8,0,10,19,131072,0,21,29,3,65539,0,40,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,2,9,18,66048,0,10,6,1,16387,2,81,9,19,131072,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,1,9,15,19,131072,0,37,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,6,1,21,0,0,1,5,1,16384,1,4,19,19,131072,0,20,15,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,2,4,6,1,16384,0,7,1,21,0,0,4,4,15,131072,0,6,14,8,131136,0,23,4,1,16384,0,7,8,4,32912,0,10,4,15,131072,0,6,14,8,131136,0,23,1,21,0,0,1,4,1,16384,1,10,3,15,131584,0,5,16,8,131584,0,18,2,1,16387,1,4,17,19,131072,0,18,18,19,131072,0,96,32,19,131072,0,33,16,19,131072,0,44,32,19,131072,0,35,9,19,131072,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,26,3,65539,0,37,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,7,6,1,16387,2,78,9,19,131072,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,1,9,15,19,131072,0,37,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,6,1,21,0,0,1,5,1,16384,1,4,19,19,131072,0,20,15,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,2,4,6,1,16384,0,7,1,21,0,0,10,4,15,131072,0,6,14,8,131136,0,23,4,1,16384,0,7,5,4,32912,0,7,4,15,131072,0,6,14,8,131136,0,23,1,21,0,0,1,4,1,16384,1,10,3,15,131584,0,5,16,8,131584,0,18,2,1,16387,1,4,17,19,131072,0,18,18,19,131072,0,96,32,19,131072,0,33,16,19,131072,0,44,32,19,131072,0,35,9,19,131072,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,25,3,65539,0,36,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,1,2,6,1,16384,0,7,1,21,0,0,3,4,15,131072,0,6,14,8,131136,0,19,4,15,131072,0,6,14,8,131136,0,23,4,1,16384,0,7,4,4,32976,1,14,18,19,131072,0,19,15,19,131072,0,25,31,19,131072,0,33,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,25,3,65539,0,36,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,12,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,3,10,4,15,131072,0,6,14,8,131072,0,16,2,1,16387,2,12,2,1,16384,1,6,16,19,131072,1,6,9,19,131072,3,2,9,1,16384,0,10,1,21,8192,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,29,3,65539,0,40,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,12,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,3,10,4,15,131072,0,6,14,8,131072,0,16,2,1,16387,2,12,2,1,16384,1,6,16,19,131072,1,6,9,19,131072,3,2,9,1,16384,0,10,1,21,8192,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,29,3,65539,0,40,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,12,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,3,10,4,15,131072,0,6,14,8,131072,0,16,2,1,16387,2,12,2,1,16384,1,6,16,19,131072,1,6,9,19,131072,3,2,9,1,16384,0,10,1,21,8192,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,28,3,65539,0,39,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,2,9,18,66048,0,10,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,6,1,16387,2,80,9,19,131072,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,13,1,22,0,0,2,9,18,66048,0,10,1,22,0,0,2,4,1,16384,2,4,6,1,16384,0,7,1,21,0,0,3,4,15,131072,0,6,14,8,131136,0,18,4,1,16384,0,7,7,4,32768,0,8,4,1,16384,1,10,4,15,131072,0,6,14,8,131072,0,16,2,1,16387,2,12,2,1,16384,1,6,16,19,131072,1,6,9,19,131072,3,14,18,19,131072,0,19,15,19,131072,0,25,31,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,27,3,65539,0,38,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,7,6,1,16387,2,79,9,19,131072,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,1,9,15,19,131072,0,37,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,6,1,21,0,0,1,5,1,16384,1,4,19,19,131072,0,20,15,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,1,2,6,1,16384,0,7,1,21,0,0,10,4,15,131072,0,6,14,8,131136,0,23,4,1,16384,0,16,2,21,8192,0,4,4,15,131072,0,6,14,8,131136,0,23,1,21,0,0,1,4,1,16384,3,0,4,23,16385,1,2,11,14,256,6,0,10,19,131072,0,21,27,3,65539,0,38,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,7,6,1,16387,2,79,9,19,131072,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,1,9,15,19,131072,0,37,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,6,1,21,0,0,1,5,1,16384,1,4,19,19,131072,0,20,15,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,1,2,6,1,16384,0,7,1,21,0,0,10,4,15,131072,0,6,14,8,131136,0,23,4,1,16384,0,16,2,21,8192,0,4,4,15,131072,0,6,14,8,131136,0,23,1,21,0,0,1,4,1,16384,3,0,4,23,16385,1,2,11,14,256,6,0,10,19,131072,0,21,29,3,65539,0,40,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,2,9,18,66048,0,10,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,6,1,16387,2,81,9,19,131072,1,9,15,19,131072,0,36,31,19,131072,0,33,19,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,13,1,22,0,0,2,9,18,66048,0,10,1,22,0,0,2,4,1,16384,2,4,6,1,16384,0,7,1,21,0,0,3,4,15,131072,0,6,14,8,131136,0,18,1,21,0,0,2,4,1,16384,0,16,2,21,8192,0,3,4,1,16384,1,10,4,15,131072,0,6,14,8,131072,0,16,2,1,16387,2,12,2,1,16384,1,6,16,19,131072,1,6,9,19,131072,3,14,18,19,131072,0,19,15,19,131072,0,25,31,19,131072,0,33,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,29,3,65539,0,40,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,2,9,18,66048,0,10,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,6,1,16387,2,81,9,19,131072,1,9,15,19,131072,0,36,31,19,131072,0,33,19,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,13,1,22,0,0,2,9,18,66048,0,10,1,22,0,0,2,4,1,16384,2,4,6,1,16384,0,7,1,21,0,0,3,4,15,131072,0,6,14,8,131136,0,18,1,21,0,0,2,4,1,16384,0,16,2,21,8192,0,3,4,1,16384,1,10,4,15,131072,0,6,14,8,131072,0,16,2,1,16387,2,12,2,1,16384,1,6,16,19,131072,1,6,9,19,131072,3,14,18,19,131072,0,19,15,19,131072,0,25,31,19,131072,0,33,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,28,3,65539,0,39,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,2,9,18,66048,0,10,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,6,1,16387,2,80,9,19,131072,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,13,1,22,0,0,2,9,18,66048,0,10,1,22,0,0,2,4,1,16384,2,4,6,1,16384,0,7,1,21,0,0,3,4,15,131072,0,6,14,8,131136,0,19,4,15,131072,0,6,14,8,131136,0,23,4,1,16384,0,16,1,21,8192,0,2,4,1,16384,1,10,4,15,131072,0,6,14,8,131072,0,16,2,1,16387,2,12,2,1,16384,1,6,16,19,131072,1,6,9,19,131072,3,14,18,19,131072,0,19,15,19,131072,0,25,31,19,131072,0,33,16,19,131072,2,0,4,23,16385,1,2,11,14,256,6,0,10,19,131072,0,21,36,3,65539,0,47,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,2,9,18,66048,0,10,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,13,1,22,0,0,2,9,18,66048,0,10,1,22,0,0,2,4,1,16384,2,4,6,1,16384,0,7,1,21,0,0,3,4,15,131072,0,6,14,8,131136,0,19,4,15,131072,0,6,14,8,131136,0,23,4,1,16384,0,16,1,21,8192,0,2,4,1,16384,1,10,4,15,131072,0,6,14,8,131072,0,16,2,1,16387,2,12,2,1,16384,1,6,16,19,131072,1,6,9,19,131072,3,14,18,19,131072,0,19,15,19,131072,0,25,31,19,131072,0,33,16,19,131072,2,0,4,23,16385,1,2,11,14,256,6,0,10,19,131072,0,21,36,3,65539,0,47,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,0,8,4,15,131072,0,6,14,8,131136,1,2,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,9,18,66048,0,10,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,1,9,15,19,131072,0,37,31,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,6,1,21,0,0,1,5,1,16384,1,4,19,19,131072,0,20,15,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,4,15,131072,0,6,14,8,131136,0,17,1,22,0,0,2,5,1,16384,1,2,6,1,16384,0,7,1,21,0,0,4,4,15,131072,0,6,14,8,131136,0,23,4,1,16384,0,16,1,21,8192,0,3,4,15,131072,0,6,14,8,131136,0,23,1,21,0,0,1,4,1,16384,3,0,4,23,16385,1,2,11,14,256,6,0,10,19,131072,0,21,28,3,65539,0,39,4,2,16387,0,16,4,2,16387,1,13,4,1,16387,1,12,4,1,16387,4,85,9,19,131072,1,2,2,21,8192,1,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,10,4,1,16387,1,8,3,1,16387,0,6,15,19,131072,0,32,31,19,131072,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,1,10,3,1,16387,0,6,15,19,131072,0,28,31,19,131072,0,33,20,19,131072,1,6,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,10,2,1,16384,5,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,10,4,1,16387,1,8,3,1,16387,0,6,15,19,131072,0,32,31,19,131072,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,2,12,3,1,16387,0,36,4,19,131072,1,8,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,10,2,1,16384,6,0,4,23,16385,6,0,10,19,131072,0,21,27,3,65539,0,38,14,19,131072,0,32,4,2,16387,1,12,3,1,16387,1,73,4,19,131072,1,25,31,19,131072,0,33,18,19,131072,4,0,10,19,131072,0,21,27,3,65539,0,38,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,13,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,6,1,16387,2,2,4,1,16384,0,5,1,21,8192,0,2,1,21,8192,1,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,14,18,19,131072,0,19,15,19,131072,0,25,31,19,131072,0,33,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,30,3,65539,0,41,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,7,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,27,3,65539,0,38,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,7,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,26,3,65539,0,37,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,35,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,31,3,65539,0,42,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,41,4,1,16387,1,41,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,1,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,6,1,16387,2,83,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,56,4,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,56,4,1,16384,2,106,13,19,131072,0,20,13,19,131072,1,10,3,15,131584,0,5,12,8,131584,0,14,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,1,10,3,15,131584,0,5,16,8,131584,0,18,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,2,14,18,19,131072,0,19,15,19,131072,0,25,57,19,131072,0,59,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,39,3,65539,0,50,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,41,4,1,16387,1,41,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,56,4,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,56,4,1,16384,2,4,45,3,65536,0,51,13,19,131072,0,20,13,19,131072,1,10,3,15,131584,0,5,12,8,131584,0,14,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,1,10,3,15,131584,0,5,16,8,131584,0,18,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,39,3,65539,0,50,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,41,4,1,16387,1,41,4,1,16387,1,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,1,6,4,1,16387,0,7,11,19,131072,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,56,4,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,56,4,1,16384,2,4,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,3,1,16387,0,7,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,4,1,16384,0,5,1,21,8192,0,2,4,15,131072,0,6,5,3,131072,0,19,1,21,0,0,1,3,1,16384,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,3,1,16384,1,6,19,19,131072,0,20,15,19,131072,2,4,4,1,16384,0,5,1,21,0,0,2,3,1,16384,3,4,45,3,65536,0,51,13,19,131072,0,20,13,19,131072,0,21,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,10,1,21,0,0,1,4,1,16384,1,10,3,15,131584,0,5,12,8,131584,0,14,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,1,10,3,15,131584,0,5,16,8,131584,0,18,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,3,6,13,19,131072,0,14,4,1,16384,0,7,6,21,0,0,7,4,1,16384,2,0,4,23,16385,1,6,13,19,131072,0,14,4,1,16384,0,7,6,21,0,0,7,4,1,16384,1,9,4,19,131072,4,0,10,19,131072,0,21,31,3,65539,0,42,4,2,16387,0,16,4,2,16387,1,13,4,1,16387,1,12,4,1,16387,4,88,9,19,131072,1,2,2,21,8192,1,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,2,12,3,1,16387,0,36,4,19,131072,1,8,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,10,2,1,16384,2,14,3,1,16387,0,36,4,19,131072,1,10,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,12,2,1,16384,6,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,2,12,3,1,16387,0,36,4,19,131072,1,8,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,10,2,1,16384,2,14,3,1,16387,0,36,4,19,131072,1,10,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,12,2,1,16384,1,14,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,10,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,14,2,1,16384,8,0,4,23,16385,1,2,34,3,65536,8,0,10,19,131072,0,21,31,3,65539,0,42,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,41,4,1,16387,1,41,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,2,83,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,56,4,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,56,4,1,16384,2,4,37,3,65536,0,43,13,19,131072,0,20,13,19,131072,1,10,3,15,131584,0,5,12,8,131584,0,14,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,1,10,3,15,131584,0,5,16,8,131584,0,18,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,38,3,65539,0,49,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,41,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,56,4,1,16384,2,4,44,3,65536,0,50,13,19,131072,1,10,3,15,131584,0,5,12,8,131584,0,14,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,1,10,3,15,131584,0,5,16,8,131584,0,18,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,38,3,65539,0,49,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,17,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,8,1,21,8192,0,1,13,14,256,1,6,19,19,131072,0,20,13,19,131072,0,14,14,19,131072,6,10,3,15,131584,0,5,12,8,131584,0,14,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,1,10,3,15,131584,0,5,16,8,131584,0,18,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,2,14,18,19,131072,0,19,15,19,131072,0,25,57,19,131072,0,59,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,38,3,65539,0,49,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,17,4,1,16387,1,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,6,4,1,16387,0,7,11,19,131072,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,8,1,21,8192,0,1,13,14,256,1,6,19,19,131072,0,20,13,19,131072,0,14,14,19,131072,5,4,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,3,1,16387,0,7,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,4,1,16384,0,5,1,21,8192,0,2,4,15,131072,0,6,5,3,131072,0,19,1,21,0,0,1,3,1,16384,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,3,1,16384,1,6,19,19,131072,0,20,15,19,131072,2,4,4,1,16384,0,5,1,21,0,0,2,3,1,16384,3,4,44,3,65536,0,56,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,10,1,21,0,0,1,4,1,16384,1,10,3,15,131584,0,5,12,8,131584,0,14,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,1,10,3,15,131584,0,5,16,8,131584,0,18,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,3,6,13,19,131072,0,14,4,1,16384,0,7,6,21,0,0,7,4,1,16384,2,0,4,23,16385,1,6,13,19,131072,0,14,4,1,16384,0,7,6,21,0,0,7,4,1,16384,1,9,4,19,131072,4,0,10,19,131072,0,21,38,3,65539,0,49,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,17,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,8,1,21,8192,0,1,13,14,256,1,6,19,19,131072,0,20,13,19,131072,0,14,14,19,131072,5,4,44,3,65536,1,10,3,15,131584,0,5,12,8,131584,0,14,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,1,10,3,15,131584,0,5,16,8,131584,0,18,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,38,3,65539,0,49,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,17,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,8,1,21,8192,0,1,13,14,256,1,6,19,19,131072,0,20,13,19,131072,0,14,14,19,131072,5,4,44,3,65536,1,10,3,15,131584,0,5,12,8,131584,0,14,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,1,10,3,15,131584,0,5,16,8,131584,0,18,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,30,3,65539,0,41,4,2,16387,0,16,4,2,16387,1,13,4,1,16387,1,12,4,1,16387,4,87,9,19,131072,1,2,2,21,8192,1,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,2,8,2,1,16384,0,3,1,21,8192,0,2,13,14,256,2,10,2,1,16384,5,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,2,12,3,1,16387,0,36,4,19,131072,1,8,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,10,2,1,16384,6,0,4,23,16385,1,2,34,3,65536,8,0,10,19,131072,0,21,38,3,65539,0,49,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,41,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,1,37,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,56,4,1,16384,2,133,13,19,131072,1,10,3,15,131584,0,5,12,8,131584,0,14,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,2,2,9,1,16384,0,10,1,21,8192,0,2,16,19,131072,0,28,1,22,0,0,9,1,22,0,0,2,1,21,8192,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,30,3,65539,0,41,4,2,16387,0,16,4,2,16387,1,13,4,1,16387,1,12,4,1,16387,4,87,9,19,131072,1,2,2,21,8192,1,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,2,8,2,1,16384,0,3,1,21,8192,0,2,13,14,256,2,10,2,1,16384,5,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,2,12,3,1,16387,0,36,4,19,131072,1,8,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,10,2,1,16384,6,0,4,23,16385,1,2,34,3,65536,8,0,10,19,131072,0,21,38,3,65539,0,49,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,41,4,1,16387,1,37,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,9,18,66048,0,10,4,1,16387,1,6,6,1,16387,1,36,5,1,16387,1,9,4,1,16387,1,6,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,56,4,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,5,1,16384,0,6,1,21,8192,0,51,4,1,16384,1,2,4,1,16384,0,5,1,21,8192,0,2,1,21,8192,2,4,44,3,65536,0,50,13,19,131072,0,36,1,21,8192,1,10,3,15,131584,0,5,12,8,131584,0,14,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,30,3,65539,0,41,4,2,16387,0,16,4,2,16387,1,13,4,1,16387,1,12,4,1,16387,4,87,9,19,131072,1,2,2,21,8192,1,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,2,8,2,1,16384,0,3,1,21,8192,0,2,13,14,256,2,10,2,1,16384,5,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,2,8,2,1,16384,0,3,1,21,8192,0,2,13,14,256,2,10,2,1,16384,1,12,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,8,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,12,2,1,16384,6,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,2,12,3,1,16387,0,36,4,19,131072,1,8,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,10,2,1,16384,2,14,3,1,16387,0,33,4,19,131072,1,10,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,12,2,1,16384,7,0,4,23,16385,1,2,34,3,65536,9,0,10,19,131072,0,21,22,3,65539,0,33,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,36,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,3,10,3,15,131584,0,5,12,8,131584,0,14,2,1,16387,1,4,19,19,131072,0,20,15,19,131072,2,2,9,1,16384,0,10,1,21,8192,0,2,16,19,131072,0,28,1,22,0,0,9,1,22,0,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,25,3,65539,0,36,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,37,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,36,5,1,16387,1,9,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,2,77,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,5,1,16384,0,6,1,21,8192,0,51,4,1,16384,1,2,4,1,16384,0,5,1,21,8192,0,2,1,21,8192,1,2,31,3,65536,0,53,1,21,8192,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,30,3,65539,0,41,4,2,16387,0,17,5,2,16387,0,18,14,19,131072,1,12,9,1,16387,1,25,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,2,14,18,19,131072,0,19,15,19,131072,0,25,57,19,131072,0,59,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,30,3,65539,0,41,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,6,4,1,16387,0,7,11,19,131072,1,25,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,2,4,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,3,1,16387,0,7,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,4,1,16384,0,5,1,21,8192,0,2,4,15,131072,0,6,5,3,131072,0,19,1,21,0,0,1,3,1,16384,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,3,1,16384,1,6,19,19,131072,0,20,15,19,131072,2,4,4,1,16384,0,5,1,21,8192,0,2,3,1,16384,3,14,18,19,131072,0,19,15,19,131072,0,25,57,19,131072,0,59,16,19,131072,1,6,13,19,131072,0,14,4,1,16384,0,7,6,21,0,2,0,4,23,16385,1,6,13,19,131072,0,14,4,1,16384,0,7,6,21,0,1,9,4,19,131072,4,0,10,19,131072,0,21,24,3,65539,0,35,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,7,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,23,3,65539,0,34,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,35,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,23,3,65539,0,34,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,75,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,1,9,15,19,131072,0,37,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,6,1,21,0,0,1,5,1,16384,1,4,19,19,131072,0,20,15,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,1,3,4,1,16384,0,7,4,14,33024,0,5,1,21,8192,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,24,3,65539,0,35,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,34,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,1,2,6,1,16384,0,7,1,21,8192,0,3,4,1,16384,0,7,5,14,33024,1,14,18,19,131072,1,39,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,22,3,65539,0,33,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,34,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,1,2,6,1,16384,0,7,1,21,8192,0,3,4,1,16384,0,7,3,14,33024,1,14,18,19,131072,1,39,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,25,3,65539,0,36,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,42,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,1,2,6,1,16384,0,7,1,21,8192,0,3,4,1,16384,0,7,6,14,33024,1,14,18,19,131072,1,39,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,23,3,65539,0,34,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,42,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,1,2,6,1,16384,0,7,1,21,8192,0,3,4,1,16384,0,7,4,14,33024,1,14,18,19,131072,1,39,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,24,3,65539,0,35,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,1,3,4,1,16384,0,7,5,14,33024,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,32,3,65539,0,43,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,2,16,8,131072,0,16,1,22,0,0,2,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,2,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,14,18,19,131072,0,72,35,19,131072,0,37,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,30,3,65539,0,41,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,35,4,1,16387,1,2,6,18,66048,0,7,4,1,16387,1,6,6,1,16387,1,25,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,50,4,1,16384,2,14,18,19,131072,0,19,15,19,131072,0,25,57,19,131072,0,59,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,27,3,65539,0,38,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,1,3,4,1,16384,0,7,8,14,33024,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,33,3,65539,0,44,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,35,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,6,18,66048,0,7,4,1,16387,1,6,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,50,4,1,16384,1,3,4,1,16384,0,7,6,14,33024,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,32,3,65539,0,43,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,34,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,5,1,16387,1,6,4,1,16387,1,34,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,1,9,15,19,131072,0,29,18,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,0,6,2,21,0,0,3,1,21,0,0,1,5,1,16384,1,4,19,19,131072,0,20,13,19,131072,0,14,14,19,131072,2,62,6,1,16387,1,8,6,1,16384,1,6,4,1,16384,0,5,1,21,8192,0,10,11,14,33024,2,6,19,19,131072,0,20,13,19,131072,0,14,14,19,131072,3,55,13,19,131072,1,14,18,19,131072,1,39,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,32,3,65539,0,43,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,34,4,1,16387,1,34,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,5,1,16387,1,6,4,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,5,1,16387,1,6,4,1,16387,1,34,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,1,9,15,19,131072,0,29,18,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,0,6,2,21,0,0,3,1,21,0,0,1,5,1,16384,1,4,19,19,131072,0,20,13,19,131072,0,14,14,19,131072,2,62,6,1,16387,1,8,6,1,16384,1,6,4,1,16384,0,5,1,21,8192,0,10,11,14,33024,2,6,19,19,131072,0,20,13,19,131072,0,14,14,19,131072,3,9,15,19,131072,0,29,18,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,0,6,2,21,0,0,3,1,21,0,0,1,5,1,16384,1,4,19,19,131072,0,20,13,19,131072,0,14,14,19,131072,2,62,6,1,16387,1,8,6,1,16384,1,6,4,1,16384,0,5,1,21,8192,0,10,11,14,33024,2,6,19,19,131072,0,20,13,19,131072,0,14,14,19,131072,3,55,13,19,131072,0,20,13,19,131072,1,14,18,19,131072,1,39,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,24,3,65539,0,35,4,2,16387,0,16,4,2,16387,1,13,4,1,16387,1,12,4,1,16387,4,81,9,19,131072,1,2,2,21,8192,1,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,1,6,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,1,10,3,1,16387,0,6,15,19,131072,0,25,18,19,131072,1,6,2,1,16384,0,3,1,21,0,0,3,9,19,131072,0,10,3,1,16384,0,5,2,21,0,0,3,4,1,16384,0,5,2,21,0,0,77,4,1,16384,0,6,2,21,0,1,10,2,1,16384,5,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,1,6,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,1,10,3,1,16387,0,6,15,19,131072,0,25,18,19,131072,1,6,2,1,16384,0,3,1,21,0,0,3,9,19,131072,0,10,3,1,16384,0,5,2,21,0,0,3,4,1,16384,0,5,2,21,0,0,77,4,1,16384,0,6,2,21,0,1,10,2,1,16384,1,8,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,1,12,3,1,16387,0,6,15,19,131072,0,25,18,19,131072,1,8,2,1,16384,0,3,1,21,0,0,3,9,19,131072,0,10,3,1,16384,0,5,2,21,0,0,3,4,1,16384,0,5,2,21,0,0,77,4,1,16384,0,6,2,21,0,1,12,2,1,16384,7,0,4,23,16385,1,2,34,3,65536,8,0,10,19,131072,0,21,30,3,65539,0,41,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,35,4,1,16387,1,37,4,1,16387,1,2,6,18,66048,0,7,4,1,16387,1,6,6,1,16387,1,36,5,1,16387,1,9,4,1,16387,1,6,6,1,16387,1,25,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,50,4,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,5,1,16384,0,6,1,21,8192,0,51,4,1,16384,1,2,4,1,16384,0,5,1,21,8192,0,2,1,21,8192,2,14,18,19,131072,0,19,15,19,131072,0,25,57,19,131072,0,59,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,22,3,65539,0,33,4,2,16387,0,16,4,2,16387,1,13,4,1,16387,1,12,4,1,16387,4,79,9,19,131072,1,2,2,21,8192,1,6,4,1,16384,0,5,2,21,8192,3,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,2,10,3,1,16387,0,33,4,19,131072,1,6,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,8,2,1,16384,4,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,4,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,2,10,3,1,16387,0,33,4,19,131072,1,6,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,8,2,1,16384,2,12,3,1,16387,0,33,4,19,131072,1,8,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,10,2,1,16384,6,0,4,23,16385,1,2,34,3,65536,10,0,10,19,131072,0,21,28,3,65539,0,39,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,37,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,36,5,1,16387,1,9,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,2,80,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,5,1,16384,0,6,1,21,8192,0,51,4,1,16384,1,2,4,1,16384,0,5,1,21,8192,0,2,1,21,8192,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,24,3,65539,0,35,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,37,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,2,9,1,16384,0,10,1,21,8192,0,2,16,19,131072,0,28,1,22,0,0,9,1,22,0,0,2,1,21,8192,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,23,3,65539,0,34,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,37,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,2,9,1,16384,0,10,1,21,8192,0,2,16,19,131072,0,28,1,22,0,0,9,1,22,0,0,2,1,21,8192,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,25,3,65539,0,36,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,35,4,1,16387,1,37,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,6,18,66048,0,7,4,1,16387,1,6,6,1,16387,1,36,5,1,16387,1,9,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,2,77,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,50,4,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,5,1,16384,0,6,1,21,8192,0,51,4,1,16384,1,2,4,1,16384,0,5,1,21,8192,0,2,1,21,8192,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,33,3,65539,0,44,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,35,4,1,16387,1,37,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,6,18,66048,0,7,4,1,16387,1,6,6,1,16387,1,36,5,1,16387,1,9,4,1,16387,1,6,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,50,4,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,5,1,16384,0,6,1,21,8192,0,51,4,1,16384,1,2,4,1,16384,0,5,1,21,8192,0,2,1,21,8192,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,25,3,65539,0,36,4,2,16387,0,16,4,2,16387,1,13,4,1,16387,1,12,4,1,16387,4,82,9,19,131072,1,2,2,21,8192,1,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,2,12,3,1,16387,0,33,4,19,131072,1,8,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,10,2,1,16384,5,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,2,12,3,1,16387,0,33,4,19,131072,1,8,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,10,2,1,16384,2,14,3,1,16387,0,33,4,19,131072,1,10,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,12,2,1,16384,7,0,4,23,16385,1,2,34,3,65536,8,0,10,19,131072,0,21,33,3,65539,0,44,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,34,4,1,16387,1,37,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,5,1,16387,1,6,4,1,16387,1,36,5,1,16387,1,9,4,1,16387,1,6,6,1,16387,1,34,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,1,9,15,19,131072,0,29,18,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,0,6,2,21,0,0,3,1,21,0,0,1,5,1,16384,1,4,19,19,131072,0,20,13,19,131072,0,14,14,19,131072,2,62,6,1,16387,1,8,6,1,16384,1,6,4,1,16384,0,5,1,21,8192,0,10,11,14,33024,2,6,19,19,131072,0,20,13,19,131072,0,14,14,19,131072,4,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,5,1,16384,0,6,1,21,8192,0,51,4,1,16384,1,2,4,1,16384,0,5,1,21,8192,0,2,1,21,8192,1,56,13,19,131072,1,14,18,19,131072,1,39,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,33,3,65539,0,44,4,2,16387,0,17,5,2,16387,0,18,8,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,34,4,1,16387,1,35,4,1,16387,1,37,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,4,15,131072,0,6,14,8,131136,0,16,5,1,16387,1,6,4,1,16387,1,2,6,18,66048,0,7,4,1,16387,1,6,6,1,16387,1,36,5,1,16387,1,9,4,1,16387,1,6,6,1,16387,2,13,1,21,8192,0,5,2,21,8192,0,4,5,2,16384,0,6,1,21,8192,0,6,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,1,9,15,19,131072,0,29,18,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,0,6,2,21,0,0,3,1,21,0,0,1,5,1,16384,1,4,19,19,131072,0,20,13,19,131072,0,14,14,19,131072,2,62,6,1,16387,1,8,6,1,16384,1,6,4,1,16384,0,5,1,21,8192,0,10,11,14,33024,2,6,19,19,131072,0,20,13,19,131072,0,14,14,19,131072,4,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,50,4,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,5,1,16384,0,6,1,21,8192,0,51,4,1,16384,1,2,4,1,16384,0,5,1,21,8192,0,2,1,21,8192,1,2,39,3,65536,0,45,13,19,131072,0,20,13,19,131072,0,36,1,21,8192,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,25,3,65539,0,36,4,2,16387,0,16,4,2,16387,1,13,4,1,16387,1,12,4,1,16387,4,82,9,19,131072,1,2,2,21,8192,1,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,1,6,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,1,10,3,1,16387,0,6,15,19,131072,0,25,18,19,131072,1,6,2,1,16384,0,3,1,21,0,0,3,9,19,131072,0,10,3,1,16384,0,5,2,21,0,0,3,4,1,16384,0,5,2,21,0,0,77,4,1,16384,0,6,2,21,0,1,10,2,1,16384,2,14,3,1,16387,0,33,4,19,131072,1,10,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,12,2,1,16384,6,6,4,1,16384,0,5,2,21,8192,1,8,2,1,16387,1,8,3,1,16387,0,6,4,15,131072,0,6,5,3,131072,0,16,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,1,8,2,1,16384,1,6,4,15,131072,0,6,14,8,131136,0,16,4,1,16387,1,10,3,1,16387,0,6,15,19,131072,0,25,18,19,131072,1,6,2,1,16384,0,3,1,21,0,0,3,9,19,131072,0,10,3,1,16384,0,5,2,21,0,0,3,4,1,16384,0,5,2,21,0,0,77,4,1,16384,0,6,2,21,0,1,10,2,1,16384,2,14,3,1,16387,0,33,4,19,131072,1,10,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,12,2,1,16384,2,16,3,1,16387,0,33,4,19,131072,1,12,2,1,16384,0,3,1,21,0,0,2,15,19,131072,0,16,3,1,16384,2,14,2,1,16384,8,0,4,23,16385,1,2,34,3,65536,8,0,10,19,131072,0,21,26,3,65539,0,37,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,35,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,2,6,18,66048,0,7,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,2,78,9,19,131072,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,50,4,1,16384,1,3,4,1,16384,0,7,7,14,33024,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,27,3,65539,0,38,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,35,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,4,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,25,3,65539,0,36,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,25,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,57,19,131072,0,59,19,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,46,5,1,16384,1,2,6,21,0,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,25,3,65539,0,36,14,19,131072,0,32,4,2,16387,1,12,3,1,16387,1,73,4,19,131072,1,25,57,19,131072,0,59,18,19,131072,4,0,10,19,131072,0,21,21,3,65539,0,32,14,19,131072,0,32,4,2,16387,4,0,10,19,131072,0,21,40,3,65539,0,51,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,71,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,92,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,11,15,19,131072,0,37,59,19,131072,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,5,1,16384,1,6,19,19,131072,0,20,15,19,131072,2,77,4,1,16387,1,6,4,1,16384,0,5,1,21,8192,0,2,1,21,8192,1,10,13,19,131072,0,14,4,1,16384,0,7,6,21,0,3,6,4,1,16384,0,7,4,1,16384,0,7,4,14,33024,0,5,1,21,8192,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,40,3,65539,0,51,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,71,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,2,6,1,16384,0,7,1,21,8192,0,5,4,1,16384,0,7,4,14,33024,1,14,18,19,131072,0,103,59,19,131072,0,61,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,47,3,65539,0,58,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,71,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,99,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,11,15,19,131072,0,37,59,19,131072,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,5,1,16384,1,6,19,19,131072,0,20,15,19,131072,2,77,4,1,16387,1,6,4,1,16384,0,5,1,21,8192,0,2,1,21,8192,1,10,13,19,131072,0,14,4,1,16384,0,7,6,21,0,3,6,4,1,16384,0,7,4,1,16384,0,7,11,14,33024,0,12,1,21,8192,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,47,3,65539,0,58,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,71,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,2,6,1,16384,0,7,1,21,8192,0,5,4,1,16384,0,7,11,14,33024,1,14,18,19,131072,0,103,59,19,131072,0,61,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,50,3,65539,0,61,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,71,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,102,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,11,15,19,131072,0,37,59,19,131072,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,5,1,16384,1,6,19,19,131072,0,20,15,19,131072,2,77,4,1,16387,1,6,4,1,16384,0,5,1,21,8192,0,2,1,21,8192,1,10,13,19,131072,0,14,4,1,16384,0,7,6,21,0,3,6,4,1,16384,0,7,4,1,16384,0,7,14,14,33024,0,15,1,21,8192,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,50,3,65539,0,61,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,71,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,2,6,1,16384,0,7,1,21,8192,0,5,4,1,16384,0,7,14,14,33024,1,14,18,19,131072,0,103,59,19,131072,0,61,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,51,3,65539,0,62,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,71,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,103,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,11,15,19,131072,0,37,59,19,131072,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,5,1,16384,1,6,19,19,131072,0,20,15,19,131072,2,77,4,1,16387,1,6,4,1,16384,0,5,1,21,8192,0,2,1,21,8192,1,10,13,19,131072,0,14,4,1,16384,0,7,6,21,0,3,6,4,1,16384,0,7,4,1,16384,0,7,15,14,33024,0,16,1,21,8192,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,51,3,65539,0,62,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,71,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,2,6,1,16384,0,7,1,21,8192,0,5,4,1,16384,0,7,15,14,33024,1,14,18,19,131072,0,103,59,19,131072,0,61,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,41,3,65539,0,52,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,2,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,93,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,9,15,19,131072,0,36,145,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,6,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,41,3,65539,0,52,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,3,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,14,18,19,131072,0,19,15,19,131072,0,25,145,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,46,3,65539,0,57,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,2,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,98,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,9,15,19,131072,0,36,145,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,6,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,46,3,65539,0,57,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,3,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,14,18,19,131072,0,19,15,19,131072,0,25,145,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,46,3,65539,0,57,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,2,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,98,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,9,15,19,131072,0,36,145,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,6,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,46,3,65539,0,57,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,3,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,14,18,19,131072,0,19,15,19,131072,0,25,145,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,42,3,65539,0,53,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,2,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,94,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,9,15,19,131072,0,36,145,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,6,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,42,3,65539,0,53,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,3,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,14,18,19,131072,0,19,15,19,131072,0,25,145,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,45,3,65539,0,56,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,4,1,16387,0,8,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,97,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,4,1,22,0,0,2,5,1,16384,1,6,4,1,16384,0,7,4,1,16384,0,7,9,14,33024,0,10,1,21,8192,0,2,1,21,0,0,1,4,1,16384,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,45,3,65539,0,56,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,2,6,1,16384,0,7,1,21,0,0,3,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,4,1,21,8192,0,4,4,1,16384,0,7,9,14,33024,1,14,18,19,131072,0,19,15,19,131072,0,25,57,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,51,3,65539,0,62,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,4,1,16387,0,8,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,103,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,9,15,19,131072,0,36,57,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,18,1,22,0,0,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,4,1,22,0,0,2,5,1,16384,1,6,4,1,16384,0,7,4,1,16384,0,7,15,14,33024,0,16,1,21,8192,0,2,1,21,0,0,1,4,1,16384,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,51,3,65539,0,62,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,2,6,1,16384,0,7,1,21,0,0,3,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,4,1,21,8192,0,4,4,1,16384,0,7,15,14,33024,1,14,18,19,131072,0,19,15,19,131072,0,25,57,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,49,3,65539,0,60,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,9,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,9,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,2,101,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,13,1,22,0,0,9,1,22,0,0,2,4,1,16384,1,6,4,1,16384,0,7,4,1,16384,0,7,13,14,33024,0,14,1,21,8192,0,2,4,1,16384,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,49,3,65539,0,60,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,9,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,2,6,1,16384,0,7,1,21,0,0,13,4,1,16384,0,7,13,14,33024,1,2,9,1,16384,0,10,1,21,8192,0,2,16,19,131072,0,28,1,22,0,0,9,1,22,0,0,2,6,1,16384,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,50,3,65539,0,61,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,9,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,9,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,2,102,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,13,1,22,0,0,9,1,22,0,0,2,4,1,16384,1,6,4,1,16384,0,7,4,1,16384,0,7,14,14,33024,0,15,1,21,8192,0,2,4,1,16384,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,50,3,65539,0,61,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,9,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,2,6,1,16384,0,7,1,21,0,0,13,4,1,16384,0,7,14,14,33024,1,2,9,1,16384,0,10,1,21,8192,0,2,16,19,131072,0,28,1,22,0,0,9,1,22,0,0,2,6,1,16384,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,46,3,65539,0,57,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,2,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,98,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,11,15,19,131072,0,37,66,19,131072,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,5,1,16384,1,6,19,19,131072,0,20,15,19,131072,4,10,13,19,131072,6,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,46,3,65539,0,57,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,3,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,14,18,19,131072,0,90,66,19,131072,0,68,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,45,3,65539,0,56,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,2,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,97,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,11,15,19,131072,0,37,87,19,131072,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,5,1,16384,1,6,19,19,131072,0,20,15,19,131072,4,10,13,19,131072,6,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,45,3,65539,0,56,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,3,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,14,18,19,131072,0,111,87,19,131072,0,89,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,59,3,65539,0,70,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,2,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,111,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,11,15,19,131072,0,37,176,19,131072,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,5,1,16384,1,6,19,19,131072,0,20,15,19,131072,4,10,13,19,131072,6,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,59,3,65539,0,70,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,3,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,14,18,19,131072,0,200,176,19,131072,0,178,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,57,3,65539,0,68,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,2,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,109,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,11,15,19,131072,0,37,174,19,131072,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,5,1,16384,1,6,19,19,131072,0,20,15,19,131072,4,10,13,19,131072,6,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,57,3,65539,0,68,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,3,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,14,18,19,131072,0,198,174,19,131072,0,176,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,54,3,65539,0,65,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,2,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,106,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,11,15,19,131072,0,37,252,19,131072,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,5,1,16384,1,6,19,19,131072,0,20,15,19,131072,4,10,13,19,131072,6,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,54,3,65539,0,65,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,3,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,14,18,19,131072,0,276,252,19,131072,0,254,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,54,3,65539,0,65,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,2,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,106,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,11,15,19,131072,0,37,83,19,131072,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,5,1,16384,1,6,19,19,131072,0,20,15,19,131072,4,10,13,19,131072,6,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,54,3,65539,0,65,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,3,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,14,18,19,131072,0,107,83,19,131072,0,85,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,50,3,65539,0,61,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,2,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,102,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,11,15,19,131072,0,37,177,19,131072,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,5,1,16384,1,6,19,19,131072,0,20,15,19,131072,4,10,13,19,131072,6,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,50,3,65539,0,61,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,3,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,14,18,19,131072,0,201,177,19,131072,0,179,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,42,3,65539,0,53,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,2,8,5,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,94,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,11,15,19,131072,0,37,48,19,131072,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,5,1,16384,1,6,19,19,131072,0,20,15,19,131072,4,10,13,19,131072,6,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,42,3,65539,0,53,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,3,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,14,18,19,131072,0,72,48,19,131072,0,50,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,45,3,65539,0,56,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,6,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,2,6,1,16384,0,7,1,21,0,0,8,4,1,16384,0,7,13,14,33024,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,43,3,65539,0,54,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,1,6,6,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,2,6,1,16384,0,7,1,21,0,0,8,4,1,16384,0,7,11,14,33024,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,39,3,65539,0,50,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,6,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,1,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,2,6,1,16387,2,91,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,13,1,22,0,0,6,1,22,0,0,2,4,1,16384,1,2,6,1,16384,0,7,1,21,8192,0,3,4,1,16384,0,7,7,14,33024,0,8,4,1,16384,1,2,9,1,16384,0,10,1,21,8192,0,2,4,15,131072,0,6,4,3,131072,0,16,1,22,0,0,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,2,1,22,0,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,43,3,65539,0,54,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,6,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,1,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,2,6,1,16387,2,95,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,13,1,22,0,0,6,1,22,0,0,2,4,1,16384,1,2,6,1,16384,0,7,1,21,8192,0,3,4,1,16384,0,7,11,14,33024,0,12,4,1,16384,1,2,9,1,16384,0,10,1,21,8192,0,2,4,15,131072,0,6,4,3,131072,0,16,1,22,0,0,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,2,1,22,0,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,43,3,65539,0,54,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,6,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,1,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,2,6,1,16387,2,95,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,13,1,22,0,0,6,1,22,0,0,2,4,1,16384,1,2,6,1,16384,0,7,1,21,8192,0,3,4,1,16384,0,7,11,14,33024,0,12,4,1,16384,1,2,9,1,16384,0,10,1,21,8192,0,2,4,15,131072,0,6,4,3,131072,0,16,1,22,0,0,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,2,1,22,0,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,40,3,65539,0,51,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,6,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,6,4,1,16387,1,6,6,1,16387,1,12,8,1,16387,1,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,2,6,1,16387,2,92,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,6,1,21,0,0,1,9,19,131072,0,10,6,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,0,0,13,1,22,0,0,6,1,22,0,0,2,4,1,16384,1,2,6,1,16384,0,7,1,21,8192,0,3,4,1,16384,0,7,8,14,33024,0,9,4,1,16384,1,2,9,1,16384,0,10,1,21,8192,0,2,4,15,131072,0,6,4,3,131072,0,16,1,22,0,0,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,2,1,22,0,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,42,3,65539,0,53,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,2,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,6,4,1,16387,0,7,11,19,131072,1,12,8,1,16387,2,94,9,19,131072,1,9,15,19,131072,0,36,69,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,2,4,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,0,3,3,1,16387,0,7,3,15,131584,0,5,6,8,131584,0,6,1,22,0,0,9,3,15,131584,0,5,9,8,131584,0,9,1,22,0,0,9,1,22,0,0,2,1,22,0,1,4,4,1,16384,0,5,1,21,8192,0,2,4,15,131072,0,6,5,3,131072,0,19,1,21,0,0,1,3,1,16384,1,8,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,6,19,19,131072,0,20,13,19,131072,2,8,1,21,0,0,1,3,1,16384,1,6,19,19,131072,0,20,15,19,131072,2,4,4,1,16384,0,5,1,21,0,0,2,3,1,16384,2,10,25,19,131072,2,6,13,19,131072,0,14,4,1,16384,0,7,6,21,0,0,7,4,1,16384,2,0,4,23,16385,1,6,13,19,131072,0,14,4,1,16384,0,7,6,21,0,0,7,4,1,16384,1,9,4,19,131072,4,0,10,19,131072,0,21,35,3,65539,0,46,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,6,1,16387,2,80,9,19,131072,2,14,18,19,131072,0,19,15,19,131072,0,25,69,19,131072,0,71,16,19,131072,2,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,38,3,65539,0,49,4,2,16387,0,16,4,2,16387,1,12,9,1,16387,1,62,4,1,16387,1,8,5,1,16387,1,6,4,1,16387,1,12,8,1,16387,2,6,1,21,8192,0,7,9,19,131072,1,2,8,1,16384,0,12,1,21,8192,1,9,15,19,131072,0,36,69,19,131072,0,71,19,19,131072,1,6,1,21,0,0,1,9,19,131072,0,10,4,1,16384,1,4,19,19,131072,0,20,13,19,131072,2,2,4,1,16384,0,5,1,21,8192,0,83,5,1,16384,1,2,6,21,0,3,0,4,23,16385,1,9,4,19,131072,4,0,10,19,131072,0,21,38,3,65539,0,49,14,19,131072,0,32,4,2,16387,1,12,3,1,16387,1,73,4,19,131072,1,25,69,19,131072,0,71,18,19,131072,4,0,10,19,131072,0,21,34,3,65539,0,45,14,19,131072,0,32,4,2,16387,4,19,11,0,65539,1,66,4,19,131072,1,64,4,19,131072,1,68,4,19,131072,1,68,4,19,131072,1,76,4,19,131072,1,70,4,19,131072,1,62,4,19,131072,1,62,4,19,131072,1,70,4,19,131072,1,70,4,19,131072,1,74,4,19,131072,1,72,4,19,131072,1,72,4,19,131072,1,76,4,19,131072,1,76,4,19,131072,1,74,4,19,131072,1,74,4,19,131072,1,72,4,19,131072,1,66,4,19,131072,1,72,4,19,131072,1,66,4,19,131072,1,64,4,19,131072,1,80,4,19,131072,1,80,4,19,131072,1,80,4,19,131072,1,78,4,19,131072,1,78,4,19,131072,1,78,4,19,131072,1,56,4,19,131072,1,68,4,19,131072,1,60,4,19,131072,1,58,4,19,131072,1,64,4,19,131072,1,60,4,19,131072,1,56,4,19,131072,1,62,4,19,131072,1,58,4,19,131072,1,60,4,19,131072,1,76,4,19,131072,1,66,4,19,131072,1,66,4,19,131072,1,62,4,19,131072,1,74,4,19,131072,1,60,4,19,131072,1,58,4,19,131072,1,68,4,19,131072,1,68,4,19,131072,1,68,4,19,131072,1,70,4,19,131072,1,66,4,19,131072,1,62,4,19,131072,1,68,4,19,131072,1,66,4,19,131072,1,98,4,19,131072,1,92,4,19,131072,1,112,4,19,131072,1,106,4,19,131072,1,118,4,19,131072,1,112,4,19,131072,1,120,4,19,131072,1,114,4,19,131072,1,100,4,19,131072,1,94,4,19,131072,1,110,4,19,131072,1,104,4,19,131072,1,110,4,19,131072,1,104,4,19,131072,1,102,4,19,131072,1,96,4,19,131072,1,108,4,19,131072,1,102,4,19,131072,1,120,4,19,131072,1,114,4,19,131072,1,116,4,19,131072,1,110,4,19,131072,1,118,4,19,131072,1,112,4,19,131072,1,110,4,19,131072,1,104,4,19,131072,1,108,4,19,131072,1,102,4,19,131072,1,136,4,19,131072,1,130,4,19,131072,1,132,4,19,131072,1,126,4,19,131072,1,126,4,19,131072,1,120,4,19,131072,1,126,4,19,131072,1,120,4,19,131072,1,118,4,19,131072,1,112,4,19,131072,1,102,4,19,131072,1,96,4,19,131072,1,102,4,19,131072,1,98,4,19,131072,1,96,4,19,131072,1,104,4,19,131072,1,104,4,19,131072,1,98,4,19,131072,1,102,4,19,131072,1,87,4,19,131072,1,88,4,19,131072,1,94,4,19,131072,1,92,4,19,131072,1,4,4,19,131072,0,6,4,19,131072,0,9,4,19,131072,6,7,14,8,65536,0,15,86,0,65539,1,7,14,8,65536,0,15,18,0,65539,1,7,14,8,65536,0,15,176,0,65539,1,7,14,8,65536,0,15,47,0,65539,1,7,14,8,65536,0,15,58,0,65539,1,7,14,8,65536,0,15,82,0,65539,1,7,14,8,65536,0,15,251,0,65539,1,7,14,8,65536,0,15,65,0,65539,1,7,14,8,65536,0,15,68,0,65539,1,7,14,8,65536,0,15,175,0,65539,1,7,14,8,65536,0,15,173,0,65539,1,7,14,8,65536,0,15,24,0,65539,1,7,14,8,65536,0,15,14,0,65539,1,7,14,8,65536,0,15,25,0,65539,1,7,14,8,65536,0,15,20,0,65539,1,7,14,8,65536,0,15,19,0,65539,1,7,14,8,65536,0,15,34,0,65539,1,7,14,8,65536,0,15,31,0,65539,1,7,14,8,65536,0,15,144,0,65539,1,7,14,8,65536,0,15,56,0,65539,1,7,14,8,65536,0,15,30,0,65539,1,7,14,8,65536,0,15,20,0,65539,2,7,14,8,65536,0,16,17,0,65539,1,2,1,21,0,0,1,86,0,65536,1,2,1,21,0,0,1,18,0,65536,1,2,1,21,0,0,1,176,0,65536,1,2,1,21,0,0,1,47,0,65536,1,2,1,21,0,0,1,58,0,65536,1,2,1,21,0,0,1,82,0,65536,1,2,1,21,0,0,1,251,0,65536,1,2,1,21,0,0,1,65,0,65536,1,2,1,21,0,0,1,68,0,65536,1,2,1,21,0,0,1,175,0,65536,1,2,1,21,0,0,1,173,0,65536,1,2,1,21,0,0,1,24,0,65536,1,2,1,21,0,0,1,14,0,65536,1,2,1,21,0,0,1,25,0,65536,1,2,1,21,0,0,1,20,0,65536,1,2,1,21,0,0,1,19,0,65536,1,2,1,21,0,0,1,34,0,65536,1,2,1,21,0,0,1,31,0,65536,1,2,1,21,0,0,1,144,0,65536,1,2,1,21,0,0,1,56,0,65536,1,2,1,21,0,0,1,30,0,65536,1,2,1,21,0,0,1,20,0,65536,3,7,14,8,65536,0,15,86,0,65539,0,95,1,21,0,0,1,86,0,65536,1,7,14,8,65536,0,15,18,0,65539,0,27,1,21,0,0,1,18,0,65536,1,7,14,8,65536,0,15,176,0,65539,0,185,1,21,0,0,1,176,0,65536,1,7,14,8,65536,0,15,47,0,65539,0,56,1,21,0,0,1,47,0,65536,1,7,14,8,65536,0,15,58,0,65539,0,67,1,21,0,0,1,58,0,65536,1,7,14,8,65536,0,15,82,0,65539,0,91,1,21,0,0,1,82,0,65536,1,7,14,8,65536,0,15,251,0,65539,0,260,1,21,0,0,1,251,0,65536,1,7,14,8,65536,0,15,65,0,65539,0,74,1,21,0,0,1,65,0,65536,1,7,14,8,65536,0,15,68,0,65539,0,77,1,21,0,0,1,68,0,65536,1,7,14,8,65536,0,15,175,0,65539,0,184,1,21,0,0,1,175,0,65536,1,7,14,8,65536,0,15,173,0,65539,0,182,1,21,0,0,1,173,0,65536,1,7,14,8,65536,0,15,24,0,65539,0,33,1,21,0,0,1,24,0,65536,1,7,14,8,65536,0,15,14,0,65539,0,23,1,21,0,0,1,14,0,65536,1,7,14,8,65536,0,15,25,0,65539,0,34,1,21,0,0,1,25,0,65536,1,7,14,8,65536,0,15,20,0,65539,0,29,1,21,0,0,1,20,0,65536,1,7,14,8,65536,0,15,19,0,65539,0,28,1,21,0,0,1,19,0,65536,1,7,14,8,65536,0,15,34,0,65539,0,43,1,21,0,0,1,34,0,65536,1,7,14,8,65536,0,15,31,0,65539,0,40,1,21,0,0,1,31,0,65536,1,7,14,8,65536,0,15,144,0,65539,0,153,1,21,0,0,1,144,0,65536,1,7,14,8,65536,0,15,56,0,65539,0,65,1,21,0,0,1,56,0,65536,1,7,14,8,65536,0,15,30,0,65539,0,39,1,21,0,0,1,30,0,65536,1,7,14,8,65536,0,15,20,0,65539,0,29,1,21,0,0,1,20,0,65536,2,7,14,8,65536,0,16,17,0,65539,1,2,86,0,65536,1,2,18,0,65536,1,2,176,0,65536,1,2,47,0,65536,1,2,58,0,65536,1,2,82,0,65536,1,2,251,0,65536,1,2,65,0,65536,1,2,68,0,65536,1,2,175,0,65536,1,2,173,0,65536,1,2,24,0,65536,1,2,14,0,65536,1,2,25,0,65536,1,2,20,0,65536,1,2,19,0,65536,1,2,34,0,65536,1,2,31,0,65536,1,2,144,0,65536,1,2,56,0,65536,1,2,30,0,65536,1,2,20,0,65536,6,7,15,8,65536,0,16,16,0,65539,3,7,11,19,131072,44,7,11,19,131072,11,8,26,19,131072,1,8,26,19,131073,3,0,11,19,131072,1,0,21,3,65539,0,22,26,19,131072,0,27,10,2,16387,1,2,6,18,66048,0,7,1,1,16387,1,2,16,8,65536,0,18,11,1,16387,0,14,4,1,16387,1,6,4,1,16387,3,6,11,0,65536,0,12,4,6,32768,0,4,2,21,0,2,4,11,0,65536,0,12,12,6,32768,0,13,1,21,0,0,2,17,0,65536,1,4,11,0,65536,0,12,12,6,32768,0,13,1,21,0,0,2,17,0,65536,1,4,11,0,65536,0,12,4,6,32768,0,5,1,21,0,0,2,1,21,0,0,1,11,0,65536,1,4,4,1,16384,0,5,1,21,0,2,4,4,1,16384,0,5,1,21,0,4,2,11,1,16384,0,12,1,21,0,0,2,14,19,131072,0,15,10,2,18432,1,6,1,21,0,0,1,11,1,16384,3,4,14,19,131072,0,27,1,21,0,0,1,11,0,67584,3,4,4,1,16384,0,4,1,21,0,0,1,11,1,16384,2,10,4,1,16384,0,4,2,21,0,0,2,1,21,0,0,1,11,0,65536,4,6,4,1,16384,0,4,1,21,0,0,1,4,1,16384,0,6,4,6,32768,1,13,4,1,16384,0,4,2,21,0,0,3,11,1,16384,3,4,11,0,65536,0,12,4,6,32768,0,5,1,21,0,0,2,11,1,16384,0,13,4,6,32768,1,4,11,1,16384,0,13,4,6,32768,0,5,1,21,0,0,2,1,21,0,0,1,11,0,65536,7,6,4,1,16384,0,5,2,21,0,3,7,17,19,131072,3,7,1,1,16384,0,2,1,21,0,0,5,1,1,16384,0,2,1,21,0,0,2,11,0,65536,0,12,4,6,32768,0,6,2,21,0,0,2,1,1,16384,1,4,14,8,65536,0,16,4,1,16387,1,4,14,8,65536,0,16,3,1,16387,1,4,14,8,65536,0,16,4,1,16387,2,7,17,19,131072,5,8,11,0,65536,0,12,4,6,32768,0,5,2,21,0,0,3,1,21,0,0,1,11,0,65536,1,6,4,1,16384,0,5,1,21,0,0,2,27,3,65536,0,28,11,0,65536,0,12,4,6,34816,0,6,1,21,0,0,1,11,0,67584,0,13,11,0,65536,0,12,12,6,32768,0,13,1,1,16384,0,4,4,6,32784,2,8,4,1,16384,2,7,17,19,131072,3,10,11,0,65536,0,12,12,6,32768,0,13,1,1,16384,0,4,10,6,32768,1,8,4,1,16384,0,6,10,6,32768,0,11,1,21,0,0,2,11,0,65536,0,12,12,6,32768,0,13,1,1,16384,0,4,10,6,32768,1,7,17,19,131072,5,6,4,1,16384,0,5,1,21,0,0,2,11,0,65536,0,12,12,6,32768,0,13,1,1,16384,4,4,4,1,16384,0,5,1,21,0,0,2,11,0,65536,0,12,12,6,32768,0,13,1,1,16384,1,11,4,1,16384,0,6,4,6,32768,2,6,3,1,16384,0,4,1,21,0,1,7,17,19,131072,3,10,11,0,65536,0,12,4,6,32768,0,5,2,21,0,0,3,1,21,0,0,1,11,0,65536,1,8,3,1,16384,0,4,1,21,0,0,2,27,3,65536,0,28,11,0,65536,0,12,4,6,34816,0,6,1,21,0,0,1,11,0,67584,0,13,4,1,16384,0,6,4,6,32768,0,6,4,6,32784,1,7,17,19,131072,4,10,3,1,16384,1,12,4,1,16384,0,5,2,21,0,0,3,11,0,65536,0,12,12,6,32768,0,13,1,1,16384,1,7,17,19,131072,3,10,4,1,16384,0,6,4,6,32768,0,5,1,21,0,0,2,3,1,16384,1,10,3,1,16384,0,4,1,21,0,3,10,14,8,65536,0,16,5,1,16387,0,8,14,3,65536,0,15,3,1,16384,0,5,4,6,32784,0,6,4,1,18432,1,7,17,19,131072,3,14,1,21,0,0,1,5,1,16384,0,7,3,1,16384,0,4,1,21,0,4,10,1,21,0,0,1,3,1,16384,1,7,17,19,131072,3,12,4,1,16384,0,6,4,6,32768,1,10,4,1,16384,0,6,4,6,32768,0,6,4,6,32768,0,5,1,21,0,0,2,4,1,16384,1,10,4,1,16384,0,6,4,6,32768,0,5,1,21,0,0,2,4,1,16384,0,6,4,6,32768,2,8,4,1,16384,0,6,4,6,32768,0,5,1,21,0,0,2,4,1,16384,2,6,4,1,16384,0,4,2,21,0,3,4,11,0,65536,0,12,5,6,32768,0,6,1,1,16384,0,3,1,21,0,0,2,4,1,16384,2,2,11,0,65536,0,12,5,6,32768,0,6,1,1,16384,0,3,1,21,0,2,7,17,19,131072,22,0,11,19,131072,1,0,24,3,65539,1,2,6,18,66048,0,7,1,1,16387,1,2,14,8,65536,0,16,5,1,16387,1,13,8,1,16419,2,6,8,1,16416,1,2,8,1,16416,0,9,1,21,0,2,7,1,1,16384,0,2,1,21,0,0,5,1,1,16384,0,2,1,21,0,0,2,11,0,65536,0,12,4,6,32768,0,6,1,1,16384,0,1,2,21,0,1,8,11,0,65536,0,12,5,6,32768,0,6,1,1,16384,0,4,10,6,32768,1,6,5,1,16384,0,6,1,21,0,0,2,11,0,65536,0,12,5,6,32768,0,6,1,1,16384,0,4,4,6,32768,1,13,5,1,16384,1,12,1,21,0,0,1,5,1,16384,0,7,9,6,32768,1,14,5,1,16384,0,7,4,6,32768,0,5,2,21,0,0,3,1,21,0,0,1,5,1,16384,0,7,4,6,32768,0,6,10,6,32768,1,10,19,3,65536,0,20,5,1,16384,0,7,4,6,34816,0,6,11,0,65536,0,12,5,6,32768,0,6,1,1,16384,0,4,10,6,34816,2,8,5,1,16384,0,6,1,21,0,0,2,5,1,16384,0,7,4,6,32768,6,7,11,19,131072,10,7,11,19,131072,9,2,10,19,131072,1,2,28,3,65539,0,39,1,2,16387,0,3,15,8,65536,0,16,9,2,16387,1,14,3,1,16387,1,4,6,18,66048,0,7,1,1,16387,1,9,1,1,16384,0,2,1,21,0,0,5,9,2,16384,0,10,1,1,16384,0,3,4,6,32768,0,6,2,21,0,0,2,1,1,16384,1,13,9,2,16384,0,10,1,1,16384,0,3,4,6,32768,1,11,15,19,131072,1,14,26,19,131072,2,11,14,19,131072,1,14,17,19,131072,3,8,3,1,16384,0,4,1,21,8192,3,10,3,1,16384,1,8,20,14,256,0,24,9,2,16384,0,10,1,1,16384,0,3,4,6,32784,1,8,9,14,256,9,2,10,19,131072,1,2,22,3,65539,0,36,7,2,16387,0,15,15,8,65536,0,17,11,2,16403,0,13,14,8,65536,0,17,5,2,16387,0,7,14,8,65536,0,17,13,2,16387,1,4,6,18,66048,0,7,1,1,16387,1,9,1,1,16384,0,2,1,21,0,0,5,7,2,16384,0,8,1,1,16384,0,3,7,14,33024,0,9,2,21,0,0,2,1,1,16384,1,18,1,1,16403,0,12,1,1,16384,0,3,6,14,33024,1,10,1,21,0,0,1,1,1,16400,1,6,1,1,16400,0,2,1,21,0,0,2,6,3,131584,0,7,1,1,16400,1,10,1,1,16400,1,12,1,1,16387,1,14,15,8,65536,0,17,2,1,16403,1,20,4,1,16403,0,7,1,1,16400,0,2,1,21,0,1,13,1,1,16384,0,2,1,21,0,0,5,11,2,16400,0,12,1,1,16384,0,3,4,6,32768,0,6,2,21,0,0,2,1,1,16384,1,14,7,3,131584,0,8,11,2,16400,0,12,1,1,16384,0,3,4,6,32784,0,6,4,1,16400,1,14,6,3,131584,0,7,11,2,16400,0,12,1,1,16384,0,3,4,6,32784,0,7,2,21,0,1,12,2,1,16400,0,3,1,21,0,0,2,1,21,0,0,2,11,2,16400,0,12,1,1,16384,4,12,2,1,16400,1,16,3,1,16387,0,7,2,1,16400,0,4,4,6,32768,0,5,2,21,0,0,3,15,19,131072,0,17,1,21,0,0,2,2,1,16400,0,4,6,6,32768,0,7,1,21,0,1,14,3,1,16384,1,12,6,18,66048,0,7,5,1,16387,0,9,2,1,16400,0,4,5,6,32768,0,7,1,21,0,0,2,5,2,16384,1,12,14,8,65536,0,16,2,1,16387,0,5,13,2,16384,0,14,5,1,16384,1,12,6,18,66048,0,7,4,1,16387,0,8,1,1,16400,0,2,1,21,8192,0,10,1,1,16384,0,3,6,14,33024,1,12,6,18,66048,0,7,4,1,16387,0,7,6,3,131584,0,7,2,1,16384,0,4,4,6,32784,0,5,1,21,0,0,2,1,21,0,0,14,1,21,0,1,18,4,1,16387,0,14,6,3,131584,0,7,4,1,16384,0,5,1,21,0,0,2,4,1,16384,0,5,1,21,0,1,16,4,1,16384,1,20,4,1,16387,0,7,4,1,16384,1,14,6,3,131584,0,7,4,1,16384,0,14,1,1,16384,0,3,6,14,33024,0,8,4,1,16384,1,14,4,1,16384,0,5,2,21,0,0,3,4,1,16384,1,14,6,3,131584,0,7,4,1,18432,1,14,4,1,16384,0,5,2,21,0,1,14,16,3,65536,0,17,4,1,18432,0,6,3,1,18432,0,5,2,1,16384,0,4,4,6,32784,0,6,4,1,16384,1,14,7,2,16384,0,8,1,1,16384,0,3,6,14,33024,0,7,1,21,8192,0,2,4,1,16384,8,7,11,19,131072,11,7,11,19,131072,4,0,10,19,131072,6,0,9,19,131072,1,12,1,1,16387,16,12,18,19,131072,43,2,9,3,65536,1,2,21,3,65536,1,2,17,3,65536,1,8,18,19,131072,1,2,17,3,65536,4,2,22,3,65536,0,36,16,0,65536,0,18,10,0,65536,0,12,17,0,65536,5,2,1,1,16384,0,2,1,21,8192,0,2,13,14,256,0,14,9,19,131072,6,2,21,3,65536,2,7,18,19,131072,38,2,21,19,131072,4,2,4,15,131072,0,6,25,3,65536],"resultId":"1"}}},{"pid":0,"ph":"X","name":"Queued:DocumentLinks","ts":57611893.101000004,"tid":6130,"dur":5.2390000000596046,"args":{"CurrentRequest":"Build AST","PreambleRequestsNames":[],"RequestsNames":["codeAction","DocumentSymbols","SemanticHighlights"]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":57611802.340000004,"tid":6130,"id":57,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":58485640.588,"tid":6237,"bp":"e","id":57,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":58485645.938000001,"tid":6237,"dur":11.170999996364117,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58485916.788999997,"tid":6237,"args":{"Message":"--> reply:textDocument/documentLink(53) 874 ms"}},{"pid":0,"ph":"X","name":"DocumentLinks","ts":58485631.751000002,"tid":6237,"dur":446.37200000137091,"args":{}},{"pid":0,"ph":"X","name":"textDocument/documentLink","ts":57611802.340000004,"tid":6130,"dur":99.346999995410442,"args":{"Params":{"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},"Reply":[{"range":{"end":{"character":19,"line":358},"start":{"character":9,"line":358}},"target":"file:///usr/include/string.h"},{"range":{"end":{"character":18,"line":3030},"start":{"character":9,"line":3030}},"target":"file:///usr/include/c%2B%2B/13/utility"},{"range":{"end":{"character":20,"line":3081},"start":{"character":9,"line":3081}},"target":"file:///usr/include/c%2B%2B/13/stdexcept"},{"range":{"end":{"character":19,"line":3160},"start":{"character":9,"line":3160}},"target":"file:///usr/include/c%2B%2B/13/typeinfo"},{"range":{"end":{"character":20,"line":3161},"start":{"character":9,"line":3161}},"target":"file:///usr/include/c%2B%2B/13/stdexcept"},{"range":{"end":{"character":17,"line":3171},"start":{"character":9,"line":3171}},"target":"file:///usr/include/c%2B%2B/13/string"},{"range":{"end":{"character":19,"line":3174},"start":{"character":9,"line":3174}},"target":"file:///home/dmitry/.config/Code/User/globalStorage/llvm-vs-code-extensions.vscode-clangd/install/17.0.3/clangd_17.0.3/lib/clang/17/include/stddef.h"},{"range":{"end":{"character":19,"line":3177},"start":{"character":9,"line":3177}},"target":"file:///usr/include/c%2B%2B/13/iostream"},{"range":{"end":{"character":18,"line":3359},"start":{"character":9,"line":3359}},"target":"file:///home/dmitry/.config/Code/User/globalStorage/llvm-vs-code-extensions.vscode-clangd/install/17.0.3/clangd_17.0.3/lib/clang/17/include/float.h"},{"range":{"end":{"character":17,"line":3362},"start":{"character":9,"line":3362}},"target":"file:///usr/include/c%2B%2B/13/math.h"},{"range":{"end":{"character":19,"line":3443},"start":{"character":9,"line":3443}},"target":"file:///home/dmitry/.config/Code/User/globalStorage/llvm-vs-code-extensions.vscode-clangd/install/17.0.3/clangd_17.0.3/lib/clang/17/include/limits.h"},{"range":{"end":{"character":20,"line":3662},"start":{"character":9,"line":3662}},"target":"file:///usr/include/c%2B%2B/13/algorithm"},{"range":{"end":{"character":17,"line":3665},"start":{"character":9,"line":3665}},"target":"file:///usr/include/c%2B%2B/13/vector"},{"range":{"end":{"character":18,"line":3668},"start":{"character":9,"line":3668}},"target":"file:///usr/include/c%2B%2B/13/utility"},{"range":{"end":{"character":14,"line":3671},"start":{"character":9,"line":3671}},"target":"file:///usr/include/c%2B%2B/13/map"},{"range":{"end":{"character":20,"line":3674},"start":{"character":9,"line":3674}},"target":"file:///usr/include/c%2B%2B/13/algorithm"},{"range":{"end":{"character":21,"line":3954},"start":{"character":9,"line":3954}},"target":"file:///usr/include/c%2B%2B/13/functional"},{"range":{"end":{"character":19,"line":4272},"start":{"character":9,"line":4272}},"target":"file:///usr/include/c%2B%2B/13/iterator"}]}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":57611975.486000001,"tid":6130,"dur":3.5869999974966049,"args":{"CurrentRequest":"Build AST","PreambleRequestsNames":[],"RequestsNames":["codeAction","DocumentSymbols","SemanticHighlights","DocumentLinks"]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":57611920.873000003,"tid":6130,"id":58,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":58486188.370999999,"tid":6237,"bp":"e","id":58,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":58486192.398000002,"tid":6237,"dur":4.1180000007152557,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58486207.306000002,"tid":6237,"args":{"Message":"--> reply:textDocument/inlayHint(54) 874 ms, error: Task was cancelled."}},{"pid":0,"ph":"X","name":"InlayHints","ts":58486180.816,"tid":6237,"dur":47.810000002384186,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":57611920.873000003,"tid":6130,"dur":61.976999998092651,"args":{"Error":"Task was cancelled.","Params":{"range":{"end":{"character":8,"line":92},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}}}},{"pid":0,"ph":"X","name":"Queued:DocumentSymbols","ts":57684529.370999999,"tid":6130,"dur":6.1209999993443489,"args":{"CurrentRequest":"Build AST","PreambleRequestsNames":[],"RequestsNames":["codeAction","DocumentSymbols","SemanticHighlights","DocumentLinks","InlayHints"]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":57684487.993000001,"tid":6130,"id":59,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":58486255.026000001,"tid":6237,"bp":"e","id":59,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":58486257.030000001,"tid":6237,"dur":2.6150000020861626,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58544087.763999999,"tid":6237,"args":{"Message":"--> reply:textDocument/documentSymbol(55) 859 ms"}},{"pid":0,"ph":"X","name":"DocumentSymbols","ts":58486251.899999999,"tid":6237,"dur":83617.127000004053,"args":{}},{"pid":0,"ph":"X","name":"textDocument/documentSymbol","ts":57684487.993000001,"tid":6130,"dur":50.304999999701977,"args":{"Params":{"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},"Reply":[{"detail":"type alias","kind":5,"name":"swig_converter_func","range":{"end":{"character":51,"line":364},"start":{"character":0,"line":364}},"selectionRange":{"end":{"character":35,"line":364},"start":{"character":16,"line":364}}},{"detail":"struct","kind":23,"name":"swig_type_info","range":{"end":{"character":29,"line":365},"start":{"character":8,"line":365}},"selectionRange":{"end":{"character":29,"line":365},"start":{"character":15,"line":365}}},{"detail":"type alias","kind":5,"name":"swig_dycast_func","range":{"end":{"character":59,"line":365},"start":{"character":0,"line":365}},"selectionRange":{"end":{"character":49,"line":365},"start":{"character":33,"line":365}}},{"children":[{"detail":"const char *","kind":8,"name":"name","range":{"end":{"character":30,"line":369},"start":{"character":2,"line":369}},"selectionRange":{"end":{"character":30,"line":369},"start":{"character":26,"line":369}}},{"detail":"const char *","kind":8,"name":"str","range":{"end":{"character":29,"line":370},"start":{"character":2,"line":370}},"selectionRange":{"end":{"character":29,"line":370},"start":{"character":26,"line":370}}},{"detail":"swig_dycast_func","kind":8,"name":"dcast","range":{"end":{"character":31,"line":371},"start":{"character":2,"line":371}},"selectionRange":{"end":{"character":31,"line":371},"start":{"character":26,"line":371}}},{"detail":"struct","kind":23,"name":"swig_cast_info","range":{"end":{"character":23,"line":372},"start":{"character":2,"line":372}},"selectionRange":{"end":{"character":23,"line":372},"start":{"character":9,"line":372}}},{"detail":"struct swig_cast_info *","kind":8,"name":"cast","range":{"end":{"character":30,"line":372},"start":{"character":2,"line":372}},"selectionRange":{"end":{"character":30,"line":372},"start":{"character":26,"line":372}}},{"detail":"void *","kind":8,"name":"clientdata","range":{"end":{"character":36,"line":373},"start":{"character":2,"line":373}},"selectionRange":{"end":{"character":36,"line":373},"start":{"character":26,"line":373}}},{"detail":"int","kind":8,"name":"owndata","range":{"end":{"character":32,"line":374},"start":{"character":2,"line":374}},"selectionRange":{"end":{"character":32,"line":374},"start":{"character":25,"line":374}}}],"detail":"struct","kind":23,"name":"swig_type_info","range":{"end":{"character":1,"line":375},"start":{"character":8,"line":368}},"selectionRange":{"end":{"character":29,"line":368},"start":{"character":15,"line":368}}},{"detail":"type alias","kind":5,"name":"swig_type_info","range":{"end":{"character":16,"line":375},"start":{"character":0,"line":368}},"selectionRange":{"end":{"character":16,"line":375},"start":{"character":2,"line":375}}},{"children":[{"detail":"swig_type_info *","kind":8,"name":"type","range":{"end":{"character":30,"line":379},"start":{"character":2,"line":379}},"selectionRange":{"end":{"character":30,"line":379},"start":{"character":26,"line":379}}},{"detail":"swig_converter_func","kind":8,"name":"converter","range":{"end":{"character":35,"line":380},"start":{"character":2,"line":380}},"selectionRange":{"end":{"character":35,"line":380},"start":{"character":26,"line":380}}},{"detail":"struct swig_cast_info *","kind":8,"name":"next","range":{"end":{"character":30,"line":381},"start":{"character":2,"line":381}},"selectionRange":{"end":{"character":30,"line":381},"start":{"character":26,"line":381}}},{"detail":"struct swig_cast_info *","kind":8,"name":"prev","range":{"end":{"character":30,"line":382},"start":{"character":2,"line":382}},"selectionRange":{"end":{"character":30,"line":382},"start":{"character":26,"line":382}}}],"detail":"struct","kind":23,"name":"swig_cast_info","range":{"end":{"character":1,"line":383},"start":{"character":8,"line":378}},"selectionRange":{"end":{"character":29,"line":378},"start":{"character":15,"line":378}}},{"detail":"type alias","kind":5,"name":"swig_cast_info","range":{"end":{"character":16,"line":383},"start":{"character":0,"line":378}},"selectionRange":{"end":{"character":16,"line":383},"start":{"character":2,"line":383}}},{"children":[{"detail":"swig_type_info **","kind":8,"name":"types","range":{"end":{"character":32,"line":389},"start":{"character":2,"line":389}},"selectionRange":{"end":{"character":32,"line":389},"start":{"character":27,"line":389}}},{"detail":"size_t","kind":8,"name":"size","range":{"end":{"character":29,"line":390},"start":{"character":2,"line":390}},"selectionRange":{"end":{"character":29,"line":390},"start":{"character":25,"line":390}}},{"detail":"struct swig_module_info *","kind":8,"name":"next","range":{"end":{"character":31,"line":391},"start":{"character":2,"line":391}},"selectionRange":{"end":{"character":31,"line":391},"start":{"character":27,"line":391}}},{"detail":"swig_type_info **","kind":8,"name":"type_initial","range":{"end":{"character":39,"line":392},"start":{"character":2,"line":392}},"selectionRange":{"end":{"character":39,"line":392},"start":{"character":27,"line":392}}},{"detail":"swig_cast_info **","kind":8,"name":"cast_initial","range":{"end":{"character":39,"line":393},"start":{"character":2,"line":393}},"selectionRange":{"end":{"character":39,"line":393},"start":{"character":27,"line":393}}},{"detail":"void *","kind":8,"name":"clientdata","range":{"end":{"character":37,"line":394},"start":{"character":2,"line":394}},"selectionRange":{"end":{"character":37,"line":394},"start":{"character":27,"line":394}}}],"detail":"struct","kind":23,"name":"swig_module_info","range":{"end":{"character":1,"line":395},"start":{"character":8,"line":388}},"selectionRange":{"end":{"character":31,"line":388},"start":{"character":15,"line":388}}},{"detail":"type alias","kind":5,"name":"swig_module_info","range":{"end":{"character":18,"line":395},"start":{"character":0,"line":388}},"selectionRange":{"end":{"character":18,"line":395},"start":{"character":2,"line":395}}},{"detail":"int (const char *, const char *, const char *, const char *)","kind":12,"name":"SWIG_TypeNameComp","range":{"end":{"character":1,"line":413},"start":{"character":0,"line":404}},"selectionRange":{"end":{"character":17,"line":405},"start":{"character":0,"line":405}}},{"detail":"int (const char *, const char *)","kind":12,"name":"SWIG_TypeCmp","range":{"end":{"character":1,"line":432},"start":{"character":0,"line":419}},"selectionRange":{"end":{"character":12,"line":420},"start":{"character":0,"line":420}}},{"detail":"int (const char *, const char *)","kind":12,"name":"SWIG_TypeEquiv","range":{"end":{"character":1,"line":441},"start":{"character":0,"line":438}},"selectionRange":{"end":{"character":14,"line":439},"start":{"character":0,"line":439}}},{"detail":"swig_cast_info *(const char *, swig_type_info *)","kind":12,"name":"SWIG_TypeCheck","range":{"end":{"character":1,"line":468},"start":{"character":0,"line":446}},"selectionRange":{"end":{"character":14,"line":447},"start":{"character":0,"line":447}}},{"detail":"swig_cast_info *(const swig_type_info *, swig_type_info *)","kind":12,"name":"SWIG_TypeCheckStruct","range":{"end":{"character":1,"line":495},"start":{"character":0,"line":473}},"selectionRange":{"end":{"character":20,"line":474},"start":{"character":0,"line":474}}},{"detail":"void *(swig_cast_info *, void *, int *)","kind":12,"name":"SWIG_TypeCast","range":{"end":{"character":1,"line":503},"start":{"character":0,"line":500}},"selectionRange":{"end":{"character":13,"line":501},"start":{"character":0,"line":501}}},{"detail":"swig_type_info *(swig_type_info *, void **)","kind":12,"name":"SWIG_TypeDynamicCast","range":{"end":{"character":1,"line":517},"start":{"character":0,"line":508}},"selectionRange":{"end":{"character":20,"line":509},"start":{"character":0,"line":509}}},{"detail":"const char *(const swig_type_info *)","kind":12,"name":"SWIG_TypeName","range":{"end":{"character":1,"line":525},"start":{"character":0,"line":522}},"selectionRange":{"end":{"character":13,"line":523},"start":{"character":0,"line":523}}},{"detail":"const char *(const swig_type_info *)","kind":12,"name":"SWIG_TypePrettyName","range":{"end":{"character":1,"line":547},"start":{"character":0,"line":531}},"selectionRange":{"end":{"character":19,"line":532},"start":{"character":0,"line":532}}},{"detail":"void (swig_type_info *, void *)","kind":12,"name":"SWIG_TypeClientData","range":{"end":{"character":1,"line":567},"start":{"character":0,"line":552}},"selectionRange":{"end":{"character":19,"line":553},"start":{"character":0,"line":553}}},{"detail":"void (swig_type_info *, void *)","kind":12,"name":"SWIG_TypeNewClientData","range":{"end":{"character":1,"line":572},"start":{"character":0,"line":568}},"selectionRange":{"end":{"character":22,"line":569},"start":{"character":0,"line":569}}},{"detail":"swig_type_info *(swig_module_info *, swig_module_info *, const char *)","kind":12,"name":"SWIG_MangledTypeQueryModule","range":{"end":{"character":1,"line":616},"start":{"character":0,"line":582}},"selectionRange":{"end":{"character":27,"line":583},"start":{"character":0,"line":583}}},{"detail":"swig_type_info *(swig_module_info *, swig_module_info *, const char *)","kind":12,"name":"SWIG_TypeQueryModule","range":{"end":{"character":1,"line":651},"start":{"character":0,"line":627}},"selectionRange":{"end":{"character":20,"line":628},"start":{"character":0,"line":628}}},{"detail":"char *(char *, void *, size_t)","kind":12,"name":"SWIG_PackData","range":{"end":{"character":1,"line":667},"start":{"character":0,"line":656}},"selectionRange":{"end":{"character":13,"line":657},"start":{"character":0,"line":657}}},{"detail":"const char *(const char *, void *, size_t)","kind":12,"name":"SWIG_UnpackData","range":{"end":{"character":1,"line":695},"start":{"character":0,"line":672}},"selectionRange":{"end":{"character":15,"line":673},"start":{"character":0,"line":673}}},{"detail":"char *(char *, void *, const char *, size_t)","kind":12,"name":"SWIG_PackVoidPtr","range":{"end":{"character":1,"line":709},"start":{"character":0,"line":700}},"selectionRange":{"end":{"character":16,"line":701},"start":{"character":0,"line":701}}},{"detail":"const char *(const char *, void **, const char *)","kind":12,"name":"SWIG_UnpackVoidPtr","range":{"end":{"character":1,"line":722},"start":{"character":0,"line":711}},"selectionRange":{"end":{"character":18,"line":712},"start":{"character":0,"line":712}}},{"detail":"char *(char *, void *, size_t, const char *, size_t)","kind":12,"name":"SWIG_PackDataName","range":{"end":{"character":1,"line":737},"start":{"character":0,"line":724}},"selectionRange":{"end":{"character":17,"line":725},"start":{"character":0,"line":725}}},{"detail":"const char *(const char *, void *, size_t, const char *)","kind":12,"name":"SWIG_UnpackDataName","range":{"end":{"character":1,"line":750},"start":{"character":0,"line":739}},"selectionRange":{"end":{"character":19,"line":740},"start":{"character":0,"line":740}}},{"detail":"char *(int *)","kind":12,"name":"SWIG_Python_str_AsChar","range":{"end":{"character":1,"line":812},"start":{"character":0,"line":804}},"selectionRange":{"end":{"character":22,"line":805},"start":{"character":0,"line":805}}},{"detail":"int *(const char *)","kind":12,"name":"SWIG_Python_str_FromChar","range":{"end":{"character":1,"line":827},"start":{"character":0,"line":819}},"selectionRange":{"end":{"character":24,"line":820},"start":{"character":0,"line":820}}},{"detail":"int *(int)","kind":12,"name":"SWIG_Python_ErrorType","range":{"end":{"character":1,"line":893},"start":{"character":0,"line":852}},"selectionRange":{"end":{"character":21,"line":853},"start":{"character":0,"line":853}}},{"detail":"void (const char *)","kind":12,"name":"SWIG_Python_AddErrorMsg","range":{"end":{"character":1,"line":919},"start":{"character":0,"line":896}},"selectionRange":{"end":{"character":23,"line":897},"start":{"character":0,"line":897}}},{"detail":"int (int *)","kind":12,"name":"SWIG_Python_TypeErrorOccurred","range":{"end":{"character":1,"line":929},"start":{"character":0,"line":921}},"selectionRange":{"end":{"character":29,"line":922},"start":{"character":0,"line":922}}},{"detail":"void (const char *)","kind":12,"name":"SWIG_Python_RaiseOrModifyTypeError","range":{"end":{"character":1,"line":954},"start":{"character":0,"line":931}},"selectionRange":{"end":{"character":34,"line":932},"start":{"character":0,"line":932}}},{"children":[{"detail":"int","kind":8,"name":"type","range":{"end":{"character":10,"line":1043},"start":{"character":2,"line":1043}},"selectionRange":{"end":{"character":10,"line":1043},"start":{"character":6,"line":1043}}},{"detail":"const char *","kind":8,"name":"name","range":{"end":{"character":18,"line":1044},"start":{"character":2,"line":1044}},"selectionRange":{"end":{"character":18,"line":1044},"start":{"character":14,"line":1044}}},{"detail":"long","kind":8,"name":"lvalue","range":{"end":{"character":13,"line":1045},"start":{"character":2,"line":1045}},"selectionRange":{"end":{"character":13,"line":1045},"start":{"character":7,"line":1045}}},{"detail":"double","kind":8,"name":"dvalue","range":{"end":{"character":15,"line":1046},"start":{"character":2,"line":1046}},"selectionRange":{"end":{"character":15,"line":1046},"start":{"character":9,"line":1046}}},{"detail":"void *","kind":8,"name":"pvalue","range":{"end":{"character":16,"line":1047},"start":{"character":2,"line":1047}},"selectionRange":{"end":{"character":16,"line":1047},"start":{"character":10,"line":1047}}},{"detail":"swig_type_info **","kind":8,"name":"ptype","range":{"end":{"character":24,"line":1048},"start":{"character":2,"line":1048}},"selectionRange":{"end":{"character":24,"line":1048},"start":{"character":19,"line":1048}}}],"detail":"struct","kind":23,"name":"swig_const_info","range":{"end":{"character":1,"line":1049},"start":{"character":8,"line":1042}},"selectionRange":{"end":{"character":30,"line":1042},"start":{"character":15,"line":1042}}},{"detail":"type alias","kind":5,"name":"swig_const_info","range":{"end":{"character":17,"line":1049},"start":{"character":0,"line":1042}},"selectionRange":{"end":{"character":17,"line":1049},"start":{"character":2,"line":1049}}},{"detail":"void (int *, int *)","kind":12,"name":"SWIG_Python_SetErrorObj","range":{"end":{"character":1,"line":1132},"start":{"character":0,"line":1126}},"selectionRange":{"end":{"character":23,"line":1127},"start":{"character":0,"line":1127}}},{"detail":"void (int *, const char *)","kind":12,"name":"SWIG_Python_SetErrorMsg","range":{"end":{"character":1,"line":1139},"start":{"character":0,"line":1134}},"selectionRange":{"end":{"character":23,"line":1135},"start":{"character":0,"line":1135}}},{"detail":"void (int *, const char *, int *)","kind":12,"name":"SWIG_Python_SetConstant","range":{"end":{"character":1,"line":1168},"start":{"character":0,"line":1164}},"selectionRange":{"end":{"character":23,"line":1165},"start":{"character":0,"line":1165}}},{"detail":"int *(int *, int *)","kind":12,"name":"SWIG_Python_AppendOutput","range":{"end":{"character":1,"line":1196},"start":{"character":0,"line":1174}},"selectionRange":{"end":{"character":24,"line":1175},"start":{"character":0,"line":1175}}},{"detail":"int (int *, const char *, int, int, int **)","kind":12,"name":"SWIG_Python_UnpackTuple","range":{"end":{"character":1,"line":1244},"start":{"character":0,"line":1200}},"selectionRange":{"end":{"character":23,"line":1201},"start":{"character":0,"line":1201}}},{"detail":"int (int *, const char *)","kind":12,"name":"SWIG_Python_CheckNoKeywords","range":{"end":{"character":1,"line":1257},"start":{"character":0,"line":1246}},"selectionRange":{"end":{"character":27,"line":1247},"start":{"character":0,"line":1247}}},{"children":[{"detail":"char *","kind":8,"name":"name","range":{"end":{"character":18,"line":1286},"start":{"character":2,"line":1286}},"selectionRange":{"end":{"character":18,"line":1286},"start":{"character":14,"line":1286}}},{"detail":"int *(*)()","kind":8,"name":"get_attr","range":{"end":{"character":29,"line":1287},"start":{"character":2,"line":1287}},"selectionRange":{"end":{"character":22,"line":1287},"start":{"character":14,"line":1287}}},{"detail":"int (*)(int *)","kind":8,"name":"set_attr","range":{"end":{"character":35,"line":1288},"start":{"character":2,"line":1288}},"selectionRange":{"end":{"character":22,"line":1288},"start":{"character":14,"line":1288}}},{"detail":"struct swig_globalvar *","kind":8,"name":"next","range":{"end":{"character":29,"line":1289},"start":{"character":2,"line":1289}},"selectionRange":{"end":{"character":29,"line":1289},"start":{"character":25,"line":1289}}}],"detail":"struct","kind":23,"name":"swig_globalvar","range":{"end":{"character":1,"line":1290},"start":{"character":8,"line":1285}},"selectionRange":{"end":{"character":29,"line":1285},"start":{"character":15,"line":1285}}},{"detail":"type alias","kind":5,"name":"swig_globalvar","range":{"end":{"character":16,"line":1290},"start":{"character":0,"line":1285}},"selectionRange":{"end":{"character":16,"line":1290},"start":{"character":2,"line":1290}}},{"children":[{"detail":"int","kind":8,"name":"swig_globalvar","range":{"end":{"character":16,"line":1294},"start":{"character":2,"line":1293}},"selectionRange":{"end":{"character":16,"line":1294},"start":{"character":2,"line":1294}}}],"detail":"struct","kind":23,"name":"swig_varlinkobject","range":{"end":{"character":1,"line":1295},"start":{"character":8,"line":1292}},"selectionRange":{"end":{"character":33,"line":1292},"start":{"character":15,"line":1292}}},{"detail":"type alias","kind":5,"name":"swig_varlinkobject","range":{"end":{"character":20,"line":1295},"start":{"character":0,"line":1292}},"selectionRange":{"end":{"character":20,"line":1295},"start":{"character":2,"line":1295}}},{"detail":"int *(int *)","kind":12,"name":"swig_varlink_repr","range":{"end":{"character":1,"line":1304},"start":{"character":0,"line":1297}},"selectionRange":{"end":{"character":17,"line":1298},"start":{"character":0,"line":1298}}},{"detail":"int *(int *)","kind":12,"name":"swig_varlink_str","range":{"end":{"character":1,"line":1343},"start":{"character":0,"line":1306}},"selectionRange":{"end":{"character":16,"line":1307},"start":{"character":0,"line":1307}}},{"detail":"void (int *)","kind":12,"name":"swig_varlink_dealloc","range":{"end":{"character":1,"line":1355},"start":{"character":0,"line":1345}},"selectionRange":{"end":{"character":20,"line":1346},"start":{"character":0,"line":1346}}},{"detail":"int *(int *, char *)","kind":12,"name":"swig_varlink_getattr","range":{"end":{"character":1,"line":1373},"start":{"character":0,"line":1357}},"selectionRange":{"end":{"character":20,"line":1358},"start":{"character":0,"line":1358}}},{"detail":"int (int *, char *, int *)","kind":12,"name":"swig_varlink_setattr","range":{"end":{"character":1,"line":1391},"start":{"character":0,"line":1375}},"selectionRange":{"end":{"character":20,"line":1376},"start":{"character":0,"line":1376}}},{"detail":"int *()","kind":12,"name":"swig_varlink_type","range":{"end":{"character":1,"line":1460},"start":{"character":0,"line":1393}},"selectionRange":{"end":{"character":17,"line":1394},"start":{"character":0,"line":1394}}},{"detail":"int *()","kind":12,"name":"SWIG_Python_newvarlink","range":{"end":{"character":1,"line":1470},"start":{"character":0,"line":1463}},"selectionRange":{"end":{"character":22,"line":1464},"start":{"character":0,"line":1464}}},{"detail":"void (int *, const char *, int *(*)(), int (*)(int *))","kind":12,"name":"SWIG_Python_addvarlink","range":{"end":{"character":1,"line":1487},"start":{"character":0,"line":1472}},"selectionRange":{"end":{"character":22,"line":1473},"start":{"character":0,"line":1473}}},{"detail":"int *","kind":13,"name":"Swig_Globals_global","range":{"end":{"character":36,"line":1490},"start":{"character":0,"line":1490}},"selectionRange":{"end":{"character":36,"line":1490},"start":{"character":17,"line":1490}}},{"detail":"int *()","kind":12,"name":"SWIG_globals","range":{"end":{"character":1,"line":1498},"start":{"character":0,"line":1492}},"selectionRange":{"end":{"character":12,"line":1493},"start":{"character":0,"line":1493}}},{"detail":"int *()","kind":12,"name":"SWIG_Py_Void","range":{"end":{"character":1,"line":1529},"start":{"character":0,"line":1523}},"selectionRange":{"end":{"character":12,"line":1524},"start":{"character":0,"line":1524}}},{"children":[{"detail":"int *","kind":8,"name":"klass","range":{"end":{"character":17,"line":1534},"start":{"character":2,"line":1534}},"selectionRange":{"end":{"character":17,"line":1534},"start":{"character":12,"line":1534}}},{"detail":"int *","kind":8,"name":"newraw","range":{"end":{"character":18,"line":1535},"start":{"character":2,"line":1535}},"selectionRange":{"end":{"character":18,"line":1535},"start":{"character":12,"line":1535}}},{"detail":"int *","kind":8,"name":"newargs","range":{"end":{"character":19,"line":1536},"start":{"character":2,"line":1536}},"selectionRange":{"end":{"character":19,"line":1536},"start":{"character":12,"line":1536}}},{"detail":"int *","kind":8,"name":"destroy","range":{"end":{"character":19,"line":1537},"start":{"character":2,"line":1537}},"selectionRange":{"end":{"character":19,"line":1537},"start":{"character":12,"line":1537}}},{"detail":"int","kind":8,"name":"delargs","range":{"end":{"character":13,"line":1538},"start":{"character":2,"line":1538}},"selectionRange":{"end":{"character":13,"line":1538},"start":{"character":6,"line":1538}}},{"detail":"int","kind":8,"name":"implicitconv","range":{"end":{"character":18,"line":1539},"start":{"character":2,"line":1539}},"selectionRange":{"end":{"character":18,"line":1539},"start":{"character":6,"line":1539}}},{"detail":"int *","kind":8,"name":"pytype","range":{"end":{"character":22,"line":1540},"start":{"character":2,"line":1540}},"selectionRange":{"end":{"character":22,"line":1540},"start":{"character":16,"line":1540}}}],"detail":"struct","kind":23,"name":"(anonymous struct)","range":{"end":{"character":1,"line":1541},"start":{"character":8,"line":1533}},"selectionRange":{"end":{"character":14,"line":1533},"start":{"character":8,"line":1533}}},{"detail":"type alias","kind":5,"name":"SwigPyClientData","range":{"end":{"character":18,"line":1541},"start":{"character":0,"line":1533}},"selectionRange":{"end":{"character":18,"line":1541},"start":{"character":2,"line":1541}}},{"detail":"int (swig_type_info *)","kind":12,"name":"SWIG_Python_CheckImplicit","range":{"end":{"character":1,"line":1551},"start":{"character":0,"line":1543}},"selectionRange":{"end":{"character":25,"line":1544},"start":{"character":0,"line":1544}}},{"detail":"int *(swig_type_info *)","kind":12,"name":"SWIG_Python_ExceptionType","range":{"end":{"character":1,"line":1558},"start":{"character":0,"line":1553}},"selectionRange":{"end":{"character":25,"line":1554},"start":{"character":0,"line":1554}}},{"detail":"SwigPyClientData *(int *)","kind":12,"name":"SwigPyClientData_New","range":{"end":{"character":1,"line":1609},"start":{"character":0,"line":1561}},"selectionRange":{"end":{"character":20,"line":1562},"start":{"character":0,"line":1562}}},{"detail":"void (SwigPyClientData *)","kind":12,"name":"SwigPyClientData_Del","range":{"end":{"character":1,"line":1619},"start":{"character":0,"line":1611}},"selectionRange":{"end":{"character":20,"line":1612},"start":{"character":0,"line":1612}}},{"children":[{"detail":"int *","kind":8,"name":"ptr","range":{"end":{"character":11,"line":1625},"start":{"character":2,"line":1624}},"selectionRange":{"end":{"character":11,"line":1625},"start":{"character":8,"line":1625}}},{"detail":"swig_type_info *","kind":8,"name":"ty","range":{"end":{"character":20,"line":1626},"start":{"character":2,"line":1626}},"selectionRange":{"end":{"character":20,"line":1626},"start":{"character":18,"line":1626}}},{"detail":"int","kind":8,"name":"own","range":{"end":{"character":9,"line":1627},"start":{"character":2,"line":1627}},"selectionRange":{"end":{"character":9,"line":1627},"start":{"character":6,"line":1627}}},{"detail":"int *","kind":8,"name":"next","range":{"end":{"character":16,"line":1628},"start":{"character":2,"line":1628}},"selectionRange":{"end":{"character":16,"line":1628},"start":{"character":12,"line":1628}}}],"detail":"struct","kind":23,"name":"(anonymous struct)","range":{"end":{"character":1,"line":1632},"start":{"character":8,"line":1623}},"selectionRange":{"end":{"character":14,"line":1623},"start":{"character":8,"line":1623}}},{"detail":"type alias","kind":5,"name":"SwigPyObject","range":{"end":{"character":14,"line":1632},"start":{"character":0,"line":1623}},"selectionRange":{"end":{"character":14,"line":1632},"start":{"character":2,"line":1632}}},{"detail":"int *(SwigPyObject *)","kind":12,"name":"SwigPyObject_long","range":{"end":{"character":1,"line":1655},"start":{"character":0,"line":1651}},"selectionRange":{"end":{"character":17,"line":1652},"start":{"character":0,"line":1652}}},{"detail":"int *(const char *, SwigPyObject *)","kind":12,"name":"SwigPyObject_format","range":{"end":{"character":1,"line":1680},"start":{"character":0,"line":1657}},"selectionRange":{"end":{"character":19,"line":1658},"start":{"character":0,"line":1658}}},{"detail":"int *(SwigPyObject *)","kind":12,"name":"SwigPyObject_oct","range":{"end":{"character":1,"line":1686},"start":{"character":0,"line":1682}},"selectionRange":{"end":{"character":16,"line":1683},"start":{"character":0,"line":1683}}},{"detail":"int *(SwigPyObject *)","kind":12,"name":"SwigPyObject_hex","range":{"end":{"character":1,"line":1692},"start":{"character":0,"line":1688}},"selectionRange":{"end":{"character":16,"line":1689},"start":{"character":0,"line":1689}}},{"detail":"int *(SwigPyObject *)","kind":12,"name":"SwigPyObject_repr","range":{"end":{"character":1,"line":1716},"start":{"character":0,"line":1694}},"selectionRange":{"end":{"character":17,"line":1695},"start":{"character":0,"line":1695}}},{"detail":"int *(int *, int *)","kind":12,"name":"SwigPyObject_repr2","range":{"end":{"character":1,"line":1724},"start":{"character":0,"line":1720}},"selectionRange":{"end":{"character":18,"line":1721},"start":{"character":0,"line":1721}}},{"detail":"int (SwigPyObject *, SwigPyObject *)","kind":12,"name":"SwigPyObject_compare","range":{"end":{"character":1,"line":1732},"start":{"character":0,"line":1726}},"selectionRange":{"end":{"character":20,"line":1727},"start":{"character":0,"line":1727}}},{"detail":"int *(SwigPyObject *, SwigPyObject *, int)","kind":12,"name":"SwigPyObject_richcompare","range":{"end":{"character":1,"line":1745},"start":{"character":0,"line":1735}},"selectionRange":{"end":{"character":24,"line":1736},"start":{"character":0,"line":1736}}},{"detail":"int *()","kind":12,"name":"SwigPyObject_TypeOnce","range":{"end":{"character":53,"line":1748},"start":{"character":0,"line":1748}},"selectionRange":{"end":{"character":47,"line":1748},"start":{"character":26,"line":1748}}},{"detail":"int *()","kind":12,"name":"SwigPyObject_type","range":{"end":{"character":1,"line":1766},"start":{"character":0,"line":1762}},"selectionRange":{"end":{"character":17,"line":1763},"start":{"character":0,"line":1763}}},{"detail":"int (int *)","kind":12,"name":"SwigPyObject_Check","range":{"end":{"character":1,"line":1780},"start":{"character":0,"line":1769}},"selectionRange":{"end":{"character":18,"line":1770},"start":{"character":0,"line":1770}}},{"detail":"int *(void *, swig_type_info *, int)","kind":12,"name":"SwigPyObject_New","range":{"end":{"character":56,"line":1783},"start":{"character":0,"line":1782}},"selectionRange":{"end":{"character":16,"line":1783},"start":{"character":0,"line":1783}}},{"detail":"int *","kind":13,"name":"Swig_Capsule_global","range":{"end":{"character":36,"line":1785},"start":{"character":0,"line":1785}},"selectionRange":{"end":{"character":36,"line":1785},"start":{"character":17,"line":1785}}},{"detail":"void (int *)","kind":12,"name":"SwigPyObject_dealloc","range":{"end":{"character":1,"line":1844},"start":{"character":0,"line":1787}},"selectionRange":{"end":{"character":20,"line":1788},"start":{"character":0,"line":1788}}},{"detail":"int *(int *, int *)","kind":12,"name":"SwigPyObject_append","range":{"end":{"character":1,"line":1858},"start":{"character":0,"line":1846}},"selectionRange":{"end":{"character":19,"line":1847},"start":{"character":0,"line":1847}}},{"detail":"int *(int *, int *)","kind":12,"name":"SwigPyObject_next","range":{"end":{"character":1,"line":1870},"start":{"character":0,"line":1860}},"selectionRange":{"end":{"character":17,"line":1861},"start":{"character":0,"line":1861}}},{"detail":"int *(int *, int *)","kind":12,"name":"SwigPyObject_disown","range":{"end":{"character":1,"line":1878},"start":{"character":0,"line":1872}},"selectionRange":{"end":{"character":19,"line":1873},"start":{"character":0,"line":1873}}},{"detail":"int *(int *, int *)","kind":12,"name":"SwigPyObject_acquire","range":{"end":{"character":1,"line":1886},"start":{"character":0,"line":1880}},"selectionRange":{"end":{"character":20,"line":1881},"start":{"character":0,"line":1881}}},{"detail":"int *(int *, int *)","kind":12,"name":"SwigPyObject_own","range":{"end":{"character":1,"line":1906},"start":{"character":0,"line":1888}},"selectionRange":{"end":{"character":16,"line":1889},"start":{"character":0,"line":1889}}},{"detail":"int[]","kind":13,"name":"swigobject_methods","range":{"end":{"character":20,"line":1909},"start":{"character":0,"line":1908}},"selectionRange":{"end":{"character":18,"line":1909},"start":{"character":0,"line":1909}}},{"detail":"int *()","kind":12,"name":"SwigPyObject_TypeOnce","range":{"end":{"character":1,"line":2054},"start":{"character":0,"line":1919}},"selectionRange":{"end":{"character":21,"line":1920},"start":{"character":0,"line":1920}}},{"detail":"int *(void *, swig_type_info *, int)","kind":12,"name":"SwigPyObject_New","range":{"end":{"character":1,"line":2076},"start":{"character":0,"line":2056}},"selectionRange":{"end":{"character":16,"line":2057},"start":{"character":0,"line":2057}}},{"children":[{"detail":"int *","kind":8,"name":"pack","range":{"end":{"character":12,"line":2084},"start":{"character":2,"line":2083}},"selectionRange":{"end":{"character":12,"line":2084},"start":{"character":8,"line":2084}}},{"detail":"swig_type_info *","kind":8,"name":"ty","range":{"end":{"character":20,"line":2085},"start":{"character":2,"line":2085}},"selectionRange":{"end":{"character":20,"line":2085},"start":{"character":18,"line":2085}}},{"detail":"size_t","kind":8,"name":"size","range":{"end":{"character":13,"line":2086},"start":{"character":2,"line":2086}},"selectionRange":{"end":{"character":13,"line":2086},"start":{"character":9,"line":2086}}}],"detail":"struct","kind":23,"name":"(anonymous struct)","range":{"end":{"character":1,"line":2087},"start":{"character":8,"line":2082}},"selectionRange":{"end":{"character":14,"line":2082},"start":{"character":8,"line":2082}}},{"detail":"type alias","kind":5,"name":"SwigPyPacked","range":{"end":{"character":14,"line":2087},"start":{"character":0,"line":2082}},"selectionRange":{"end":{"character":14,"line":2087},"start":{"character":2,"line":2087}}},{"detail":"int *(SwigPyPacked *)","kind":12,"name":"SwigPyPacked_repr","range":{"end":{"character":1,"line":2098},"start":{"character":0,"line":2089}},"selectionRange":{"end":{"character":17,"line":2090},"start":{"character":0,"line":2090}}},{"detail":"int *(SwigPyPacked *)","kind":12,"name":"SwigPyPacked_str","range":{"end":{"character":1,"line":2109},"start":{"character":0,"line":2100}},"selectionRange":{"end":{"character":16,"line":2101},"start":{"character":0,"line":2101}}},{"detail":"int (SwigPyPacked *, SwigPyPacked *)","kind":12,"name":"SwigPyPacked_compare","range":{"end":{"character":1,"line":2118},"start":{"character":0,"line":2111}},"selectionRange":{"end":{"character":20,"line":2112},"start":{"character":0,"line":2112}}},{"detail":"int *()","kind":12,"name":"SwigPyPacked_TypeOnce","range":{"end":{"character":53,"line":2120},"start":{"character":0,"line":2120}},"selectionRange":{"end":{"character":47,"line":2120},"start":{"character":26,"line":2120}}},{"detail":"int *()","kind":12,"name":"SwigPyPacked_type","range":{"end":{"character":1,"line":2126},"start":{"character":0,"line":2122}},"selectionRange":{"end":{"character":17,"line":2123},"start":{"character":0,"line":2123}}},{"detail":"int (int *)","kind":12,"name":"SwigPyPacked_Check","range":{"end":{"character":1,"line":2132},"start":{"character":0,"line":2128}},"selectionRange":{"end":{"character":18,"line":2129},"start":{"character":0,"line":2129}}},{"detail":"void (int *)","kind":12,"name":"SwigPyPacked_dealloc","range":{"end":{"character":1,"line":2142},"start":{"character":0,"line":2134}},"selectionRange":{"end":{"character":20,"line":2135},"start":{"character":0,"line":2135}}},{"detail":"int *()","kind":12,"name":"SwigPyPacked_TypeOnce","range":{"end":{"character":1,"line":2234},"start":{"character":0,"line":2144}},"selectionRange":{"end":{"character":21,"line":2145},"start":{"character":0,"line":2145}}},{"detail":"int *(void *, size_t, swig_type_info *)","kind":12,"name":"SwigPyPacked_New","range":{"end":{"character":1,"line":2253},"start":{"character":0,"line":2236}},"selectionRange":{"end":{"character":16,"line":2237},"start":{"character":0,"line":2237}}},{"detail":"swig_type_info *(int *, void *, size_t)","kind":12,"name":"SwigPyPacked_UnpackData","range":{"end":{"character":1,"line":2266},"start":{"character":0,"line":2255}},"selectionRange":{"end":{"character":23,"line":2256},"start":{"character":0,"line":2256}}},{"detail":"int *","kind":13,"name":"Swig_This_global","range":{"end":{"character":33,"line":2272},"start":{"character":0,"line":2272}},"selectionRange":{"end":{"character":33,"line":2272},"start":{"character":17,"line":2272}}},{"detail":"int *()","kind":12,"name":"SWIG_This","range":{"end":{"character":1,"line":2280},"start":{"character":0,"line":2274}},"selectionRange":{"end":{"character":9,"line":2275},"start":{"character":0,"line":2275}}},{"detail":"SwigPyObject *(int *)","kind":12,"name":"SWIG_Python_GetSwigThis","range":{"end":{"character":1,"line":2351},"start":{"character":0,"line":2289}},"selectionRange":{"end":{"character":23,"line":2290},"start":{"character":0,"line":2290}}},{"detail":"int (int *, int)","kind":12,"name":"SWIG_Python_AcquirePtr","range":{"end":{"character":1,"line":2366},"start":{"character":0,"line":2355}},"selectionRange":{"end":{"character":22,"line":2356},"start":{"character":0,"line":2356}}},{"detail":"int (int *, void **, swig_type_info *, int, int *)","kind":12,"name":"SWIG_Python_ConvertPtrAndOwn","range":{"end":{"character":1,"line":2478},"start":{"character":0,"line":2370}},"selectionRange":{"end":{"character":28,"line":2371},"start":{"character":0,"line":2371}}},{"detail":"int (int *, void **, swig_type_info *)","kind":12,"name":"SWIG_Python_ConvertFunctionPtr","range":{"end":{"character":1,"line":2507},"start":{"character":0,"line":2482}},"selectionRange":{"end":{"character":30,"line":2483},"start":{"character":0,"line":2483}}},{"detail":"int (int *, void *, size_t, swig_type_info *)","kind":12,"name":"SWIG_Python_ConvertPacked","range":{"end":{"character":1,"line":2523},"start":{"character":0,"line":2511}},"selectionRange":{"end":{"character":25,"line":2512},"start":{"character":0,"line":2512}}},{"detail":"int *(SwigPyClientData *, int *)","kind":12,"name":"SWIG_Python_NewShadowInstance","range":{"end":{"character":1,"line":2593},"start":{"character":0,"line":2534}},"selectionRange":{"end":{"character":29,"line":2535},"start":{"character":0,"line":2535}}},{"detail":"int (int *, int *)","kind":12,"name":"SWIG_Python_SetSwigThis","range":{"end":{"character":1,"line":2614},"start":{"character":0,"line":2595}},"selectionRange":{"end":{"character":23,"line":2596},"start":{"character":0,"line":2596}}},{"detail":"int *(int *)","kind":12,"name":"SWIG_Python_InitShadowInstance","range":{"end":{"character":1,"line":2632},"start":{"character":0,"line":2617}},"selectionRange":{"end":{"character":30,"line":2618},"start":{"character":0,"line":2618}}},{"detail":"int *(int *, void *, swig_type_info *, int)","kind":12,"name":"SWIG_Python_NewPointerObj","range":{"end":{"character":1,"line":2688},"start":{"character":0,"line":2636}},"selectionRange":{"end":{"character":25,"line":2637},"start":{"character":0,"line":2637}}},{"detail":"int *(void *, size_t, swig_type_info *)","kind":12,"name":"SWIG_Python_NewPackedObj","range":{"end":{"character":1,"line":2695},"start":{"character":0,"line":2692}},"selectionRange":{"end":{"character":24,"line":2693},"start":{"character":0,"line":2693}}},{"detail":"int *","kind":13,"name":"Swig_TypeCache_global","range":{"end":{"character":38,"line":2705},"start":{"character":0,"line":2705}},"selectionRange":{"end":{"character":38,"line":2705},"start":{"character":17,"line":2705}}},{"detail":"int *()","kind":12,"name":"SWIG_Python_TypeCache","range":{"end":{"character":1,"line":2714},"start":{"character":0,"line":2708}},"selectionRange":{"end":{"character":21,"line":2709},"start":{"character":0,"line":2709}}},{"detail":"swig_module_info *(void *)","kind":12,"name":"SWIG_Python_GetModule","range":{"end":{"character":1,"line":2732},"start":{"character":0,"line":2716}},"selectionRange":{"end":{"character":21,"line":2717},"start":{"character":0,"line":2717}}},{"detail":"int","kind":13,"name":"interpreter_counter","range":{"end":{"character":34,"line":2735},"start":{"character":0,"line":2735}},"selectionRange":{"end":{"character":30,"line":2735},"start":{"character":11,"line":2735}}},{"detail":"void (int *)","kind":12,"name":"SWIG_Python_DestroyModule","range":{"end":{"character":1,"line":2760},"start":{"character":0,"line":2737}},"selectionRange":{"end":{"character":25,"line":2738},"start":{"character":0,"line":2738}}},{"detail":"void (swig_module_info *)","kind":12,"name":"SWIG_Python_SetModule","range":{"end":{"character":1,"line":2782},"start":{"character":0,"line":2762}},"selectionRange":{"end":{"character":21,"line":2763},"start":{"character":0,"line":2763}}},{"detail":"swig_type_info *(const char *)","kind":12,"name":"SWIG_Python_TypeQuery","range":{"end":{"character":1,"line":2806},"start":{"character":0,"line":2784}},"selectionRange":{"end":{"character":21,"line":2785},"start":{"character":0,"line":2785}}},{"detail":"int (const char *, int)","kind":12,"name":"SWIG_Python_AddErrMesg","range":{"end":{"character":1,"line":2840},"start":{"character":0,"line":2815}},"selectionRange":{"end":{"character":22,"line":2816},"start":{"character":0,"line":2816}}},{"detail":"int (int)","kind":12,"name":"SWIG_Python_ArgFail","range":{"end":{"character":1,"line":2853},"start":{"character":0,"line":2842}},"selectionRange":{"end":{"character":19,"line":2843},"start":{"character":0,"line":2843}}},{"detail":"const char *(int *)","kind":12,"name":"SwigPyObject_GetDesc","range":{"end":{"character":1,"line":2861},"start":{"character":0,"line":2855}},"selectionRange":{"end":{"character":20,"line":2856},"start":{"character":0,"line":2856}}},{"detail":"void (const char *, int *)","kind":12,"name":"SWIG_Python_TypeError","range":{"end":{"character":1,"line":2897},"start":{"character":0,"line":2863}},"selectionRange":{"end":{"character":21,"line":2864},"start":{"character":0,"line":2864}}},{"detail":"void *(int *, swig_type_info *, int, int)","kind":12,"name":"SWIG_Python_MustGetPtr","range":{"end":{"character":1,"line":2908},"start":{"character":0,"line":2901}},"selectionRange":{"end":{"character":22,"line":2902},"start":{"character":0,"line":2902}}},{"detail":"swig_type_info *[23]","kind":13,"name":"swig_types","range":{"end":{"character":37,"line":3005},"start":{"character":0,"line":3005}},"selectionRange":{"end":{"character":33,"line":3005},"start":{"character":23,"line":3005}}},{"detail":"swig_module_info","kind":13,"name":"swig_module","range":{"end":{"character":66,"line":3006},"start":{"character":0,"line":3006}},"selectionRange":{"end":{"character":35,"line":3006},"start":{"character":24,"line":3006}}},{"children":[{"children":[{"detail":"T *","kind":8,"name":"ptr","range":{"end":{"character":10,"line":3034},"start":{"character":4,"line":3034}},"selectionRange":{"end":{"character":10,"line":3034},"start":{"character":7,"line":3034}}},{"detail":"(T *)","kind":9,"name":"SwigSmartPointer","range":{"end":{"character":39,"line":3035},"start":{"character":4,"line":3035}},"selectionRange":{"end":{"character":20,"line":3035},"start":{"character":4,"line":3035}}},{"kind":9,"name":"~SwigSmartPointer","range":{"end":{"character":39,"line":3036},"start":{"character":4,"line":3036}},"selectionRange":{"end":{"character":5,"line":3036},"start":{"character":4,"line":3036}}},{"detail":"SwigSmartPointer &(SwigSmartPointer &)","kind":6,"name":"operator=","range":{"end":{"character":141,"line":3037},"start":{"character":4,"line":3037}},"selectionRange":{"end":{"character":30,"line":3037},"start":{"character":22,"line":3037}}},{"detail":"void (T *)","kind":6,"name":"reset","range":{"end":{"character":74,"line":3038},"start":{"character":4,"line":3038}},"selectionRange":{"end":{"character":14,"line":3038},"start":{"character":9,"line":3038}}}],"detail":"struct","kind":23,"name":"SwigSmartPointer","range":{"end":{"character":3,"line":3039},"start":{"character":2,"line":3033}},"selectionRange":{"end":{"character":25,"line":3033},"start":{"character":9,"line":3033}}},{"detail":"struct SwigSmartPointer","kind":8,"name":"pointer","range":{"end":{"character":11,"line":3039},"start":{"character":2,"line":3033}},"selectionRange":{"end":{"character":11,"line":3039},"start":{"character":4,"line":3039}}},{"detail":"SwigValueWrapper<T> &(const SwigValueWrapper<T> &)","kind":6,"name":"operator=","range":{"end":{"character":61,"line":3040},"start":{"character":2,"line":3040}},"selectionRange":{"end":{"character":28,"line":3040},"start":{"character":20,"line":3040}}},{"detail":"(const SwigValueWrapper<T> &)","kind":9,"name":"SwigValueWrapper","range":{"end":{"character":50,"line":3041},"start":{"character":2,"line":3041}},"selectionRange":{"end":{"character":18,"line":3041},"start":{"character":2,"line":3041}}},{"detail":"()","kind":9,"name":"SwigValueWrapper","range":{"end":{"character":37,"line":3043},"start":{"character":2,"line":3043}},"selectionRange":{"end":{"character":18,"line":3043},"start":{"character":2,"line":3043}}},{"detail":"SwigValueWrapper<T> &(const T &)","kind":6,"name":"operator=","range":{"end":{"character":106,"line":3044},"start":{"character":2,"line":3044}},"selectionRange":{"end":{"character":28,"line":3044},"start":{"character":20,"line":3044}}},{"detail":"SwigValueWrapper<T> &(T &&)","kind":6,"name":"operator=","range":{"end":{"character":112,"line":3046},"start":{"character":2,"line":3046}},"selectionRange":{"end":{"character":28,"line":3046},"start":{"character":20,"line":3046}}},{"detail":"T &&() const","kind":12,"name":"operator type-parameter-0-0 &&","range":{"end":{"character":58,"line":3047},"start":{"character":2,"line":3047}},"selectionRange":{"end":{"character":10,"line":3047},"start":{"character":2,"line":3047}}},{"detail":"T *() const","kind":6,"name":"operator&","range":{"end":{"character":46,"line":3051},"start":{"character":2,"line":3051}},"selectionRange":{"end":{"character":13,"line":3051},"start":{"character":5,"line":3051}}},{"detail":"void (SwigValueWrapper<T> &, T *)","kind":6,"name":"reset","range":{"end":{"character":70,"line":3052},"start":{"character":2,"line":3052}},"selectionRange":{"end":{"character":19,"line":3052},"start":{"character":14,"line":3052}}}],"detail":"template class","kind":5,"name":"SwigValueWrapper","range":{"end":{"character":1,"line":3053},"start":{"character":21,"line":3032}},"selectionRange":{"end":{"character":43,"line":3032},"start":{"character":27,"line":3032}}},{"detail":"template T ()","kind":12,"name":"SwigValueInit","range":{"end":{"character":1,"line":3066},"start":{"character":22,"line":3064}},"selectionRange":{"end":{"character":37,"line":3064},"start":{"character":24,"line":3064}}},{"children":[{"children":[{"detail":"int *","kind":8,"name":"_obj","range":{"end":{"character":18,"line":3087},"start":{"character":4,"line":3087}},"selectionRange":{"end":{"character":18,"line":3087},"start":{"character":14,"line":3087}}},{"detail":"()","kind":9,"name":"SwigPtr_PyObject","range":{"end":{"character":5,"line":3092},"start":{"character":4,"line":3090}},"selectionRange":{"end":{"character":20,"line":3090},"start":{"character":4,"line":3090}}},{"detail":"(const SwigPtr_PyObject &)","kind":9,"name":"SwigPtr_PyObject","range":{"end":{"character":5,"line":3099},"start":{"character":4,"line":3094}},"selectionRange":{"end":{"character":20,"line":3094},"start":{"character":4,"line":3094}}},{"detail":"(int *, bool)","kind":9,"name":"SwigPtr_PyObject","range":{"end":{"character":5,"line":3108},"start":{"character":4,"line":3101}},"selectionRange":{"end":{"character":20,"line":3101},"start":{"character":4,"line":3101}}},{"detail":"SwigPtr_PyObject &(const SwigPtr_PyObject &)","kind":6,"name":"operator=","range":{"end":{"character":5,"line":3118},"start":{"character":4,"line":3110}},"selectionRange":{"end":{"character":31,"line":3110},"start":{"character":23,"line":3110}}},{"kind":9,"name":"~SwigPtr_PyObject","range":{"end":{"character":5,"line":3125},"start":{"character":4,"line":3120}},"selectionRange":{"end":{"character":5,"line":3120},"start":{"character":4,"line":3120}}}],"detail":"class","kind":5,"name":"SwigPtr_PyObject","range":{"end":{"character":3,"line":3136},"start":{"character":2,"line":3085}},"selectionRange":{"end":{"character":24,"line":3085},"start":{"character":8,"line":3085}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":3137},"start":{"character":0,"line":3084}},"selectionRange":{"end":{"character":14,"line":3084},"start":{"character":10,"line":3084}}},{"children":[{"children":[{"detail":"(int *)","kind":9,"name":"SwigVar_PyObject","range":{"end":{"character":74,"line":3142},"start":{"character":4,"line":3142}},"selectionRange":{"end":{"character":20,"line":3142},"start":{"character":4,"line":3142}}},{"detail":"SwigVar_PyObject &(int *)","kind":6,"name":"operator=","range":{"end":{"character":5,"line":3149},"start":{"character":4,"line":3144}},"selectionRange":{"end":{"character":31,"line":3144},"start":{"character":23,"line":3144}}}],"detail":"struct","kind":23,"name":"SwigVar_PyObject","range":{"end":{"character":3,"line":3150},"start":{"character":2,"line":3141}},"selectionRange":{"end":{"character":25,"line":3141},"start":{"character":9,"line":3141}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":3151},"start":{"character":0,"line":3140}},"selectionRange":{"end":{"character":14,"line":3140},"start":{"character":10,"line":3140}}},{"children":[{"detail":"struct","kind":23,"name":"stop_iteration","range":{"end":{"character":3,"line":3188},"start":{"character":2,"line":3187}},"selectionRange":{"end":{"character":23,"line":3187},"start":{"character":9,"line":3187}}},{"children":[{"detail":"SwigPtr_PyObject","kind":8,"name":"_seq","range":{"end":{"character":25,"line":3192},"start":{"character":4,"line":3192}},"selectionRange":{"end":{"character":25,"line":3192},"start":{"character":21,"line":3192}}},{"detail":"(int *)","kind":9,"name":"SwigPyIterator","range":{"end":{"character":5,"line":3197},"start":{"character":4,"line":3195}},"selectionRange":{"end":{"character":18,"line":3195},"start":{"character":4,"line":3195}}},{"kind":9,"name":"~SwigPyIterator","range":{"end":{"character":32,"line":3200},"start":{"character":4,"line":3200}},"selectionRange":{"end":{"character":13,"line":3200},"start":{"character":12,"line":3200}}},{"detail":"int *() const","kind":6,"name":"value","range":{"end":{"character":39,"line":3203},"start":{"character":4,"line":3203}},"selectionRange":{"end":{"character":27,"line":3203},"start":{"character":22,"line":3203}}},{"detail":"SwigPyIterator *(size_t)","kind":6,"name":"incr","range":{"end":{"character":50,"line":3206},"start":{"character":4,"line":3206}},"selectionRange":{"end":{"character":32,"line":3206},"start":{"character":28,"line":3206}}},{"detail":"SwigPyIterator *(size_t)","kind":6,"name":"decr","range":{"end":{"character":5,"line":3212},"start":{"character":4,"line":3209}},"selectionRange":{"end":{"character":32,"line":3209},"start":{"character":28,"line":3209}}},{"detail":"ptrdiff_t (const SwigPyIterator &) const","kind":6,"name":"distance","range":{"end":{"character":5,"line":3218},"start":{"character":4,"line":3215}},"selectionRange":{"end":{"character":30,"line":3215},"start":{"character":22,"line":3215}}},{"detail":"bool (const SwigPyIterator &) const","kind":6,"name":"equal","range":{"end":{"character":5,"line":3223},"start":{"character":4,"line":3220}},"selectionRange":{"end":{"character":22,"line":3220},"start":{"character":17,"line":3220}}},{"detail":"SwigPyIterator *() const","kind":6,"name":"copy","range":{"end":{"character":44,"line":3226},"start":{"character":4,"line":3226}},"selectionRange":{"end":{"character":32,"line":3226},"start":{"character":28,"line":3226}}},{"detail":"int *()","kind":6,"name":"next","range":{"end":{"character":5,"line":3235},"start":{"character":4,"line":3228}},"selectionRange":{"end":{"character":18,"line":3228},"start":{"character":14,"line":3228}}},{"detail":"int *()","kind":6,"name":"__next__","range":{"end":{"character":5,"line":3241},"start":{"character":4,"line":3238}},"selectionRange":{"end":{"character":22,"line":3238},"start":{"character":14,"line":3238}}},{"detail":"int *()","kind":6,"name":"previous","range":{"end":{"character":5,"line":3250},"start":{"character":4,"line":3243}},"selectionRange":{"end":{"character":22,"line":3243},"start":{"character":14,"line":3243}}},{"detail":"SwigPyIterator *(ptrdiff_t)","kind":6,"name":"advance","range":{"end":{"character":5,"line":3255},"start":{"character":4,"line":3252}},"selectionRange":{"end":{"character":27,"line":3252},"start":{"character":20,"line":3252}}},{"detail":"bool (const SwigPyIterator &) const","kind":6,"name":"operator==","range":{"end":{"character":5,"line":3260},"start":{"character":4,"line":3257}},"selectionRange":{"end":{"character":17,"line":3257},"start":{"character":9,"line":3257}}},{"detail":"bool (const SwigPyIterator &) const","kind":6,"name":"operator!=","range":{"end":{"character":5,"line":3265},"start":{"character":4,"line":3262}},"selectionRange":{"end":{"character":17,"line":3262},"start":{"character":9,"line":3262}}},{"detail":"SwigPyIterator &(ptrdiff_t)","kind":6,"name":"operator+=","range":{"end":{"character":5,"line":3270},"start":{"character":4,"line":3267}},"selectionRange":{"end":{"character":28,"line":3267},"start":{"character":20,"line":3267}}},{"detail":"SwigPyIterator &(ptrdiff_t)","kind":6,"name":"operator-=","range":{"end":{"character":5,"line":3275},"start":{"character":4,"line":3272}},"selectionRange":{"end":{"character":28,"line":3272},"start":{"character":20,"line":3272}}},{"detail":"SwigPyIterator *(ptrdiff_t) const","kind":6,"name":"operator+","range":{"end":{"character":5,"line":3280},"start":{"character":4,"line":3277}},"selectionRange":{"end":{"character":28,"line":3277},"start":{"character":20,"line":3277}}},{"detail":"SwigPyIterator *(ptrdiff_t) const","kind":6,"name":"operator-","range":{"end":{"character":5,"line":3285},"start":{"character":4,"line":3282}},"selectionRange":{"end":{"character":28,"line":3282},"start":{"character":20,"line":3282}}},{"detail":"ptrdiff_t (const SwigPyIterator &) const","kind":6,"name":"operator-","range":{"end":{"character":5,"line":3290},"start":{"character":4,"line":3287}},"selectionRange":{"end":{"character":22,"line":3287},"start":{"character":14,"line":3287}}},{"detail":"swig_type_info *()","kind":6,"name":"descriptor","range":{"end":{"character":5,"line":3300},"start":{"character":4,"line":3292}},"selectionRange":{"end":{"character":37,"line":3292},"start":{"character":27,"line":3292}}}],"detail":"struct","kind":23,"name":"SwigPyIterator","range":{"end":{"character":3,"line":3301},"start":{"character":2,"line":3190}},"selectionRange":{"end":{"character":23,"line":3190},"start":{"character":9,"line":3190}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":3310},"start":{"character":0,"line":3186}},"selectionRange":{"end":{"character":14,"line":3186},"start":{"character":10,"line":3186}}},{"detail":"int (int *, double *)","kind":12,"name":"SWIG_AsVal_double","range":{"end":{"character":1,"line":3356},"start":{"character":0,"line":3313}},"selectionRange":{"end":{"character":17,"line":3314},"start":{"character":0,"line":3314}}},{"detail":"int (double *, double, double)","kind":12,"name":"SWIG_CanCastAsInteger","range":{"end":{"character":1,"line":3392},"start":{"character":0,"line":3365}},"selectionRange":{"end":{"character":21,"line":3366},"start":{"character":0,"line":3366}}},{"detail":"int (int *, unsigned long *)","kind":12,"name":"SWIG_AsVal_unsigned_SS_long","range":{"end":{"character":1,"line":3440},"start":{"character":0,"line":3395}},"selectionRange":{"end":{"character":27,"line":3396},"start":{"character":0,"line":3396}}},{"detail":"int (int *, unsigned long long *)","kind":12,"name":"SWIG_AsVal_unsigned_SS_long_SS_long","range":{"end":{"character":1,"line":3495},"start":{"character":0,"line":3459}},"selectionRange":{"end":{"character":35,"line":3460},"start":{"character":0,"line":3460}}},{"detail":"int (int *, size_t *)","kind":12,"name":"SWIG_AsVal_size_t","range":{"end":{"character":1,"line":3517},"start":{"character":0,"line":3499}},"selectionRange":{"end":{"character":17,"line":3500},"start":{"character":0,"line":3500}}},{"detail":"int *(long long)","kind":12,"name":"SWIG_From_long_SS_long","range":{"end":{"character":1,"line":3529},"start":{"character":0,"line":3524}},"selectionRange":{"end":{"character":22,"line":3525},"start":{"character":0,"line":3525}}},{"detail":"int *(ptrdiff_t)","kind":12,"name":"SWIG_From_ptrdiff_t","range":{"end":{"character":1,"line":3546},"start":{"character":0,"line":3533}},"selectionRange":{"end":{"character":19,"line":3534},"start":{"character":0,"line":3534}}},{"detail":"int *(bool)","kind":12,"name":"SWIG_From_bool","range":{"end":{"character":1,"line":3553},"start":{"character":0,"line":3549}},"selectionRange":{"end":{"character":16,"line":3550},"start":{"character":2,"line":3550}}},{"detail":"int (int *, long *)","kind":12,"name":"SWIG_AsVal_long","range":{"end":{"character":1,"line":3596},"start":{"character":0,"line":3556}},"selectionRange":{"end":{"character":15,"line":3557},"start":{"character":0,"line":3557}}},{"detail":"int (int *, long long *)","kind":12,"name":"SWIG_AsVal_long_SS_long","range":{"end":{"character":1,"line":3637},"start":{"character":0,"line":3600}},"selectionRange":{"end":{"character":23,"line":3601},"start":{"character":0,"line":3601}}},{"detail":"int (int *, ptrdiff_t *)","kind":12,"name":"SWIG_AsVal_ptrdiff_t","range":{"end":{"character":1,"line":3659},"start":{"character":0,"line":3641}},"selectionRange":{"end":{"character":20,"line":3642},"start":{"character":0,"line":3642}}},{"children":[{"children":[{"detail":"type alias","kind":5,"name":"noconst_type","range":{"end":{"character":29,"line":3680},"start":{"character":4,"line":3680}},"selectionRange":{"end":{"character":29,"line":3680},"start":{"character":17,"line":3680}}}],"detail":"template struct","kind":23,"name":"noconst_traits","range":{"end":{"character":3,"line":3681},"start":{"character":2,"line":3679}},"selectionRange":{"end":{"character":23,"line":3679},"start":{"character":9,"line":3679}}},{"children":[{"detail":"type alias","kind":5,"name":"noconst_type","range":{"end":{"character":29,"line":3685},"start":{"character":4,"line":3685}},"selectionRange":{"end":{"character":29,"line":3685},"start":{"character":17,"line":3685}}}],"detail":"template struct","kind":23,"name":"noconst_traits<const Type>","range":{"end":{"character":3,"line":3686},"start":{"character":2,"line":3683}},"selectionRange":{"end":{"character":23,"line":3684},"start":{"character":9,"line":3684}}},{"detail":"struct","kind":23,"name":"pointer_category","range":{"end":{"character":29,"line":3691},"start":{"character":2,"line":3691}},"selectionRange":{"end":{"character":25,"line":3691},"start":{"character":9,"line":3691}}},{"detail":"struct","kind":23,"name":"value_category","range":{"end":{"character":27,"line":3692},"start":{"character":2,"line":3692}},"selectionRange":{"end":{"character":23,"line":3692},"start":{"character":9,"line":3692}}},{"detail":"template struct","kind":23,"name":"traits","range":{"end":{"character":41,"line":3697},"start":{"character":24,"line":3697}},"selectionRange":{"end":{"character":37,"line":3697},"start":{"character":31,"line":3697}}},{"detail":"template const char *()","kind":12,"name":"type_name","range":{"end":{"character":3,"line":3702},"start":{"character":2,"line":3700}},"selectionRange":{"end":{"character":30,"line":3700},"start":{"character":21,"line":3700}}},{"children":[{"detail":"swig_type_info *(std::string)","kind":6,"name":"type_query","range":{"end":{"character":5,"line":3708},"start":{"character":4,"line":3705}},"selectionRange":{"end":{"character":37,"line":3705},"start":{"character":27,"line":3705}}},{"detail":"swig_type_info *()","kind":6,"name":"type_info","range":{"end":{"character":5,"line":3712},"start":{"character":4,"line":3709}},"selectionRange":{"end":{"character":36,"line":3709},"start":{"character":27,"line":3709}}}],"detail":"template struct","kind":23,"name":"traits_info","range":{"end":{"character":3,"line":3713},"start":{"character":24,"line":3704}},"selectionRange":{"end":{"character":42,"line":3704},"start":{"character":31,"line":3704}}},{"children":[{"detail":"swig_type_info *(std::string)","kind":6,"name":"type_query","range":{"end":{"character":5,"line":3722},"start":{"character":4,"line":3719}},"selectionRange":{"end":{"character":37,"line":3719},"start":{"character":27,"line":3719}}},{"detail":"swig_type_info *()","kind":6,"name":"type_info","range":{"end":{"character":5,"line":3726},"start":{"character":4,"line":3723}},"selectionRange":{"end":{"character":36,"line":3723},"start":{"character":27,"line":3723}}}],"detail":"template struct","kind":23,"name":"traits_info<Type *>","range":{"end":{"character":3,"line":3727},"start":{"character":2,"line":3718}},"selectionRange":{"end":{"character":42,"line":3718},"start":{"character":31,"line":3718}}},{"detail":"template swig_type_info *()","kind":12,"name":"type_info","range":{"end":{"character":3,"line":3732},"start":{"character":2,"line":3730}},"selectionRange":{"end":{"character":34,"line":3730},"start":{"character":25,"line":3730}}},{"children":[{"detail":"type alias","kind":5,"name":"category","range":{"end":{"character":37,"line":3738},"start":{"character":4,"line":3738}},"selectionRange":{"end":{"character":37,"line":3738},"start":{"character":29,"line":3738}}},{"detail":"std::string (const char *)","kind":6,"name":"make_ptr_name","range":{"end":{"character":5,"line":3743},"start":{"character":4,"line":3739}},"selectionRange":{"end":{"character":36,"line":3739},"start":{"character":23,"line":3739}}},{"detail":"const char *()","kind":6,"name":"type_name","range":{"end":{"character":5,"line":3747},"start":{"character":4,"line":3744}},"selectionRange":{"end":{"character":32,"line":3744},"start":{"character":23,"line":3744}}}],"detail":"template struct","kind":23,"name":"traits<Type *>","range":{"end":{"character":3,"line":3748},"start":{"character":2,"line":3737}},"selectionRange":{"end":{"character":37,"line":3737},"start":{"character":31,"line":3737}}},{"detail":"template struct","kind":23,"name":"traits_as","range":{"end":{"character":22,"line":3751},"start":{"character":2,"line":3751}},"selectionRange":{"end":{"character":18,"line":3751},"start":{"character":9,"line":3751}}},{"detail":"template struct","kind":23,"name":"traits_check","range":{"end":{"character":25,"line":3754},"start":{"character":2,"line":3754}},"selectionRange":{"end":{"character":21,"line":3754},"start":{"character":9,"line":3754}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":3756},"start":{"character":0,"line":3677}},"selectionRange":{"end":{"character":14,"line":3677},"start":{"character":10,"line":3677}}},{"children":[{"children":[{"detail":"int *(Type *, int)","kind":6,"name":"from","range":{"end":{"character":5,"line":3766},"start":{"character":4,"line":3764}},"selectionRange":{"end":{"character":25,"line":3764},"start":{"character":21,"line":3764}}}],"detail":"template struct","kind":23,"name":"traits_from_ptr","range":{"end":{"character":3,"line":3767},"start":{"character":24,"line":3763}},"selectionRange":{"end":{"character":46,"line":3763},"start":{"character":31,"line":3763}}},{"children":[{"detail":"int *(const Type &)","kind":6,"name":"from","range":{"end":{"character":5,"line":3772},"start":{"character":4,"line":3770}},"selectionRange":{"end":{"character":25,"line":3770},"start":{"character":21,"line":3770}}}],"detail":"template struct","kind":23,"name":"traits_from","range":{"end":{"character":3,"line":3773},"start":{"character":24,"line":3769}},"selectionRange":{"end":{"character":42,"line":3769},"start":{"character":31,"line":3769}}},{"children":[{"detail":"int *(Type *)","kind":6,"name":"from","range":{"end":{"character":5,"line":3778},"start":{"character":4,"line":3776}},"selectionRange":{"end":{"character":25,"line":3776},"start":{"character":21,"line":3776}}}],"detail":"template struct","kind":23,"name":"traits_from<Type *>","range":{"end":{"character":3,"line":3779},"start":{"character":2,"line":3775}},"selectionRange":{"end":{"character":42,"line":3775},"start":{"character":31,"line":3775}}},{"children":[{"detail":"int *(const Type *)","kind":6,"name":"from","range":{"end":{"character":5,"line":3784},"start":{"character":4,"line":3782}},"selectionRange":{"end":{"character":25,"line":3782},"start":{"character":21,"line":3782}}}],"detail":"template struct","kind":23,"name":"traits_from<const Type *>","range":{"end":{"character":3,"line":3785},"start":{"character":2,"line":3781}},"selectionRange":{"end":{"character":42,"line":3781},"start":{"character":31,"line":3781}}},{"detail":"template int *(const Type &)","kind":12,"name":"from","range":{"end":{"character":3,"line":3791},"start":{"character":2,"line":3789}},"selectionRange":{"end":{"character":23,"line":3789},"start":{"character":19,"line":3789}}},{"detail":"template int *(Type *, int)","kind":12,"name":"from_ptr","range":{"end":{"character":3,"line":3796},"start":{"character":2,"line":3794}},"selectionRange":{"end":{"character":27,"line":3794},"start":{"character":19,"line":3794}}},{"children":[{"detail":"int (int *, Type **)","kind":6,"name":"asptr","range":{"end":{"character":5,"line":3820},"start":{"character":4,"line":3803}},"selectionRange":{"end":{"character":20,"line":3803},"start":{"character":15,"line":3803}}}],"detail":"template struct","kind":23,"name":"traits_asptr","range":{"end":{"character":3,"line":3821},"start":{"character":2,"line":3802}},"selectionRange":{"end":{"character":21,"line":3802},"start":{"character":9,"line":3802}}},{"detail":"template int (int *, Type **)","kind":12,"name":"asptr","range":{"end":{"character":3,"line":3826},"start":{"character":2,"line":3824}},"selectionRange":{"end":{"character":18,"line":3824},"start":{"character":13,"line":3824}}},{"children":[{"detail":"int (int *, Type *)","kind":6,"name":"asval","range":{"end":{"character":5,"line":3849},"start":{"character":4,"line":3830}},"selectionRange":{"end":{"character":20,"line":3830},"start":{"character":15,"line":3830}}}],"detail":"template struct","kind":23,"name":"traits_asval","range":{"end":{"character":3,"line":3850},"start":{"character":2,"line":3829}},"selectionRange":{"end":{"character":21,"line":3829},"start":{"character":9,"line":3829}}},{"children":[{"detail":"int (int *, Type **)","kind":6,"name":"asval","range":{"end":{"character":5,"line":3865},"start":{"character":4,"line":3853}},"selectionRange":{"end":{"character":20,"line":3853},"start":{"character":15,"line":3853}}}],"detail":"template struct","kind":23,"name":"traits_asval<Type *>","range":{"end":{"character":3,"line":3866},"start":{"character":2,"line":3852}},"selectionRange":{"end":{"character":43,"line":3852},"start":{"character":31,"line":3852}}},{"detail":"template int (int *, Type *)","kind":12,"name":"asval","range":{"end":{"character":3,"line":3871},"start":{"character":2,"line":3869}},"selectionRange":{"end":{"character":18,"line":3869},"start":{"character":13,"line":3869}}},{"children":[{"detail":"Type (int *)","kind":6,"name":"as","range":{"end":{"character":5,"line":3885},"start":{"character":4,"line":3875}},"selectionRange":{"end":{"character":18,"line":3875},"start":{"character":16,"line":3875}}}],"detail":"template struct","kind":23,"name":"traits_as<Type, value_category>","range":{"end":{"character":3,"line":3886},"start":{"character":2,"line":3873}},"selectionRange":{"end":{"character":18,"line":3874},"start":{"character":9,"line":3874}}},{"children":[{"detail":"Type (int *)","kind":6,"name":"as","range":{"end":{"character":5,"line":3907},"start":{"character":4,"line":3890}},"selectionRange":{"end":{"character":18,"line":3890},"start":{"character":16,"line":3890}}}],"detail":"template struct","kind":23,"name":"traits_as<Type, pointer_category>","range":{"end":{"character":3,"line":3908},"start":{"character":2,"line":3888}},"selectionRange":{"end":{"character":18,"line":3889},"start":{"character":9,"line":3889}}},{"children":[{"detail":"Type *(int *)","kind":6,"name":"as","range":{"end":{"character":5,"line":3923},"start":{"character":4,"line":3912}},"selectionRange":{"end":{"character":19,"line":3912},"start":{"character":17,"line":3912}}}],"detail":"template struct","kind":23,"name":"traits_as<Type *, pointer_category>","range":{"end":{"character":3,"line":3924},"start":{"character":2,"line":3910}},"selectionRange":{"end":{"character":18,"line":3911},"start":{"character":9,"line":3911}}},{"detail":"template Type (int *)","kind":12,"name":"as","range":{"end":{"character":3,"line":3929},"start":{"character":2,"line":3927}},"selectionRange":{"end":{"character":16,"line":3927},"start":{"character":14,"line":3927}}},{"children":[{"detail":"bool (int *)","kind":6,"name":"check","range":{"end":{"character":5,"line":3936},"start":{"character":4,"line":3933}},"selectionRange":{"end":{"character":21,"line":3933},"start":{"character":16,"line":3933}}}],"detail":"template struct","kind":23,"name":"traits_check<Type, value_category>","range":{"end":{"character":3,"line":3937},"start":{"character":2,"line":3931}},"selectionRange":{"end":{"character":21,"line":3932},"start":{"character":9,"line":3932}}},{"children":[{"detail":"bool (int *)","kind":6,"name":"check","range":{"end":{"character":5,"line":3944},"start":{"character":4,"line":3941}},"selectionRange":{"end":{"character":21,"line":3941},"start":{"character":16,"line":3941}}}],"detail":"template struct","kind":23,"name":"traits_check<Type, pointer_category>","range":{"end":{"character":3,"line":3945},"start":{"character":2,"line":3939}},"selectionRange":{"end":{"character":21,"line":3940},"start":{"character":9,"line":3940}}},{"detail":"template bool (int *)","kind":12,"name":"check","range":{"end":{"character":3,"line":3950},"start":{"character":2,"line":3948}},"selectionRange":{"end":{"character":19,"line":3948},"start":{"character":14,"line":3948}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":3951},"start":{"character":0,"line":3759}},"selectionRange":{"end":{"character":14,"line":3759},"start":{"character":10,"line":3759}}},{"children":[{"children":[{"detail":"bool (const swig::SwigPtr_PyObject &, const swig::SwigPtr_PyObject &) const","kind":6,"name":"operator()","range":{"end":{"character":5,"line":3989},"start":{"character":4,"line":3985}},"selectionRange":{"end":{"character":12,"line":3986},"start":{"character":4,"line":3986}}}],"detail":"struct","kind":23,"name":"less<swig::SwigPtr_PyObject>","range":{"end":{"character":3,"line":3990},"start":{"character":2,"line":3982}},"selectionRange":{"end":{"character":13,"line":3983},"start":{"character":9,"line":3983}}},{"children":[{"detail":"bool (const swig::SwigVar_PyObject &, const swig::SwigVar_PyObject &) const","kind":6,"name":"operator()","range":{"end":{"character":5,"line":3999},"start":{"character":4,"line":3995}},"selectionRange":{"end":{"character":12,"line":3996},"start":{"character":4,"line":3996}}}],"detail":"struct","kind":23,"name":"less<swig::SwigVar_PyObject>","range":{"end":{"character":3,"line":4000},"start":{"character":2,"line":3992}},"selectionRange":{"end":{"character":13,"line":3993},"start":{"character":9,"line":3993}}}],"kind":3,"name":"std","range":{"end":{"character":1,"line":4002},"start":{"character":0,"line":3956}},"selectionRange":{"end":{"character":13,"line":3956},"start":{"character":10,"line":3956}}},{"kind":3,"name":"swig","range":{"end":{"character":1,"line":4033},"start":{"character":0,"line":4004}},"selectionRange":{"end":{"character":14,"line":4004},"start":{"character":10,"line":4004}}},{"children":[{"detail":"template size_t (Difference, size_t, bool)","kind":12,"name":"check_index","range":{"end":{"character":3,"line":4048},"start":{"character":2,"line":4037}},"selectionRange":{"end":{"character":13,"line":4038},"start":{"character":2,"line":4038}}},{"detail":"template void (Difference, Difference, int, size_t, Difference &, Difference &, bool)","kind":12,"name":"slice_adjust","range":{"end":{"character":3,"line":4088},"start":{"character":2,"line":4051}},"selectionRange":{"end":{"character":14,"line":4052},"start":{"character":2,"line":4052}}},{"detail":"template typename Sequence::iterator (Sequence *, Difference)","kind":12,"name":"getpos","range":{"end":{"character":3,"line":4096},"start":{"character":2,"line":4091}},"selectionRange":{"end":{"character":8,"line":4092},"start":{"character":2,"line":4092}}},{"detail":"template typename Sequence::const_iterator (const Sequence *, Difference)","kind":12,"name":"cgetpos","range":{"end":{"character":3,"line":4104},"start":{"character":2,"line":4099}},"selectionRange":{"end":{"character":9,"line":4100},"start":{"character":2,"line":4100}}},{"detail":"template void (Sequence *, const typename Sequence::iterator &)","kind":12,"name":"erase","range":{"end":{"character":3,"line":4110},"start":{"character":2,"line":4107}},"selectionRange":{"end":{"character":7,"line":4108},"start":{"character":2,"line":4108}}},{"children":[{"detail":"void (Sequence &, typename Sequence::size_type)","kind":6,"name":"reserve","range":{"end":{"character":5,"line":4116},"start":{"character":4,"line":4114}},"selectionRange":{"end":{"character":23,"line":4114},"start":{"character":16,"line":4114}}}],"detail":"template struct","kind":23,"name":"traits_reserve","range":{"end":{"character":3,"line":4117},"start":{"character":2,"line":4113}},"selectionRange":{"end":{"character":23,"line":4113},"start":{"character":9,"line":4113}}},{"detail":"template Sequence *(const Sequence *, Difference, Difference, int)","kind":12,"name":"getslice","range":{"end":{"character":3,"line":4160},"start":{"character":2,"line":4120}},"selectionRange":{"end":{"character":10,"line":4121},"start":{"character":2,"line":4121}}},{"detail":"template void (Sequence *, Difference, Difference, int, const InputSeq &)","kind":12,"name":"setslice","range":{"end":{"character":3,"line":4223},"start":{"character":2,"line":4163}},"selectionRange":{"end":{"character":10,"line":4164},"start":{"character":2,"line":4164}}},{"detail":"template void (Sequence *, Difference, Difference, int)","kind":12,"name":"delslice","range":{"end":{"character":3,"line":4261},"start":{"character":2,"line":4226}},"selectionRange":{"end":{"character":10,"line":4227},"start":{"character":2,"line":4227}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":4262},"start":{"character":0,"line":4035}},"selectionRange":{"end":{"character":14,"line":4035},"start":{"character":10,"line":4035}}},{"children":[{"children":[{"detail":"type alias","kind":5,"name":"out_iterator","range":{"end":{"character":36,"line":4312},"start":{"character":4,"line":4312}},"selectionRange":{"end":{"character":36,"line":4312},"start":{"character":24,"line":4312}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":78,"line":4313},"start":{"character":4,"line":4313}},"selectionRange":{"end":{"character":78,"line":4313},"start":{"character":68,"line":4313}}},{"detail":"type alias","kind":5,"name":"self_type","range":{"end":{"character":52,"line":4314},"start":{"character":4,"line":4314}},"selectionRange":{"end":{"character":52,"line":4314},"start":{"character":43,"line":4314}}},{"detail":"(out_iterator, int *)","kind":9,"name":"SwigPyIterator_T","range":{"end":{"character":5,"line":4319},"start":{"character":4,"line":4316}},"selectionRange":{"end":{"character":20,"line":4316},"start":{"character":4,"line":4316}}},{"detail":"const out_iterator &() const","kind":6,"name":"get_current","range":{"end":{"character":5,"line":4324},"start":{"character":4,"line":4321}},"selectionRange":{"end":{"character":35,"line":4321},"start":{"character":24,"line":4321}}},{"detail":"bool (const SwigPyIterator &) const","kind":6,"name":"equal","range":{"end":{"character":5,"line":4335},"start":{"character":4,"line":4327}},"selectionRange":{"end":{"character":14,"line":4327},"start":{"character":9,"line":4327}}},{"detail":"ptrdiff_t (const SwigPyIterator &) const","kind":6,"name":"distance","range":{"end":{"character":5,"line":4345},"start":{"character":4,"line":4337}},"selectionRange":{"end":{"character":22,"line":4337},"start":{"character":14,"line":4337}}},{"detail":"out_iterator","kind":8,"name":"current","range":{"end":{"character":24,"line":4348},"start":{"character":4,"line":4348}},"selectionRange":{"end":{"character":24,"line":4348},"start":{"character":17,"line":4348}}}],"detail":"template class","kind":5,"name":"SwigPyIterator_T","range":{"end":{"character":3,"line":4349},"start":{"character":2,"line":4309}},"selectionRange":{"end":{"character":24,"line":4309},"start":{"character":8,"line":4309}}},{"children":[{"detail":"type alias","kind":5,"name":"argument_type","range":{"end":{"character":42,"line":4354},"start":{"character":4,"line":4354}},"selectionRange":{"end":{"character":42,"line":4354},"start":{"character":29,"line":4354}}},{"detail":"type alias","kind":5,"name":"result_type","range":{"end":{"character":33,"line":4355},"start":{"character":4,"line":4355}},"selectionRange":{"end":{"character":33,"line":4355},"start":{"character":22,"line":4355}}},{"detail":"result_type (argument_type) const","kind":6,"name":"operator()","range":{"end":{"character":5,"line":4359},"start":{"character":4,"line":4356}},"selectionRange":{"end":{"character":24,"line":4356},"start":{"character":16,"line":4356}}}],"detail":"template struct","kind":23,"name":"from_oper","range":{"end":{"character":3,"line":4360},"start":{"character":2,"line":4352}},"selectionRange":{"end":{"character":18,"line":4352},"start":{"character":9,"line":4352}}},{"children":[{"detail":"FromOper","kind":8,"name":"from","range":{"end":{"character":17,"line":4368},"start":{"character":4,"line":4368}},"selectionRange":{"end":{"character":17,"line":4368},"start":{"character":13,"line":4368}}},{"detail":"type alias","kind":5,"name":"out_iterator","range":{"end":{"character":36,"line":4369},"start":{"character":4,"line":4369}},"selectionRange":{"end":{"character":36,"line":4369},"start":{"character":24,"line":4369}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":32,"line":4370},"start":{"character":4,"line":4370}},"selectionRange":{"end":{"character":32,"line":4370},"start":{"character":22,"line":4370}}},{"detail":"type alias","kind":5,"name":"base","range":{"end":{"character":48,"line":4371},"start":{"character":4,"line":4371}},"selectionRange":{"end":{"character":48,"line":4371},"start":{"character":44,"line":4371}}},{"detail":"type alias","kind":5,"name":"self_type","range":{"end":{"character":83,"line":4372},"start":{"character":4,"line":4372}},"selectionRange":{"end":{"character":83,"line":4372},"start":{"character":74,"line":4372}}},{"detail":"(out_iterator, int *)","kind":9,"name":"SwigPyForwardIteratorOpen_T","range":{"end":{"character":5,"line":4377},"start":{"character":4,"line":4374}},"selectionRange":{"end":{"character":31,"line":4374},"start":{"character":4,"line":4374}}},{"detail":"int *() const","kind":6,"name":"value","range":{"end":{"character":5,"line":4381},"start":{"character":4,"line":4379}},"selectionRange":{"end":{"character":19,"line":4379},"start":{"character":14,"line":4379}}},{"detail":"SwigPyIterator *() const","kind":6,"name":"copy","range":{"end":{"character":5,"line":4386},"start":{"character":4,"line":4383}},"selectionRange":{"end":{"character":24,"line":4383},"start":{"character":20,"line":4383}}},{"detail":"SwigPyIterator *(size_t)","kind":6,"name":"incr","range":{"end":{"character":5,"line":4394},"start":{"character":4,"line":4388}},"selectionRange":{"end":{"character":24,"line":4388},"start":{"character":20,"line":4388}}}],"detail":"template class","kind":5,"name":"SwigPyForwardIteratorOpen_T","range":{"end":{"character":3,"line":4396},"start":{"character":2,"line":4365}},"selectionRange":{"end":{"character":35,"line":4365},"start":{"character":8,"line":4365}}},{"children":[{"detail":"FromOper","kind":8,"name":"from","range":{"end":{"character":17,"line":4404},"start":{"character":4,"line":4404}},"selectionRange":{"end":{"character":17,"line":4404},"start":{"character":13,"line":4404}}},{"detail":"type alias","kind":5,"name":"out_iterator","range":{"end":{"character":36,"line":4405},"start":{"character":4,"line":4405}},"selectionRange":{"end":{"character":36,"line":4405},"start":{"character":24,"line":4405}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":32,"line":4406},"start":{"character":4,"line":4406}},"selectionRange":{"end":{"character":32,"line":4406},"start":{"character":22,"line":4406}}},{"detail":"type alias","kind":5,"name":"base","range":{"end":{"character":48,"line":4407},"start":{"character":4,"line":4407}},"selectionRange":{"end":{"character":48,"line":4407},"start":{"character":44,"line":4407}}},{"detail":"type alias","kind":5,"name":"self_type","range":{"end":{"character":76,"line":4408},"start":{"character":4,"line":4408}},"selectionRange":{"end":{"character":76,"line":4408},"start":{"character":67,"line":4408}}},{"detail":"(out_iterator, int *)","kind":9,"name":"SwigPyIteratorOpen_T","range":{"end":{"character":5,"line":4413},"start":{"character":4,"line":4410}},"selectionRange":{"end":{"character":24,"line":4410},"start":{"character":4,"line":4410}}},{"detail":"SwigPyIterator *(size_t)","kind":6,"name":"decr","range":{"end":{"character":5,"line":4421},"start":{"character":4,"line":4415}},"selectionRange":{"end":{"character":24,"line":4415},"start":{"character":20,"line":4415}}}],"detail":"template class","kind":5,"name":"SwigPyIteratorOpen_T","range":{"end":{"character":3,"line":4422},"start":{"character":2,"line":4401}},"selectionRange":{"end":{"character":28,"line":4401},"start":{"character":8,"line":4401}}},{"children":[{"detail":"FromOper","kind":8,"name":"from","range":{"end":{"character":17,"line":4430},"start":{"character":4,"line":4430}},"selectionRange":{"end":{"character":17,"line":4430},"start":{"character":13,"line":4430}}},{"detail":"type alias","kind":5,"name":"out_iterator","range":{"end":{"character":36,"line":4431},"start":{"character":4,"line":4431}},"selectionRange":{"end":{"character":36,"line":4431},"start":{"character":24,"line":4431}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":32,"line":4432},"start":{"character":4,"line":4432}},"selectionRange":{"end":{"character":32,"line":4432},"start":{"character":22,"line":4432}}},{"detail":"type alias","kind":5,"name":"base","range":{"end":{"character":48,"line":4433},"start":{"character":4,"line":4433}},"selectionRange":{"end":{"character":48,"line":4433},"start":{"character":44,"line":4433}}},{"detail":"type alias","kind":5,"name":"self_type","range":{"end":{"character":85,"line":4434},"start":{"character":4,"line":4434}},"selectionRange":{"end":{"character":85,"line":4434},"start":{"character":76,"line":4434}}},{"detail":"(out_iterator, out_iterator, out_iterator, int *)","kind":9,"name":"SwigPyForwardIteratorClosed_T","range":{"end":{"character":5,"line":4439},"start":{"character":4,"line":4436}},"selectionRange":{"end":{"character":33,"line":4436},"start":{"character":4,"line":4436}}},{"detail":"int *() const","kind":6,"name":"value","range":{"end":{"character":5,"line":4447},"start":{"character":4,"line":4441}},"selectionRange":{"end":{"character":19,"line":4441},"start":{"character":14,"line":4441}}},{"detail":"SwigPyIterator *() const","kind":6,"name":"copy","range":{"end":{"character":5,"line":4452},"start":{"character":4,"line":4449}},"selectionRange":{"end":{"character":24,"line":4449},"start":{"character":20,"line":4449}}},{"detail":"SwigPyIterator *(size_t)","kind":6,"name":"incr","range":{"end":{"character":5,"line":4464},"start":{"character":4,"line":4454}},"selectionRange":{"end":{"character":24,"line":4454},"start":{"character":20,"line":4454}}},{"detail":"out_iterator","kind":8,"name":"begin","range":{"end":{"character":22,"line":4467},"start":{"character":4,"line":4467}},"selectionRange":{"end":{"character":22,"line":4467},"start":{"character":17,"line":4467}}},{"detail":"out_iterator","kind":8,"name":"end","range":{"end":{"character":20,"line":4468},"start":{"character":4,"line":4468}},"selectionRange":{"end":{"character":20,"line":4468},"start":{"character":17,"line":4468}}}],"detail":"template class","kind":5,"name":"SwigPyForwardIteratorClosed_T","range":{"end":{"character":3,"line":4469},"start":{"character":2,"line":4427}},"selectionRange":{"end":{"character":37,"line":4427},"start":{"character":8,"line":4427}}},{"children":[{"detail":"FromOper","kind":8,"name":"from","range":{"end":{"character":17,"line":4477},"start":{"character":4,"line":4477}},"selectionRange":{"end":{"character":17,"line":4477},"start":{"character":13,"line":4477}}},{"detail":"type alias","kind":5,"name":"out_iterator","range":{"end":{"character":36,"line":4478},"start":{"character":4,"line":4478}},"selectionRange":{"end":{"character":36,"line":4478},"start":{"character":24,"line":4478}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":32,"line":4479},"start":{"character":4,"line":4479}},"selectionRange":{"end":{"character":32,"line":4479},"start":{"character":22,"line":4479}}},{"detail":"type alias","kind":5,"name":"base","range":{"end":{"character":48,"line":4480},"start":{"character":4,"line":4480}},"selectionRange":{"end":{"character":48,"line":4480},"start":{"character":44,"line":4480}}},{"detail":"type alias","kind":5,"name":"base0","range":{"end":{"character":81,"line":4481},"start":{"character":4,"line":4481}},"selectionRange":{"end":{"character":81,"line":4481},"start":{"character":76,"line":4481}}},{"detail":"type alias","kind":5,"name":"self_type","range":{"end":{"character":78,"line":4482},"start":{"character":4,"line":4482}},"selectionRange":{"end":{"character":78,"line":4482},"start":{"character":69,"line":4482}}},{"detail":"(out_iterator, out_iterator, out_iterator, int *)","kind":9,"name":"SwigPyIteratorClosed_T","range":{"end":{"character":5,"line":4487},"start":{"character":4,"line":4484}},"selectionRange":{"end":{"character":26,"line":4484},"start":{"character":4,"line":4484}}},{"detail":"SwigPyIterator *(size_t)","kind":6,"name":"decr","range":{"end":{"character":5,"line":4499},"start":{"character":4,"line":4489}},"selectionRange":{"end":{"character":24,"line":4489},"start":{"character":20,"line":4489}}}],"detail":"template class","kind":5,"name":"SwigPyIteratorClosed_T","range":{"end":{"character":3,"line":4500},"start":{"character":2,"line":4474}},"selectionRange":{"end":{"character":30,"line":4474},"start":{"character":8,"line":4474}}},{"detail":"template SwigPyIterator *(const OutIter &, const OutIter &, const OutIter &, int *)","kind":12,"name":"make_output_forward_iterator","range":{"end":{"character":3,"line":4508},"start":{"character":2,"line":4504}},"selectionRange":{"end":{"character":30,"line":4505},"start":{"character":2,"line":4505}}},{"detail":"template SwigPyIterator *(const OutIter &, const OutIter &, const OutIter &, int *)","kind":12,"name":"make_output_iterator","range":{"end":{"character":3,"line":4515},"start":{"character":2,"line":4511}},"selectionRange":{"end":{"character":22,"line":4512},"start":{"character":2,"line":4512}}},{"detail":"template SwigPyIterator *(const OutIter &, int *)","kind":12,"name":"make_output_forward_iterator","range":{"end":{"character":3,"line":4522},"start":{"character":2,"line":4518}},"selectionRange":{"end":{"character":30,"line":4519},"start":{"character":2,"line":4519}}},{"detail":"template SwigPyIterator *(const OutIter &, int *)","kind":12,"name":"make_output_iterator","range":{"end":{"character":3,"line":4529},"start":{"character":2,"line":4525}},"selectionRange":{"end":{"character":22,"line":4526},"start":{"character":2,"line":4526}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":4531},"start":{"character":0,"line":4307}},"selectionRange":{"end":{"character":14,"line":4307},"start":{"character":10,"line":4307}}},{"children":[{"children":[{"detail":"(int *, int)","kind":9,"name":"SwigPySequence_Ref","range":{"end":{"character":5,"line":4542},"start":{"character":4,"line":4539}},"selectionRange":{"end":{"character":22,"line":4539},"start":{"character":4,"line":4539}}},{"detail":"T () const","kind":12,"name":"operator type-parameter-0-0","range":{"end":{"character":5,"line":4559},"start":{"character":4,"line":4544}},"selectionRange":{"end":{"character":12,"line":4544},"start":{"character":4,"line":4544}}},{"detail":"SwigPySequence_Ref<T> &(const T &)","kind":6,"name":"operator=","range":{"end":{"character":5,"line":4565},"start":{"character":4,"line":4561}},"selectionRange":{"end":{"character":32,"line":4561},"start":{"character":24,"line":4561}}},{"detail":"int *","kind":8,"name":"_seq","range":{"end":{"character":18,"line":4568},"start":{"character":4,"line":4568}},"selectionRange":{"end":{"character":18,"line":4568},"start":{"character":14,"line":4568}}},{"detail":"int","kind":8,"name":"_index","range":{"end":{"character":21,"line":4569},"start":{"character":4,"line":4569}},"selectionRange":{"end":{"character":21,"line":4569},"start":{"character":15,"line":4569}}}],"detail":"template struct","kind":23,"name":"SwigPySequence_Ref","range":{"end":{"character":3,"line":4570},"start":{"character":2,"line":4537}},"selectionRange":{"end":{"character":27,"line":4537},"start":{"character":9,"line":4537}}},{"children":[{"detail":"(const T &)","kind":9,"name":"SwigPySequence_ArrowProxy","range":{"end":{"character":56,"line":4575},"start":{"character":4,"line":4575}},"selectionRange":{"end":{"character":29,"line":4575},"start":{"character":4,"line":4575}}},{"detail":"const T *() const","kind":6,"name":"operator->","range":{"end":{"character":52,"line":4576},"start":{"character":4,"line":4576}},"selectionRange":{"end":{"character":21,"line":4576},"start":{"character":13,"line":4576}}},{"detail":"const T *() const","kind":12,"name":"operator const type-parameter-0-0 *","range":{"end":{"character":50,"line":4577},"start":{"character":4,"line":4577}},"selectionRange":{"end":{"character":12,"line":4577},"start":{"character":4,"line":4577}}},{"detail":"T","kind":8,"name":"m_value","range":{"end":{"character":13,"line":4578},"start":{"character":4,"line":4578}},"selectionRange":{"end":{"character":13,"line":4578},"start":{"character":6,"line":4578}}}],"detail":"template struct","kind":23,"name":"SwigPySequence_ArrowProxy","range":{"end":{"character":3,"line":4579},"start":{"character":2,"line":4573}},"selectionRange":{"end":{"character":34,"line":4573},"start":{"character":9,"line":4573}}},{"children":[{"detail":"type alias","kind":5,"name":"self","range":{"end":{"character":60,"line":4584},"start":{"character":4,"line":4584}},"selectionRange":{"end":{"character":60,"line":4584},"start":{"character":56,"line":4584}}},{"detail":"type alias","kind":5,"name":"iterator_category","range":{"end":{"character":61,"line":4586},"start":{"character":4,"line":4586}},"selectionRange":{"end":{"character":61,"line":4586},"start":{"character":44,"line":4586}}},{"detail":"type alias","kind":5,"name":"reference","range":{"end":{"character":31,"line":4587},"start":{"character":4,"line":4587}},"selectionRange":{"end":{"character":31,"line":4587},"start":{"character":22,"line":4587}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":24,"line":4588},"start":{"character":4,"line":4588}},"selectionRange":{"end":{"character":24,"line":4588},"start":{"character":14,"line":4588}}},{"detail":"type alias","kind":5,"name":"pointer","range":{"end":{"character":22,"line":4589},"start":{"character":4,"line":4589}},"selectionRange":{"end":{"character":22,"line":4589},"start":{"character":15,"line":4589}}},{"detail":"type alias","kind":5,"name":"difference_type","range":{"end":{"character":38,"line":4590},"start":{"character":4,"line":4590}},"selectionRange":{"end":{"character":38,"line":4590},"start":{"character":23,"line":4590}}},{"detail":"()","kind":9,"name":"SwigPySequence_InputIterator","range":{"end":{"character":5,"line":4594},"start":{"character":4,"line":4592}},"selectionRange":{"end":{"character":32,"line":4592},"start":{"character":4,"line":4592}}},{"detail":"(int *, int)","kind":9,"name":"SwigPySequence_InputIterator","range":{"end":{"character":5,"line":4599},"start":{"character":4,"line":4596}},"selectionRange":{"end":{"character":32,"line":4596},"start":{"character":4,"line":4596}}},{"detail":"reference () const","kind":6,"name":"operator*","range":{"end":{"character":5,"line":4604},"start":{"character":4,"line":4601}},"selectionRange":{"end":{"character":22,"line":4601},"start":{"character":14,"line":4601}}},{"detail":"SwigPySequence_ArrowProxy<T> () const","kind":6,"name":"operator->","range":{"end":{"character":5,"line":4609},"start":{"character":4,"line":4606}},"selectionRange":{"end":{"character":12,"line":4607},"start":{"character":4,"line":4607}}},{"detail":"bool (const self &) const","kind":6,"name":"operator==","range":{"end":{"character":5,"line":4614},"start":{"character":4,"line":4611}},"selectionRange":{"end":{"character":17,"line":4611},"start":{"character":9,"line":4611}}},{"detail":"bool (const self &) const","kind":6,"name":"operator!=","range":{"end":{"character":5,"line":4619},"start":{"character":4,"line":4616}},"selectionRange":{"end":{"character":17,"line":4616},"start":{"character":9,"line":4616}}},{"detail":"self &()","kind":6,"name":"operator++","range":{"end":{"character":5,"line":4625},"start":{"character":4,"line":4621}},"selectionRange":{"end":{"character":18,"line":4621},"start":{"character":10,"line":4621}}},{"detail":"self &()","kind":6,"name":"operator--","range":{"end":{"character":5,"line":4631},"start":{"character":4,"line":4627}},"selectionRange":{"end":{"character":18,"line":4627},"start":{"character":10,"line":4627}}},{"detail":"self &(difference_type)","kind":6,"name":"operator+=","range":{"end":{"character":5,"line":4637},"start":{"character":4,"line":4633}},"selectionRange":{"end":{"character":18,"line":4633},"start":{"character":10,"line":4633}}},{"detail":"self (difference_type) const","kind":6,"name":"operator+","range":{"end":{"character":5,"line":4642},"start":{"character":4,"line":4639}},"selectionRange":{"end":{"character":17,"line":4639},"start":{"character":9,"line":4639}}},{"detail":"self &(difference_type)","kind":6,"name":"operator-=","range":{"end":{"character":5,"line":4648},"start":{"character":4,"line":4644}},"selectionRange":{"end":{"character":18,"line":4644},"start":{"character":10,"line":4644}}},{"detail":"self (difference_type) const","kind":6,"name":"operator-","range":{"end":{"character":5,"line":4653},"start":{"character":4,"line":4650}},"selectionRange":{"end":{"character":17,"line":4650},"start":{"character":9,"line":4650}}},{"detail":"difference_type (const self &) const","kind":6,"name":"operator-","range":{"end":{"character":5,"line":4658},"start":{"character":4,"line":4655}},"selectionRange":{"end":{"character":28,"line":4655},"start":{"character":20,"line":4655}}},{"detail":"bool (const self &) const","kind":6,"name":"operator<","range":{"end":{"character":5,"line":4663},"start":{"character":4,"line":4660}},"selectionRange":{"end":{"character":17,"line":4660},"start":{"character":9,"line":4660}}},{"detail":"reference (difference_type) const","kind":6,"name":"operator[]","range":{"end":{"character":5,"line":4669},"start":{"character":4,"line":4665}},"selectionRange":{"end":{"character":12,"line":4666},"start":{"character":4,"line":4666}}},{"detail":"int *","kind":8,"name":"_seq","range":{"end":{"character":18,"line":4672},"start":{"character":4,"line":4672}},"selectionRange":{"end":{"character":18,"line":4672},"start":{"character":14,"line":4672}}},{"detail":"difference_type","kind":8,"name":"_index","range":{"end":{"character":26,"line":4673},"start":{"character":4,"line":4673}},"selectionRange":{"end":{"character":26,"line":4673},"start":{"character":20,"line":4673}}}],"detail":"template struct","kind":23,"name":"SwigPySequence_InputIterator","range":{"end":{"character":3,"line":4674},"start":{"character":2,"line":4582}},"selectionRange":{"end":{"character":37,"line":4582},"start":{"character":9,"line":4582}}},{"children":[{"detail":"type alias","kind":5,"name":"reference","range":{"end":{"character":43,"line":4680},"start":{"character":4,"line":4680}},"selectionRange":{"end":{"character":43,"line":4680},"start":{"character":34,"line":4680}}},{"detail":"type alias","kind":5,"name":"const_reference","range":{"end":{"character":55,"line":4681},"start":{"character":4,"line":4681}},"selectionRange":{"end":{"character":55,"line":4681},"start":{"character":40,"line":4681}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":24,"line":4682},"start":{"character":4,"line":4682}},"selectionRange":{"end":{"character":24,"line":4682},"start":{"character":14,"line":4682}}},{"detail":"type alias","kind":5,"name":"pointer","range":{"end":{"character":22,"line":4683},"start":{"character":4,"line":4683}},"selectionRange":{"end":{"character":22,"line":4683},"start":{"character":15,"line":4683}}},{"detail":"type alias","kind":5,"name":"difference_type","range":{"end":{"character":38,"line":4684},"start":{"character":4,"line":4684}},"selectionRange":{"end":{"character":38,"line":4684},"start":{"character":23,"line":4684}}},{"detail":"type alias","kind":5,"name":"size_type","range":{"end":{"character":28,"line":4685},"start":{"character":4,"line":4685}},"selectionRange":{"end":{"character":28,"line":4685},"start":{"character":19,"line":4685}}},{"detail":"type alias","kind":5,"name":"const_pointer","range":{"end":{"character":39,"line":4686},"start":{"character":4,"line":4686}},"selectionRange":{"end":{"character":39,"line":4686},"start":{"character":26,"line":4686}}},{"detail":"type alias","kind":5,"name":"iterator","range":{"end":{"character":63,"line":4687},"start":{"character":4,"line":4687}},"selectionRange":{"end":{"character":63,"line":4687},"start":{"character":55,"line":4687}}},{"detail":"type alias","kind":5,"name":"const_iterator","range":{"end":{"character":75,"line":4688},"start":{"character":4,"line":4688}},"selectionRange":{"end":{"character":75,"line":4688},"start":{"character":61,"line":4688}}},{"detail":"(int *)","kind":9,"name":"SwigPySequence_Cont","range":{"end":{"character":5,"line":4697},"start":{"character":4,"line":4690}},"selectionRange":{"end":{"character":23,"line":4690},"start":{"character":4,"line":4690}}},{"kind":9,"name":"~SwigPySequence_Cont","range":{"end":{"character":5,"line":4702},"start":{"character":4,"line":4699}},"selectionRange":{"end":{"character":5,"line":4699},"start":{"character":4,"line":4699}}},{"detail":"size_type () const","kind":6,"name":"size","range":{"end":{"character":5,"line":4707},"start":{"character":4,"line":4704}},"selectionRange":{"end":{"character":18,"line":4704},"start":{"character":14,"line":4704}}},{"detail":"bool () const","kind":6,"name":"empty","range":{"end":{"character":5,"line":4712},"start":{"character":4,"line":4709}},"selectionRange":{"end":{"character":14,"line":4709},"start":{"character":9,"line":4709}}},{"detail":"iterator ()","kind":6,"name":"begin","range":{"end":{"character":5,"line":4717},"start":{"character":4,"line":4714}},"selectionRange":{"end":{"character":18,"line":4714},"start":{"character":13,"line":4714}}},{"detail":"const_iterator () const","kind":6,"name":"begin","range":{"end":{"character":5,"line":4722},"start":{"character":4,"line":4719}},"selectionRange":{"end":{"character":24,"line":4719},"start":{"character":19,"line":4719}}},{"detail":"iterator ()","kind":6,"name":"end","range":{"end":{"character":5,"line":4727},"start":{"character":4,"line":4724}},"selectionRange":{"end":{"character":16,"line":4724},"start":{"character":13,"line":4724}}},{"detail":"const_iterator () const","kind":6,"name":"end","range":{"end":{"character":5,"line":4732},"start":{"character":4,"line":4729}},"selectionRange":{"end":{"character":22,"line":4729},"start":{"character":19,"line":4729}}},{"detail":"reference (difference_type)","kind":6,"name":"operator[]","range":{"end":{"character":5,"line":4737},"start":{"character":4,"line":4734}},"selectionRange":{"end":{"character":22,"line":4734},"start":{"character":14,"line":4734}}},{"detail":"const_reference (difference_type) const","kind":6,"name":"operator[]","range":{"end":{"character":5,"line":4742},"start":{"character":4,"line":4739}},"selectionRange":{"end":{"character":28,"line":4739},"start":{"character":20,"line":4739}}},{"detail":"bool () const","kind":6,"name":"check","range":{"end":{"character":5,"line":4753},"start":{"character":4,"line":4744}},"selectionRange":{"end":{"character":14,"line":4744},"start":{"character":9,"line":4744}}},{"detail":"int *","kind":8,"name":"_seq","range":{"end":{"character":18,"line":4756},"start":{"character":4,"line":4756}},"selectionRange":{"end":{"character":18,"line":4756},"start":{"character":14,"line":4756}}}],"detail":"template struct","kind":23,"name":"SwigPySequence_Cont","range":{"end":{"character":3,"line":4757},"start":{"character":2,"line":4678}},"selectionRange":{"end":{"character":28,"line":4678},"start":{"character":9,"line":4678}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":4759},"start":{"character":0,"line":4534}},"selectionRange":{"end":{"character":14,"line":4534},"start":{"character":10,"line":4534}}},{"children":[{"children":[{"detail":"type alias","kind":5,"name":"category","range":{"end":{"character":35,"line":4767},"start":{"character":4,"line":4767}},"selectionRange":{"end":{"character":35,"line":4767},"start":{"character":27,"line":4767}}},{"detail":"const char *()","kind":6,"name":"type_name","range":{"end":{"character":54,"line":4768},"start":{"character":4,"line":4768}},"selectionRange":{"end":{"character":32,"line":4768},"start":{"character":23,"line":4768}}}],"detail":"struct","kind":23,"name":"traits<double>","range":{"end":{"character":3,"line":4769},"start":{"character":2,"line":4766}},"selectionRange":{"end":{"character":27,"line":4766},"start":{"character":21,"line":4766}}},{"children":[{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":29,"line":4771},"start":{"character":4,"line":4771}},"selectionRange":{"end":{"character":29,"line":4771},"start":{"character":19,"line":4771}}},{"detail":"int (int *, value_type *)","kind":6,"name":"asval","range":{"end":{"character":5,"line":4774},"start":{"character":4,"line":4772}},"selectionRange":{"end":{"character":20,"line":4772},"start":{"character":15,"line":4772}}}],"detail":"struct","kind":23,"name":"traits_asval<double>","range":{"end":{"character":3,"line":4775},"start":{"character":2,"line":4770}},"selectionRange":{"end":{"character":34,"line":4770},"start":{"character":22,"line":4770}}},{"children":[{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":29,"line":4777},"start":{"character":4,"line":4777}},"selectionRange":{"end":{"character":29,"line":4777},"start":{"character":19,"line":4777}}},{"detail":"int *(const value_type &)","kind":6,"name":"from","range":{"end":{"character":5,"line":4780},"start":{"character":4,"line":4778}},"selectionRange":{"end":{"character":25,"line":4778},"start":{"character":21,"line":4778}}}],"detail":"struct","kind":23,"name":"traits_from<double>","range":{"end":{"character":3,"line":4781},"start":{"character":2,"line":4776}},"selectionRange":{"end":{"character":33,"line":4776},"start":{"character":22,"line":4776}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":4782},"start":{"character":0,"line":4765}},"selectionRange":{"end":{"character":14,"line":4765},"start":{"character":10,"line":4765}}},{"children":[{"detail":"template void (const SwigPySeq &, Seq *)","kind":12,"name":"assign","range":{"end":{"character":3,"line":4795},"start":{"character":2,"line":4787}},"selectionRange":{"end":{"character":8,"line":4788},"start":{"character":2,"line":4788}}},{"children":[{"detail":"type alias","kind":5,"name":"sequence","range":{"end":{"character":24,"line":4799},"start":{"character":4,"line":4799}},"selectionRange":{"end":{"character":24,"line":4799},"start":{"character":16,"line":4799}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":24,"line":4800},"start":{"character":4,"line":4800}},"selectionRange":{"end":{"character":24,"line":4800},"start":{"character":14,"line":4800}}},{"detail":"int (int *, sequence **)","kind":6,"name":"asptr","range":{"end":{"character":5,"line":4831},"start":{"character":4,"line":4802}},"selectionRange":{"end":{"character":20,"line":4802},"start":{"character":15,"line":4802}}}],"detail":"template struct","kind":23,"name":"traits_asptr_stdseq","range":{"end":{"character":3,"line":4832},"start":{"character":2,"line":4798}},"selectionRange":{"end":{"character":28,"line":4798},"start":{"character":9,"line":4798}}},{"children":[{"detail":"type alias","kind":5,"name":"sequence","range":{"end":{"character":24,"line":4836},"start":{"character":4,"line":4836}},"selectionRange":{"end":{"character":24,"line":4836},"start":{"character":16,"line":4836}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":24,"line":4837},"start":{"character":4,"line":4837}},"selectionRange":{"end":{"character":24,"line":4837},"start":{"character":14,"line":4837}}},{"detail":"type alias","kind":5,"name":"size_type","range":{"end":{"character":45,"line":4838},"start":{"character":4,"line":4838}},"selectionRange":{"end":{"character":45,"line":4838},"start":{"character":36,"line":4838}}},{"detail":"type alias","kind":5,"name":"const_iterator","range":{"end":{"character":60,"line":4839},"start":{"character":4,"line":4839}},"selectionRange":{"end":{"character":60,"line":4839},"start":{"character":46,"line":4839}}},{"detail":"int *(const sequence &)","kind":6,"name":"from","range":{"end":{"character":5,"line":4860},"start":{"character":4,"line":4841}},"selectionRange":{"end":{"character":25,"line":4841},"start":{"character":21,"line":4841}}}],"detail":"template struct","kind":23,"name":"traits_from_stdseq","range":{"end":{"character":3,"line":4861},"start":{"character":2,"line":4835}},"selectionRange":{"end":{"character":27,"line":4835},"start":{"character":9,"line":4835}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":4862},"start":{"character":0,"line":4785}},"selectionRange":{"end":{"character":14,"line":4785},"start":{"character":10,"line":4785}}},{"kind":3,"name":"swig","range":{"end":{"character":3,"line":4886},"start":{"character":2,"line":4865}},"selectionRange":{"end":{"character":16,"line":4865},"start":{"character":12,"line":4865}}},{"children":[{"children":[{"detail":"type alias","kind":5,"name":"category","range":{"end":{"character":36,"line":4891},"start":{"character":3,"line":4891}},"selectionRange":{"end":{"character":36,"line":4891},"start":{"character":28,"line":4891}}},{"detail":"const char *()","kind":6,"name":"type_name","range":{"end":{"character":4,"line":4894},"start":{"character":3,"line":4892}},"selectionRange":{"end":{"character":31,"line":4892},"start":{"character":22,"line":4892}}}],"detail":"struct","kind":23,"name":"traits<std::vector<double, std::allocator<double>>>","range":{"end":{"character":2,"line":4895},"start":{"character":1,"line":4890}},"selectionRange":{"end":{"character":27,"line":4890},"start":{"character":21,"line":4890}}}],"kind":3,"name":"swig","range":{"end":{"character":7,"line":4896},"start":{"character":6,"line":4889}},"selectionRange":{"end":{"character":20,"line":4889},"start":{"character":16,"line":4889}}},{"detail":"swig::SwigPyIterator *(int *, int **)","kind":12,"name":"std_vector_Sl_double_Sg__iterator","range":{"end":{"character":5,"line":4900},"start":{"character":0,"line":4898}},"selectionRange":{"end":{"character":66,"line":4898},"start":{"character":33,"line":4898}}},{"detail":"bool (const int *)","kind":12,"name":"std_vector_Sl_double_Sg____nonzero__","range":{"end":{"character":5,"line":4903},"start":{"character":0,"line":4901}},"selectionRange":{"end":{"character":52,"line":4901},"start":{"character":16,"line":4901}}},{"detail":"bool (const int *)","kind":12,"name":"std_vector_Sl_double_Sg____bool__","range":{"end":{"character":5,"line":4906},"start":{"character":0,"line":4904}},"selectionRange":{"end":{"character":49,"line":4904},"start":{"character":16,"line":4904}}},{"detail":"int (const int *)","kind":12,"name":"std_vector_Sl_double_Sg____len__","range":{"end":{"character":5,"line":4909},"start":{"character":0,"line":4907}},"selectionRange":{"end":{"character":76,"line":4907},"start":{"character":44,"line":4907}}},{"detail":"int *(unsigned long)","kind":12,"name":"SWIG_From_unsigned_SS_long","range":{"end":{"character":1,"line":4916},"start":{"character":0,"line":4911}},"selectionRange":{"end":{"character":26,"line":4912},"start":{"character":0,"line":4912}}},{"detail":"int *(unsigned long long)","kind":12,"name":"SWIG_From_unsigned_SS_long_SS_long","range":{"end":{"character":1,"line":4925},"start":{"character":0,"line":4920}},"selectionRange":{"end":{"character":34,"line":4921},"start":{"character":0,"line":4921}}},{"detail":"int *(size_t)","kind":12,"name":"SWIG_From_size_t","range":{"end":{"character":1,"line":4942},"start":{"character":0,"line":4929}},"selectionRange":{"end":{"character":16,"line":4930},"start":{"character":0,"line":4930}}},{"detail":"std::vector<double, std::allocator<double>> *(int *, int, int)","kind":12,"name":"std_vector_Sl_double_Sg____getslice__","range":{"end":{"character":5,"line":4946},"start":{"character":0,"line":4944}},"selectionRange":{"end":{"character":96,"line":4944},"start":{"character":59,"line":4944}}},{"detail":"void (int *, int, int)","kind":12,"name":"std_vector_Sl_double_Sg____setslice____SWIG_0","range":{"end":{"character":5,"line":4949},"start":{"character":0,"line":4947}},"selectionRange":{"end":{"character":61,"line":4947},"start":{"character":16,"line":4947}}},{"detail":"void (int *, int, int, const std::vector<double, std::allocator<double>> &)","kind":12,"name":"std_vector_Sl_double_Sg____setslice____SWIG_1","range":{"end":{"character":5,"line":4952},"start":{"character":0,"line":4950}},"selectionRange":{"end":{"character":61,"line":4950},"start":{"character":16,"line":4950}}},{"detail":"void (int *, int, int)","kind":12,"name":"std_vector_Sl_double_Sg____delslice__","range":{"end":{"character":5,"line":4955},"start":{"character":0,"line":4953}},"selectionRange":{"end":{"character":53,"line":4953},"start":{"character":16,"line":4953}}},{"detail":"void (int *, int)","kind":12,"name":"std_vector_Sl_double_Sg____delitem____SWIG_0","range":{"end":{"character":5,"line":4958},"start":{"character":0,"line":4956}},"selectionRange":{"end":{"character":60,"line":4956},"start":{"character":16,"line":4956}}},{"detail":"std::vector<double, std::allocator<double>> *(int *, int *)","kind":12,"name":"std_vector_Sl_double_Sg____getitem____SWIG_0","range":{"end":{"character":5,"line":4969},"start":{"character":0,"line":4959}},"selectionRange":{"end":{"character":103,"line":4959},"start":{"character":59,"line":4959}}},{"detail":"void (int *, int *, const std::vector<double, std::allocator<double>> &)","kind":12,"name":"std_vector_Sl_double_Sg____setitem____SWIG_0","range":{"end":{"character":5,"line":4980},"start":{"character":0,"line":4970}},"selectionRange":{"end":{"character":60,"line":4970},"start":{"character":16,"line":4970}}},{"detail":"void (int *, int *)","kind":12,"name":"std_vector_Sl_double_Sg____setitem____SWIG_1","range":{"end":{"character":5,"line":4991},"start":{"character":0,"line":4981}},"selectionRange":{"end":{"character":60,"line":4981},"start":{"character":16,"line":4981}}},{"detail":"void (int *, int *)","kind":12,"name":"std_vector_Sl_double_Sg____delitem____SWIG_1","range":{"end":{"character":5,"line":5002},"start":{"character":0,"line":4992}},"selectionRange":{"end":{"character":60,"line":4992},"start":{"character":16,"line":4992}}},{"detail":"const int &(const int *, int)","kind":12,"name":"std_vector_Sl_double_Sg____getitem____SWIG_1","range":{"end":{"character":5,"line":5005},"start":{"character":0,"line":5003}},"selectionRange":{"end":{"character":96,"line":5003},"start":{"character":52,"line":5003}}},{"children":[{"detail":"int *()","kind":12,"name":"container_owner_attribute","range":{"end":{"character":3,"line":5011},"start":{"character":2,"line":5008}},"selectionRange":{"end":{"character":44,"line":5008},"start":{"character":19,"line":5008}}},{"children":[{"detail":"bool (int *, int *)","kind":6,"name":"back_reference","range":{"end":{"character":5,"line":5019},"start":{"character":4,"line":5017}},"selectionRange":{"end":{"character":30,"line":5017},"start":{"character":16,"line":5017}}}],"detail":"template struct","kind":23,"name":"container_owner","range":{"end":{"character":3,"line":5020},"start":{"character":2,"line":5014}},"selectionRange":{"end":{"character":24,"line":5014},"start":{"character":9,"line":5014}}},{"children":[{"detail":"bool (int *, int *)","kind":6,"name":"back_reference","range":{"end":{"character":5,"line":5037},"start":{"character":4,"line":5031}},"selectionRange":{"end":{"character":30,"line":5031},"start":{"character":16,"line":5031}}}],"detail":"struct","kind":23,"name":"container_owner<swig::pointer_category>","range":{"end":{"character":3,"line":5038},"start":{"character":2,"line":5022}},"selectionRange":{"end":{"character":24,"line":5023},"start":{"character":9,"line":5023}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":5039},"start":{"character":0,"line":5007}},"selectionRange":{"end":{"character":14,"line":5007},"start":{"character":10,"line":5007}}},{"detail":"void (int *, int, const int &)","kind":12,"name":"std_vector_Sl_double_Sg____setitem____SWIG_2","range":{"end":{"character":5,"line":5043},"start":{"character":0,"line":5041}},"selectionRange":{"end":{"character":60,"line":5041},"start":{"character":16,"line":5041}}},{"detail":"int (int *)","kind":12,"name":"std_vector_Sl_double_Sg__pop","range":{"end":{"character":5,"line":5050},"start":{"character":0,"line":5044}},"selectionRange":{"end":{"character":73,"line":5044},"start":{"character":45,"line":5044}}},{"detail":"void (int *, const int &)","kind":12,"name":"std_vector_Sl_double_Sg__append","range":{"end":{"character":5,"line":5053},"start":{"character":0,"line":5051}},"selectionRange":{"end":{"character":47,"line":5051},"start":{"character":16,"line":5051}}},{"detail":"int (int *, int)","kind":12,"name":"std_vector_Sl_double_Sg__erase__SWIG_0","range":{"end":{"character":174,"line":5054},"start":{"character":0,"line":5054}},"selectionRange":{"end":{"character":81,"line":5054},"start":{"character":43,"line":5054}}},{"detail":"int (int *, int, int)","kind":12,"name":"std_vector_Sl_double_Sg__erase__SWIG_1","range":{"end":{"character":221,"line":5055},"start":{"character":0,"line":5055}},"selectionRange":{"end":{"character":81,"line":5055},"start":{"character":43,"line":5055}}},{"detail":"int (int *, int, const int &)","kind":12,"name":"std_vector_Sl_double_Sg__insert__SWIG_0","range":{"end":{"character":222,"line":5056},"start":{"character":0,"line":5056}},"selectionRange":{"end":{"character":82,"line":5056},"start":{"character":43,"line":5056}}},{"detail":"void (int *, int, int, const int &)","kind":12,"name":"std_vector_Sl_double_Sg__insert__SWIG_1","range":{"end":{"character":226,"line":5057},"start":{"character":0,"line":5057}},"selectionRange":{"end":{"character":55,"line":5057},"start":{"character":16,"line":5057}}},{"detail":"int *(int)","kind":12,"name":"SWIG_From_int","range":{"end":{"character":1,"line":5063},"start":{"character":0,"line":5059}},"selectionRange":{"end":{"character":15,"line":5060},"start":{"character":2,"line":5060}}},{"detail":"int (int *, int *)","kind":12,"name":"SWIG_AsVal_int","range":{"end":{"character":1,"line":5079},"start":{"character":0,"line":5066}},"selectionRange":{"end":{"character":14,"line":5067},"start":{"character":0,"line":5067}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_delete_SwigPyIterator","range":{"end":{"character":1,"line":5103},"start":{"character":0,"line":5084}},"selectionRange":{"end":{"character":48,"line":5084},"start":{"character":21,"line":5084}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_value","range":{"end":{"character":1,"line":5134},"start":{"character":0,"line":5106}},"selectionRange":{"end":{"character":47,"line":5106},"start":{"character":21,"line":5106}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_SwigPyIterator_incr__SWIG_0","range":{"end":{"character":1,"line":5171},"start":{"character":0,"line":5137}},"selectionRange":{"end":{"character":54,"line":5137},"start":{"character":21,"line":5137}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_SwigPyIterator_incr__SWIG_1","range":{"end":{"character":1,"line":5200},"start":{"character":0,"line":5174}},"selectionRange":{"end":{"character":54,"line":5174},"start":{"character":21,"line":5174}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_incr","range":{"end":{"character":1,"line":5242},"start":{"character":0,"line":5203}},"selectionRange":{"end":{"character":46,"line":5203},"start":{"character":21,"line":5203}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_SwigPyIterator_decr__SWIG_0","range":{"end":{"character":1,"line":5279},"start":{"character":0,"line":5245}},"selectionRange":{"end":{"character":54,"line":5245},"start":{"character":21,"line":5245}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_SwigPyIterator_decr__SWIG_1","range":{"end":{"character":1,"line":5308},"start":{"character":0,"line":5282}},"selectionRange":{"end":{"character":54,"line":5282},"start":{"character":21,"line":5282}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_decr","range":{"end":{"character":1,"line":5350},"start":{"character":0,"line":5311}},"selectionRange":{"end":{"character":46,"line":5311},"start":{"character":21,"line":5311}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_distance","range":{"end":{"character":1,"line":5387},"start":{"character":0,"line":5353}},"selectionRange":{"end":{"character":50,"line":5353},"start":{"character":21,"line":5353}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_equal","range":{"end":{"character":1,"line":5424},"start":{"character":0,"line":5390}},"selectionRange":{"end":{"character":47,"line":5390},"start":{"character":21,"line":5390}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_copy","range":{"end":{"character":1,"line":5447},"start":{"character":0,"line":5427}},"selectionRange":{"end":{"character":46,"line":5427},"start":{"character":21,"line":5427}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_next","range":{"end":{"character":1,"line":5478},"start":{"character":0,"line":5450}},"selectionRange":{"end":{"character":46,"line":5450},"start":{"character":21,"line":5450}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator___next__","range":{"end":{"character":1,"line":5509},"start":{"character":0,"line":5481}},"selectionRange":{"end":{"character":50,"line":5481},"start":{"character":21,"line":5481}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_previous","range":{"end":{"character":1,"line":5540},"start":{"character":0,"line":5512}},"selectionRange":{"end":{"character":50,"line":5512},"start":{"character":21,"line":5512}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_advance","range":{"end":{"character":1,"line":5578},"start":{"character":0,"line":5543}},"selectionRange":{"end":{"character":49,"line":5543},"start":{"character":21,"line":5543}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator___eq__","range":{"end":{"character":1,"line":5613},"start":{"character":0,"line":5581}},"selectionRange":{"end":{"character":48,"line":5581},"start":{"character":21,"line":5581}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator___ne__","range":{"end":{"character":1,"line":5648},"start":{"character":0,"line":5616}},"selectionRange":{"end":{"character":48,"line":5616},"start":{"character":21,"line":5616}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator___iadd__","range":{"end":{"character":1,"line":5686},"start":{"character":0,"line":5651}},"selectionRange":{"end":{"character":50,"line":5651},"start":{"character":21,"line":5651}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator___isub__","range":{"end":{"character":1,"line":5724},"start":{"character":0,"line":5689}},"selectionRange":{"end":{"character":50,"line":5689},"start":{"character":21,"line":5689}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator___add__","range":{"end":{"character":1,"line":5764},"start":{"character":0,"line":5727}},"selectionRange":{"end":{"character":49,"line":5727},"start":{"character":21,"line":5727}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_SwigPyIterator___sub____SWIG_0","range":{"end":{"character":1,"line":5803},"start":{"character":0,"line":5767}},"selectionRange":{"end":{"character":57,"line":5767},"start":{"character":21,"line":5767}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_SwigPyIterator___sub____SWIG_1","range":{"end":{"character":1,"line":5837},"start":{"character":0,"line":5806}},"selectionRange":{"end":{"character":57,"line":5806},"start":{"character":21,"line":5806}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator___sub__","range":{"end":{"character":1,"line":5880},"start":{"character":0,"line":5840}},"selectionRange":{"end":{"character":49,"line":5840},"start":{"character":21,"line":5840}}},{"detail":"int *(int *, int *)","kind":12,"name":"SwigPyIterator_swigregister","range":{"end":{"character":1,"line":5888},"start":{"character":0,"line":5883}},"selectionRange":{"end":{"character":48,"line":5883},"start":{"character":21,"line":5883}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_iterator","range":{"end":{"character":1,"line":5912},"start":{"character":0,"line":5890}},"selectionRange":{"end":{"character":48,"line":5890},"start":{"character":21,"line":5890}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___nonzero__","range":{"end":{"character":1,"line":5935},"start":{"character":0,"line":5915}},"selectionRange":{"end":{"character":51,"line":5915},"start":{"character":21,"line":5915}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___bool__","range":{"end":{"character":1,"line":5958},"start":{"character":0,"line":5938}},"selectionRange":{"end":{"character":48,"line":5938},"start":{"character":21,"line":5938}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___len__","range":{"end":{"character":1,"line":5981},"start":{"character":0,"line":5961}},"selectionRange":{"end":{"character":47,"line":5961},"start":{"character":21,"line":5961}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___getslice__","range":{"end":{"character":1,"line":6025},"start":{"character":0,"line":5984}},"selectionRange":{"end":{"character":52,"line":5984},"start":{"character":21,"line":5984}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___setslice____SWIG_0","range":{"end":{"character":1,"line":6067},"start":{"character":0,"line":6028}},"selectionRange":{"end":{"character":60,"line":6028},"start":{"character":21,"line":6028}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___setslice____SWIG_1","range":{"end":{"character":1,"line":6124},"start":{"character":0,"line":6070}},"selectionRange":{"end":{"character":60,"line":6070},"start":{"character":21,"line":6070}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___setslice__","range":{"end":{"character":1,"line":6186},"start":{"character":0,"line":6127}},"selectionRange":{"end":{"character":52,"line":6127},"start":{"character":21,"line":6127}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___delslice__","range":{"end":{"character":1,"line":6229},"start":{"character":0,"line":6189}},"selectionRange":{"end":{"character":52,"line":6189},"start":{"character":21,"line":6189}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___delitem____SWIG_0","range":{"end":{"character":1,"line":6263},"start":{"character":0,"line":6232}},"selectionRange":{"end":{"character":59,"line":6232},"start":{"character":21,"line":6232}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___getitem____SWIG_0","range":{"end":{"character":1,"line":6297},"start":{"character":0,"line":6266}},"selectionRange":{"end":{"character":59,"line":6266},"start":{"character":21,"line":6266}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___setitem____SWIG_0","range":{"end":{"character":1,"line":6345},"start":{"character":0,"line":6300}},"selectionRange":{"end":{"character":59,"line":6300},"start":{"character":21,"line":6300}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___setitem____SWIG_1","range":{"end":{"character":1,"line":6378},"start":{"character":0,"line":6348}},"selectionRange":{"end":{"character":59,"line":6348},"start":{"character":21,"line":6348}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___delitem____SWIG_1","range":{"end":{"character":1,"line":6411},"start":{"character":0,"line":6381}},"selectionRange":{"end":{"character":59,"line":6381},"start":{"character":21,"line":6381}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___delitem__","range":{"end":{"character":1,"line":6456},"start":{"character":0,"line":6414}},"selectionRange":{"end":{"character":51,"line":6414},"start":{"character":21,"line":6414}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___getitem____SWIG_1","range":{"end":{"character":1,"line":6490},"start":{"character":0,"line":6459}},"selectionRange":{"end":{"character":59,"line":6459},"start":{"character":21,"line":6459}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___getitem__","range":{"end":{"character":1,"line":6535},"start":{"character":0,"line":6493}},"selectionRange":{"end":{"character":51,"line":6493},"start":{"character":21,"line":6493}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___setitem____SWIG_2","range":{"end":{"character":1,"line":6577},"start":{"character":0,"line":6538}},"selectionRange":{"end":{"character":59,"line":6538},"start":{"character":21,"line":6538}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___setitem__","range":{"end":{"character":1,"line":6646},"start":{"character":0,"line":6580}},"selectionRange":{"end":{"character":51,"line":6580},"start":{"character":21,"line":6580}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_pop","range":{"end":{"character":1,"line":6673},"start":{"character":0,"line":6649}},"selectionRange":{"end":{"character":43,"line":6649},"start":{"character":21,"line":6649}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_append","range":{"end":{"character":1,"line":6704},"start":{"character":0,"line":6676}},"selectionRange":{"end":{"character":46,"line":6676},"start":{"character":21,"line":6676}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_new_DoubleVector__SWIG_0","range":{"end":{"character":1,"line":6717},"start":{"character":0,"line":6707}},"selectionRange":{"end":{"character":51,"line":6707},"start":{"character":21,"line":6707}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_new_DoubleVector__SWIG_1","range":{"end":{"character":1,"line":6745},"start":{"character":0,"line":6720}},"selectionRange":{"end":{"character":51,"line":6720},"start":{"character":21,"line":6720}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_empty","range":{"end":{"character":1,"line":6768},"start":{"character":0,"line":6748}},"selectionRange":{"end":{"character":45,"line":6748},"start":{"character":21,"line":6748}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_size","range":{"end":{"character":1,"line":6791},"start":{"character":0,"line":6771}},"selectionRange":{"end":{"character":44,"line":6771},"start":{"character":21,"line":6771}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_swap","range":{"end":{"character":1,"line":6823},"start":{"character":0,"line":6794}},"selectionRange":{"end":{"character":44,"line":6794},"start":{"character":21,"line":6794}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_begin","range":{"end":{"character":1,"line":6847},"start":{"character":0,"line":6826}},"selectionRange":{"end":{"character":45,"line":6826},"start":{"character":21,"line":6826}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_end","range":{"end":{"character":1,"line":6871},"start":{"character":0,"line":6850}},"selectionRange":{"end":{"character":43,"line":6850},"start":{"character":21,"line":6850}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_rbegin","range":{"end":{"character":1,"line":6895},"start":{"character":0,"line":6874}},"selectionRange":{"end":{"character":46,"line":6874},"start":{"character":21,"line":6874}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_rend","range":{"end":{"character":1,"line":6919},"start":{"character":0,"line":6898}},"selectionRange":{"end":{"character":44,"line":6898},"start":{"character":21,"line":6898}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_clear","range":{"end":{"character":1,"line":6941},"start":{"character":0,"line":6922}},"selectionRange":{"end":{"character":45,"line":6922},"start":{"character":21,"line":6922}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_get_allocator","range":{"end":{"character":1,"line":6964},"start":{"character":0,"line":6944}},"selectionRange":{"end":{"character":53,"line":6944},"start":{"character":21,"line":6944}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_new_DoubleVector__SWIG_2","range":{"end":{"character":1,"line":6985},"start":{"character":0,"line":6967}},"selectionRange":{"end":{"character":51,"line":6967},"start":{"character":21,"line":6967}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_pop_back","range":{"end":{"character":1,"line":7007},"start":{"character":0,"line":6988}},"selectionRange":{"end":{"character":48,"line":6988},"start":{"character":21,"line":6988}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector_resize__SWIG_0","range":{"end":{"character":1,"line":7035},"start":{"character":0,"line":7010}},"selectionRange":{"end":{"character":54,"line":7010},"start":{"character":21,"line":7010}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector_erase__SWIG_0","range":{"end":{"character":1,"line":7071},"start":{"character":0,"line":7038}},"selectionRange":{"end":{"character":53,"line":7038},"start":{"character":21,"line":7038}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector_erase__SWIG_1","range":{"end":{"character":1,"line":7121},"start":{"character":0,"line":7074}},"selectionRange":{"end":{"character":53,"line":7074},"start":{"character":21,"line":7074}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_erase","range":{"end":{"character":1,"line":7170},"start":{"character":0,"line":7124}},"selectionRange":{"end":{"character":45,"line":7124},"start":{"character":21,"line":7124}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_new_DoubleVector__SWIG_3","range":{"end":{"character":1,"line":7201},"start":{"character":0,"line":7173}},"selectionRange":{"end":{"character":51,"line":7173},"start":{"character":21,"line":7173}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_new_DoubleVector","range":{"end":{"character":1,"line":7258},"start":{"character":0,"line":7204}},"selectionRange":{"end":{"character":43,"line":7204},"start":{"character":21,"line":7204}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_push_back","range":{"end":{"character":1,"line":7289},"start":{"character":0,"line":7261}},"selectionRange":{"end":{"character":49,"line":7261},"start":{"character":21,"line":7261}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_front","range":{"end":{"character":1,"line":7313},"start":{"character":0,"line":7292}},"selectionRange":{"end":{"character":45,"line":7292},"start":{"character":21,"line":7292}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_back","range":{"end":{"character":1,"line":7337},"start":{"character":0,"line":7316}},"selectionRange":{"end":{"character":44,"line":7316},"start":{"character":21,"line":7316}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_assign","range":{"end":{"character":1,"line":7376},"start":{"character":0,"line":7340}},"selectionRange":{"end":{"character":46,"line":7340},"start":{"character":21,"line":7340}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector_resize__SWIG_1","range":{"end":{"character":1,"line":7414},"start":{"character":0,"line":7379}},"selectionRange":{"end":{"character":54,"line":7379},"start":{"character":21,"line":7379}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_resize","range":{"end":{"character":1,"line":7466},"start":{"character":0,"line":7417}},"selectionRange":{"end":{"character":46,"line":7417},"start":{"character":21,"line":7417}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector_insert__SWIG_0","range":{"end":{"character":1,"line":7512},"start":{"character":0,"line":7469}},"selectionRange":{"end":{"character":54,"line":7469},"start":{"character":21,"line":7469}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector_insert__SWIG_1","range":{"end":{"character":1,"line":7564},"start":{"character":0,"line":7515}},"selectionRange":{"end":{"character":54,"line":7515},"start":{"character":21,"line":7515}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_insert","range":{"end":{"character":1,"line":7626},"start":{"character":0,"line":7567}},"selectionRange":{"end":{"character":46,"line":7567},"start":{"character":21,"line":7567}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_reserve","range":{"end":{"character":1,"line":7655},"start":{"character":0,"line":7629}},"selectionRange":{"end":{"character":47,"line":7629},"start":{"character":21,"line":7629}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_capacity","range":{"end":{"character":1,"line":7678},"start":{"character":0,"line":7658}},"selectionRange":{"end":{"character":48,"line":7658},"start":{"character":21,"line":7658}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_delete_DoubleVector","range":{"end":{"character":1,"line":7700},"start":{"character":0,"line":7681}},"selectionRange":{"end":{"character":46,"line":7681},"start":{"character":21,"line":7681}}},{"detail":"int *(int *, int *)","kind":12,"name":"DoubleVector_swigregister","range":{"end":{"character":1,"line":7708},"start":{"character":0,"line":7703}},"selectionRange":{"end":{"character":46,"line":7703},"start":{"character":21,"line":7703}}},{"detail":"int *(int *, int *)","kind":12,"name":"DoubleVector_swiginit","range":{"end":{"character":1,"line":7712},"start":{"character":0,"line":7710}},"selectionRange":{"end":{"character":42,"line":7710},"start":{"character":21,"line":7710}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_data_set","range":{"end":{"character":1,"line":7748},"start":{"character":0,"line":7714}},"selectionRange":{"end":{"character":61,"line":7714},"start":{"character":21,"line":7714}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_data_get","range":{"end":{"character":1,"line":7771},"start":{"character":0,"line":7751}},"selectionRange":{"end":{"character":61,"line":7751},"start":{"character":21,"line":7751}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_data_buffer_set","range":{"end":{"character":1,"line":7808},"start":{"character":0,"line":7774}},"selectionRange":{"end":{"character":68,"line":7774},"start":{"character":21,"line":7774}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_data_buffer_get","range":{"end":{"character":1,"line":7831},"start":{"character":0,"line":7811}},"selectionRange":{"end":{"character":68,"line":7811},"start":{"character":21,"line":7811}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_compute_buffer_set","range":{"end":{"character":1,"line":7868},"start":{"character":0,"line":7834}},"selectionRange":{"end":{"character":71,"line":7834},"start":{"character":21,"line":7834}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_compute_buffer_get","range":{"end":{"character":1,"line":7891},"start":{"character":0,"line":7871}},"selectionRange":{"end":{"character":71,"line":7871},"start":{"character":21,"line":7871}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_compute_buffer2_set","range":{"end":{"character":1,"line":7928},"start":{"character":0,"line":7894}},"selectionRange":{"end":{"character":72,"line":7894},"start":{"character":21,"line":7894}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_compute_buffer2_get","range":{"end":{"character":1,"line":7951},"start":{"character":0,"line":7931}},"selectionRange":{"end":{"character":72,"line":7931},"start":{"character":21,"line":7931}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_modes_set","range":{"end":{"character":1,"line":7980},"start":{"character":0,"line":7954}},"selectionRange":{"end":{"character":62,"line":7954},"start":{"character":21,"line":7954}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_modes_get","range":{"end":{"character":1,"line":8003},"start":{"character":0,"line":7983}},"selectionRange":{"end":{"character":62,"line":7983},"start":{"character":21,"line":7983}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_freqs_set","range":{"end":{"character":1,"line":8032},"start":{"character":0,"line":8006}},"selectionRange":{"end":{"character":67,"line":8006},"start":{"character":21,"line":8006}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_freqs_get","range":{"end":{"character":1,"line":8055},"start":{"character":0,"line":8035}},"selectionRange":{"end":{"character":67,"line":8035},"start":{"character":21,"line":8035}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_ampls_set","range":{"end":{"character":1,"line":8084},"start":{"character":0,"line":8058}},"selectionRange":{"end":{"character":67,"line":8058},"start":{"character":21,"line":8058}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_ampls_get","range":{"end":{"character":1,"line":8107},"start":{"character":0,"line":8087}},"selectionRange":{"end":{"character":67,"line":8087},"start":{"character":21,"line":8087}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_phases_set","range":{"end":{"character":1,"line":8136},"start":{"character":0,"line":8110}},"selectionRange":{"end":{"character":63,"line":8110},"start":{"character":21,"line":8110}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_phases_get","range":{"end":{"character":1,"line":8159},"start":{"character":0,"line":8139}},"selectionRange":{"end":{"character":63,"line":8139},"start":{"character":21,"line":8139}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_freq_conv_set","range":{"end":{"character":1,"line":8188},"start":{"character":0,"line":8162}},"selectionRange":{"end":{"character":66,"line":8162},"start":{"character":21,"line":8162}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_freq_conv_get","range":{"end":{"character":1,"line":8211},"start":{"character":0,"line":8191}},"selectionRange":{"end":{"character":66,"line":8191},"start":{"character":21,"line":8191}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_freq_conv_image_set","range":{"end":{"character":1,"line":8240},"start":{"character":0,"line":8214}},"selectionRange":{"end":{"character":72,"line":8214},"start":{"character":21,"line":8214}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_freq_conv_image_get","range":{"end":{"character":1,"line":8263},"start":{"character":0,"line":8243}},"selectionRange":{"end":{"character":72,"line":8243},"start":{"character":21,"line":8243}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_period_muller_set","range":{"end":{"character":1,"line":8292},"start":{"character":0,"line":8266}},"selectionRange":{"end":{"character":70,"line":8266},"start":{"character":21,"line":8266}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_period_muller_get","range":{"end":{"character":1,"line":8315},"start":{"character":0,"line":8295}},"selectionRange":{"end":{"character":70,"line":8295},"start":{"character":21,"line":8295}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_locality_coeff_set","range":{"end":{"character":1,"line":8344},"start":{"character":0,"line":8318}},"selectionRange":{"end":{"character":71,"line":8318},"start":{"character":21,"line":8318}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_locality_coeff_get","range":{"end":{"character":1,"line":8367},"start":{"character":0,"line":8347}},"selectionRange":{"end":{"character":71,"line":8347},"start":{"character":21,"line":8347}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_integrator_set","range":{"end":{"character":1,"line":8404},"start":{"character":0,"line":8370}},"selectionRange":{"end":{"character":67,"line":8370},"start":{"character":21,"line":8370}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_integrator_get","range":{"end":{"character":1,"line":8427},"start":{"character":0,"line":8407}},"selectionRange":{"end":{"character":67,"line":8407},"start":{"character":21,"line":8407}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_derivator_set","range":{"end":{"character":1,"line":8464},"start":{"character":0,"line":8430}},"selectionRange":{"end":{"character":66,"line":8430},"start":{"character":21,"line":8430}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_derivator_get","range":{"end":{"character":1,"line":8487},"start":{"character":0,"line":8467}},"selectionRange":{"end":{"character":66,"line":8467},"start":{"character":21,"line":8467}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_phase_computer_der_atan_set","range":{"end":{"character":1,"line":8524},"start":{"character":0,"line":8490}},"selectionRange":{"end":{"character":80,"line":8490},"start":{"character":21,"line":8490}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_phase_computer_der_atan_get","range":{"end":{"character":1,"line":8547},"start":{"character":0,"line":8527}},"selectionRange":{"end":{"character":80,"line":8527},"start":{"character":21,"line":8527}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_phase_computer_simple_set","range":{"end":{"character":1,"line":8584},"start":{"character":0,"line":8550}},"selectionRange":{"end":{"character":78,"line":8550},"start":{"character":21,"line":8550}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_phase_computer_simple_get","range":{"end":{"character":1,"line":8607},"start":{"character":0,"line":8587}},"selectionRange":{"end":{"character":78,"line":8587},"start":{"character":21,"line":8587}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_freq_computer_set","range":{"end":{"character":1,"line":8644},"start":{"character":0,"line":8610}},"selectionRange":{"end":{"character":75,"line":8610},"start":{"character":21,"line":8610}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_freq_computer_get","range":{"end":{"character":1,"line":8667},"start":{"character":0,"line":8647}},"selectionRange":{"end":{"character":75,"line":8647},"start":{"character":21,"line":8647}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_ampl_computer_set","range":{"end":{"character":1,"line":8704},"start":{"character":0,"line":8670}},"selectionRange":{"end":{"character":75,"line":8670},"start":{"character":21,"line":8670}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_ampl_computer_get","range":{"end":{"character":1,"line":8727},"start":{"character":0,"line":8707}},"selectionRange":{"end":{"character":75,"line":8707},"start":{"character":21,"line":8707}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_non_opt_filter_set","range":{"end":{"character":1,"line":8764},"start":{"character":0,"line":8730}},"selectionRange":{"end":{"character":71,"line":8730},"start":{"character":21,"line":8730}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_non_opt_filter_get","range":{"end":{"character":1,"line":8787},"start":{"character":0,"line":8767}},"selectionRange":{"end":{"character":71,"line":8767},"start":{"character":21,"line":8767}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_filter_set","range":{"end":{"character":1,"line":8824},"start":{"character":0,"line":8790}},"selectionRange":{"end":{"character":63,"line":8790},"start":{"character":21,"line":8790}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_filter_get","range":{"end":{"character":1,"line":8847},"start":{"character":0,"line":8827}},"selectionRange":{"end":{"character":63,"line":8827},"start":{"character":21,"line":8827}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_getModesCount","range":{"end":{"character":1,"line":8870},"start":{"character":0,"line":8850}},"selectionRange":{"end":{"character":66,"line":8850},"start":{"character":21,"line":8850}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_getDataSize","range":{"end":{"character":1,"line":8893},"start":{"character":0,"line":8873}},"selectionRange":{"end":{"character":64,"line":8873},"start":{"character":21,"line":8873}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_getMode","range":{"end":{"character":1,"line":8923},"start":{"character":0,"line":8896}},"selectionRange":{"end":{"character":60,"line":8896},"start":{"character":21,"line":8896}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_getInstFreq","range":{"end":{"character":1,"line":8953},"start":{"character":0,"line":8926}},"selectionRange":{"end":{"character":64,"line":8926},"start":{"character":21,"line":8926}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_getInstAmpl","range":{"end":{"character":1,"line":8983},"start":{"character":0,"line":8956}},"selectionRange":{"end":{"character":64,"line":8956},"start":{"character":21,"line":8956}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_getPhase","range":{"end":{"character":1,"line":9013},"start":{"character":0,"line":8986}},"selectionRange":{"end":{"character":61,"line":8986},"start":{"character":21,"line":8986}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_computeVec","range":{"end":{"character":1,"line":9049},"start":{"character":0,"line":9016}},"selectionRange":{"end":{"character":63,"line":9016},"start":{"character":21,"line":9016}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_new_InstFreqNormSincExtractor","range":{"end":{"character":1,"line":9062},"start":{"character":0,"line":9052}},"selectionRange":{"end":{"character":56,"line":9052},"start":{"character":21,"line":9052}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_delete_InstFreqNormSincExtractor","range":{"end":{"character":1,"line":9084},"start":{"character":0,"line":9065}},"selectionRange":{"end":{"character":59,"line":9065},"start":{"character":21,"line":9065}}},{"detail":"int *(int *, int *)","kind":12,"name":"InstFreqNormSincExtractor_swigregister","range":{"end":{"character":1,"line":9092},"start":{"character":0,"line":9087}},"selectionRange":{"end":{"character":59,"line":9087},"start":{"character":21,"line":9087}}},{"detail":"int *(int *, int *)","kind":12,"name":"InstFreqNormSincExtractor_swiginit","range":{"end":{"character":1,"line":9096},"start":{"character":0,"line":9094}},"selectionRange":{"end":{"character":55,"line":9094},"start":{"character":21,"line":9094}}},{"detail":"int[]","kind":13,"name":"SwigMethods","range":{"end":{"character":32,"line":9098},"start":{"character":0,"line":9098}},"selectionRange":{"end":{"character":30,"line":9098},"start":{"character":19,"line":9098}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t","range":{"end":{"character":295,"line":9209},"start":{"character":0,"line":9209}},"selectionRange":{"end":{"character":108,"line":9209},"start":{"character":22,"line":9209}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_DataType","range":{"end":{"character":91,"line":9210},"start":{"character":0,"line":9210}},"selectionRange":{"end":{"character":40,"line":9210},"start":{"character":22,"line":9210}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_FILTERS__NonOptPeriodBasedFilterT_double_FILTERS__FilteringType__AverageBased_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_FILTERS__InstFreqKind__Average_t","range":{"end":{"character":565,"line":9211},"start":{"character":0,"line":9211}},"selectionRange":{"end":{"character":198,"line":9211},"start":{"character":22,"line":9211}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_FILTERS__SincResLocalFilterT_double_t","range":{"end":{"character":178,"line":9212},"start":{"character":0,"line":9212}},"selectionRange":{"end":{"character":69,"line":9212},"start":{"character":22,"line":9212}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_GenericSignalT_SimpleVecWrapperT_double_t_true_t","range":{"end":{"character":282,"line":9213},"start":{"character":0,"line":9213}},"selectionRange":{"end":{"character":80,"line":9213},"start":{"character":22,"line":9213}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_INST_AMPL_COMPUTERS__HilbertTransformBasedT_UTILITY_MATH__HTKind__Mull_t","range":{"end":{"character":283,"line":9214},"start":{"character":0,"line":9214}},"selectionRange":{"end":{"character":104,"line":9214},"start":{"character":22,"line":9214}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_INST_FREQ_COMPUTERS__ComputedOnPhaseT_double_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_INST_FREQ_COMPUTERS__InstFreqDerivativeBasedKind__TimeAverage_t","range":{"end":{"character":790,"line":9215},"start":{"character":0,"line":9215}},"selectionRange":{"end":{"character":273,"line":9215},"start":{"character":22,"line":9215}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t","range":{"end":{"character":232,"line":9216},"start":{"character":0,"line":9216}},"selectionRange":{"end":{"character":87,"line":9216},"start":{"character":22,"line":9216}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor","range":{"end":{"character":241,"line":9217},"start":{"character":0,"line":9217}},"selectionRange":{"end":{"character":90,"line":9217},"start":{"character":22,"line":9217}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__DerArctg_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t","range":{"end":{"character":562,"line":9218},"start":{"character":0,"line":9218}},"selectionRange":{"end":{"character":197,"line":9218},"start":{"character":22,"line":9218}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__Simple_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t","range":{"end":{"character":556,"line":9219},"start":{"character":0,"line":9219}},"selectionRange":{"end":{"character":195,"line":9219},"start":{"character":22,"line":9219}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_allocator_type","range":{"end":{"character":109,"line":9220},"start":{"character":0,"line":9220}},"selectionRange":{"end":{"character":46,"line":9220},"start":{"character":22,"line":9220}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_char","range":{"end":{"character":79,"line":9221},"start":{"character":0,"line":9221}},"selectionRange":{"end":{"character":36,"line":9221},"start":{"character":22,"line":9221}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_difference_type","range":{"end":{"character":112,"line":9222},"start":{"character":0,"line":9222}},"selectionRange":{"end":{"character":47,"line":9222},"start":{"character":22,"line":9222}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_p_PyObject","range":{"end":{"character":96,"line":9223},"start":{"character":0,"line":9223}},"selectionRange":{"end":{"character":42,"line":9223},"start":{"character":22,"line":9223}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_size_type","range":{"end":{"character":94,"line":9224},"start":{"character":0,"line":9224}},"selectionRange":{"end":{"character":41,"line":9224},"start":{"character":22,"line":9224}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_std__allocatorT_double_t","range":{"end":{"character":179,"line":9225},"start":{"character":0,"line":9225}},"selectionRange":{"end":{"character":56,"line":9225},"start":{"character":22,"line":9225}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_std__invalid_argument","range":{"end":{"character":130,"line":9226},"start":{"character":0,"line":9226}},"selectionRange":{"end":{"character":53,"line":9226},"start":{"character":22,"line":9226}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t","range":{"end":{"character":646,"line":9227},"start":{"character":0,"line":9227}},"selectionRange":{"end":{"character":166,"line":9227},"start":{"character":22,"line":9227}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_std__vectorT_double_std__allocatorT_double_t_t","range":{"end":{"character":229,"line":9228},"start":{"character":0,"line":9228}},"selectionRange":{"end":{"character":78,"line":9228},"start":{"character":22,"line":9228}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_swig__SwigPyIterator","range":{"end":{"character":127,"line":9229},"start":{"character":0,"line":9229}},"selectionRange":{"end":{"character":52,"line":9229},"start":{"character":22,"line":9229}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_value_type","range":{"end":{"character":97,"line":9230},"start":{"character":0,"line":9230}},"selectionRange":{"end":{"character":42,"line":9230},"start":{"character":22,"line":9230}}},{"detail":"swig_type_info *[22]","kind":13,"name":"swig_type_initial","range":{"end":{"character":1,"line":9255},"start":{"character":0,"line":9232}},"selectionRange":{"end":{"character":40,"line":9232},"start":{"character":23,"line":9232}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t","range":{"end":{"character":228,"line":9257},"start":{"character":0,"line":9257}},"selectionRange":{"end":{"character":108,"line":9257},"start":{"character":22,"line":9257}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_DataType","range":{"end":{"character":92,"line":9258},"start":{"character":0,"line":9258}},"selectionRange":{"end":{"character":40,"line":9258},"start":{"character":22,"line":9258}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_FILTERS__NonOptPeriodBasedFilterT_double_FILTERS__FilteringType__AverageBased_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_FILTERS__InstFreqKind__Average_t","range":{"end":{"character":408,"line":9259},"start":{"character":0,"line":9259}},"selectionRange":{"end":{"character":198,"line":9259},"start":{"character":22,"line":9259}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_FILTERS__SincResLocalFilterT_double_t","range":{"end":{"character":150,"line":9260},"start":{"character":0,"line":9260}},"selectionRange":{"end":{"character":69,"line":9260},"start":{"character":22,"line":9260}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_GenericSignalT_SimpleVecWrapperT_double_t_true_t","range":{"end":{"character":172,"line":9261},"start":{"character":0,"line":9261}},"selectionRange":{"end":{"character":80,"line":9261},"start":{"character":22,"line":9261}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_INST_AMPL_COMPUTERS__HilbertTransformBasedT_UTILITY_MATH__HTKind__Mull_t","range":{"end":{"character":220,"line":9262},"start":{"character":0,"line":9262}},"selectionRange":{"end":{"character":104,"line":9262},"start":{"character":22,"line":9262}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_INST_FREQ_COMPUTERS__ComputedOnPhaseT_double_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_INST_FREQ_COMPUTERS__InstFreqDerivativeBasedKind__TimeAverage_t","range":{"end":{"character":558,"line":9263},"start":{"character":0,"line":9263}},"selectionRange":{"end":{"character":273,"line":9263},"start":{"character":22,"line":9263}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t","range":{"end":{"character":186,"line":9264},"start":{"character":0,"line":9264}},"selectionRange":{"end":{"character":87,"line":9264},"start":{"character":22,"line":9264}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor","range":{"end":{"character":192,"line":9265},"start":{"character":0,"line":9265}},"selectionRange":{"end":{"character":90,"line":9265},"start":{"character":22,"line":9265}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__DerArctg_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t","range":{"end":{"character":406,"line":9266},"start":{"character":0,"line":9266}},"selectionRange":{"end":{"character":197,"line":9266},"start":{"character":22,"line":9266}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__Simple_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t","range":{"end":{"character":402,"line":9267},"start":{"character":0,"line":9267}},"selectionRange":{"end":{"character":195,"line":9267},"start":{"character":22,"line":9267}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_allocator_type","range":{"end":{"character":104,"line":9268},"start":{"character":0,"line":9268}},"selectionRange":{"end":{"character":46,"line":9268},"start":{"character":22,"line":9268}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_char","range":{"end":{"character":84,"line":9269},"start":{"character":0,"line":9269}},"selectionRange":{"end":{"character":36,"line":9269},"start":{"character":22,"line":9269}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_difference_type","range":{"end":{"character":106,"line":9270},"start":{"character":0,"line":9270}},"selectionRange":{"end":{"character":47,"line":9270},"start":{"character":22,"line":9270}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_p_PyObject","range":{"end":{"character":96,"line":9271},"start":{"character":0,"line":9271}},"selectionRange":{"end":{"character":42,"line":9271},"start":{"character":22,"line":9271}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_size_type","range":{"end":{"character":94,"line":9272},"start":{"character":0,"line":9272}},"selectionRange":{"end":{"character":41,"line":9272},"start":{"character":22,"line":9272}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_std__allocatorT_double_t","range":{"end":{"character":124,"line":9273},"start":{"character":0,"line":9273}},"selectionRange":{"end":{"character":56,"line":9273},"start":{"character":22,"line":9273}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_std__invalid_argument","range":{"end":{"character":118,"line":9274},"start":{"character":0,"line":9274}},"selectionRange":{"end":{"character":53,"line":9274},"start":{"character":22,"line":9274}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t","range":{"end":{"character":344,"line":9275},"start":{"character":0,"line":9275}},"selectionRange":{"end":{"character":166,"line":9275},"start":{"character":22,"line":9275}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_std__vectorT_double_std__allocatorT_double_t_t","range":{"end":{"character":168,"line":9276},"start":{"character":0,"line":9276}},"selectionRange":{"end":{"character":78,"line":9276},"start":{"character":22,"line":9276}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_swig__SwigPyIterator","range":{"end":{"character":116,"line":9277},"start":{"character":0,"line":9277}},"selectionRange":{"end":{"character":52,"line":9277},"start":{"character":22,"line":9277}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_value_type","range":{"end":{"character":96,"line":9278},"start":{"character":0,"line":9278}},"selectionRange":{"end":{"character":42,"line":9278},"start":{"character":22,"line":9278}}},{"detail":"swig_cast_info *[22]","kind":13,"name":"swig_cast_initial","range":{"end":{"character":1,"line":9303},"start":{"character":0,"line":9280}},"selectionRange":{"end":{"character":40,"line":9280},"start":{"character":23,"line":9280}}},{"detail":"swig_const_info[1]","kind":13,"name":"swig_const_table","range":{"end":{"character":21,"line":9309},"start":{"character":0,"line":9308}},"selectionRange":{"end":{"character":39,"line":9308},"start":{"character":23,"line":9308}}},{"detail":"void (void *)","kind":12,"name":"SWIG_InitializeModule","range":{"end":{"character":1,"line":9510},"start":{"character":0,"line":9370}},"selectionRange":{"end":{"character":21,"line":9371},"start":{"character":0,"line":9371}}},{"detail":"void ()","kind":12,"name":"SWIG_PropagateClientData","range":{"end":{"character":1,"line":9538},"start":{"character":0,"line":9517}},"selectionRange":{"end":{"character":24,"line":9518},"start":{"character":0,"line":9518}}},{"detail":"void (int *, swig_const_info *)","kind":12,"name":"SWIG_Python_InstallConstants","range":{"end":{"character":3,"line":9580},"start":{"character":2,"line":9559}},"selectionRange":{"end":{"character":30,"line":9560},"start":{"character":2,"line":9560}}},{"detail":"void (int *, const swig_const_info *, swig_type_info **, swig_type_info **)","kind":12,"name":"SWIG_Python_FixMethods","range":{"end":{"character":3,"line":9625},"start":{"character":2,"line":9586}},"selectionRange":{"end":{"character":24,"line":9587},"start":{"character":2,"line":9587}}},{"children":[{"detail":"void ()","kind":12,"name":"init_extractor","range":{"end":{"character":1,"line":9778},"start":{"character":0,"line":9642}},"selectionRange":{"end":{"character":9,"line":9648},"start":{"character":0,"line":9648}}}],"kind":21,"name":"SWIG_init","range":{"end":{"character":1,"line":9778},"start":{"character":0,"line":9642}},"selectionRange":{"end":{"character":9,"line":9648},"start":{"character":0,"line":9648}}}]}},{"pid":0,"ph":"X","name":"Queued:DocumentSymbols","ts":57952399.755000003,"tid":6130,"dur":5.8109999969601631,"args":{"CurrentRequest":"Build AST","PreambleRequestsNames":[],"RequestsNames":["codeAction","DocumentSymbols","SemanticHighlights","DocumentLinks","InlayHints","DocumentSymbols"]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":57952323.800999999,"tid":6130,"id":60,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":58580899.090999998,"tid":6237,"bp":"e","id":60,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":58580904.531999998,"tid":6237,"dur":9.1370000019669533,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58607408.366999999,"tid":6237,"args":{"Message":"--> reply:textDocument/documentSymbol(56) 655 ms"}},{"pid":0,"ph":"X","name":"DocumentSymbols","ts":58580891.056000002,"tid":6237,"dur":47329.887999996543,"args":{}},{"pid":0,"ph":"X","name":"textDocument/documentSymbol","ts":57952323.800999999,"tid":6130,"dur":85.120999999344349,"args":{"Params":{"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},"Reply":[{"detail":"type alias","kind":5,"name":"swig_converter_func","range":{"end":{"character":51,"line":364},"start":{"character":0,"line":364}},"selectionRange":{"end":{"character":35,"line":364},"start":{"character":16,"line":364}}},{"detail":"struct","kind":23,"name":"swig_type_info","range":{"end":{"character":29,"line":365},"start":{"character":8,"line":365}},"selectionRange":{"end":{"character":29,"line":365},"start":{"character":15,"line":365}}},{"detail":"type alias","kind":5,"name":"swig_dycast_func","range":{"end":{"character":59,"line":365},"start":{"character":0,"line":365}},"selectionRange":{"end":{"character":49,"line":365},"start":{"character":33,"line":365}}},{"children":[{"detail":"const char *","kind":8,"name":"name","range":{"end":{"character":30,"line":369},"start":{"character":2,"line":369}},"selectionRange":{"end":{"character":30,"line":369},"start":{"character":26,"line":369}}},{"detail":"const char *","kind":8,"name":"str","range":{"end":{"character":29,"line":370},"start":{"character":2,"line":370}},"selectionRange":{"end":{"character":29,"line":370},"start":{"character":26,"line":370}}},{"detail":"swig_dycast_func","kind":8,"name":"dcast","range":{"end":{"character":31,"line":371},"start":{"character":2,"line":371}},"selectionRange":{"end":{"character":31,"line":371},"start":{"character":26,"line":371}}},{"detail":"struct","kind":23,"name":"swig_cast_info","range":{"end":{"character":23,"line":372},"start":{"character":2,"line":372}},"selectionRange":{"end":{"character":23,"line":372},"start":{"character":9,"line":372}}},{"detail":"struct swig_cast_info *","kind":8,"name":"cast","range":{"end":{"character":30,"line":372},"start":{"character":2,"line":372}},"selectionRange":{"end":{"character":30,"line":372},"start":{"character":26,"line":372}}},{"detail":"void *","kind":8,"name":"clientdata","range":{"end":{"character":36,"line":373},"start":{"character":2,"line":373}},"selectionRange":{"end":{"character":36,"line":373},"start":{"character":26,"line":373}}},{"detail":"int","kind":8,"name":"owndata","range":{"end":{"character":32,"line":374},"start":{"character":2,"line":374}},"selectionRange":{"end":{"character":32,"line":374},"start":{"character":25,"line":374}}}],"detail":"struct","kind":23,"name":"swig_type_info","range":{"end":{"character":1,"line":375},"start":{"character":8,"line":368}},"selectionRange":{"end":{"character":29,"line":368},"start":{"character":15,"line":368}}},{"detail":"type alias","kind":5,"name":"swig_type_info","range":{"end":{"character":16,"line":375},"start":{"character":0,"line":368}},"selectionRange":{"end":{"character":16,"line":375},"start":{"character":2,"line":375}}},{"children":[{"detail":"swig_type_info *","kind":8,"name":"type","range":{"end":{"character":30,"line":379},"start":{"character":2,"line":379}},"selectionRange":{"end":{"character":30,"line":379},"start":{"character":26,"line":379}}},{"detail":"swig_converter_func","kind":8,"name":"converter","range":{"end":{"character":35,"line":380},"start":{"character":2,"line":380}},"selectionRange":{"end":{"character":35,"line":380},"start":{"character":26,"line":380}}},{"detail":"struct swig_cast_info *","kind":8,"name":"next","range":{"end":{"character":30,"line":381},"start":{"character":2,"line":381}},"selectionRange":{"end":{"character":30,"line":381},"start":{"character":26,"line":381}}},{"detail":"struct swig_cast_info *","kind":8,"name":"prev","range":{"end":{"character":30,"line":382},"start":{"character":2,"line":382}},"selectionRange":{"end":{"character":30,"line":382},"start":{"character":26,"line":382}}}],"detail":"struct","kind":23,"name":"swig_cast_info","range":{"end":{"character":1,"line":383},"start":{"character":8,"line":378}},"selectionRange":{"end":{"character":29,"line":378},"start":{"character":15,"line":378}}},{"detail":"type alias","kind":5,"name":"swig_cast_info","range":{"end":{"character":16,"line":383},"start":{"character":0,"line":378}},"selectionRange":{"end":{"character":16,"line":383},"start":{"character":2,"line":383}}},{"children":[{"detail":"swig_type_info **","kind":8,"name":"types","range":{"end":{"character":32,"line":389},"start":{"character":2,"line":389}},"selectionRange":{"end":{"character":32,"line":389},"start":{"character":27,"line":389}}},{"detail":"size_t","kind":8,"name":"size","range":{"end":{"character":29,"line":390},"start":{"character":2,"line":390}},"selectionRange":{"end":{"character":29,"line":390},"start":{"character":25,"line":390}}},{"detail":"struct swig_module_info *","kind":8,"name":"next","range":{"end":{"character":31,"line":391},"start":{"character":2,"line":391}},"selectionRange":{"end":{"character":31,"line":391},"start":{"character":27,"line":391}}},{"detail":"swig_type_info **","kind":8,"name":"type_initial","range":{"end":{"character":39,"line":392},"start":{"character":2,"line":392}},"selectionRange":{"end":{"character":39,"line":392},"start":{"character":27,"line":392}}},{"detail":"swig_cast_info **","kind":8,"name":"cast_initial","range":{"end":{"character":39,"line":393},"start":{"character":2,"line":393}},"selectionRange":{"end":{"character":39,"line":393},"start":{"character":27,"line":393}}},{"detail":"void *","kind":8,"name":"clientdata","range":{"end":{"character":37,"line":394},"start":{"character":2,"line":394}},"selectionRange":{"end":{"character":37,"line":394},"start":{"character":27,"line":394}}}],"detail":"struct","kind":23,"name":"swig_module_info","range":{"end":{"character":1,"line":395},"start":{"character":8,"line":388}},"selectionRange":{"end":{"character":31,"line":388},"start":{"character":15,"line":388}}},{"detail":"type alias","kind":5,"name":"swig_module_info","range":{"end":{"character":18,"line":395},"start":{"character":0,"line":388}},"selectionRange":{"end":{"character":18,"line":395},"start":{"character":2,"line":395}}},{"detail":"int (const char *, const char *, const char *, const char *)","kind":12,"name":"SWIG_TypeNameComp","range":{"end":{"character":1,"line":413},"start":{"character":0,"line":404}},"selectionRange":{"end":{"character":17,"line":405},"start":{"character":0,"line":405}}},{"detail":"int (const char *, const char *)","kind":12,"name":"SWIG_TypeCmp","range":{"end":{"character":1,"line":432},"start":{"character":0,"line":419}},"selectionRange":{"end":{"character":12,"line":420},"start":{"character":0,"line":420}}},{"detail":"int (const char *, const char *)","kind":12,"name":"SWIG_TypeEquiv","range":{"end":{"character":1,"line":441},"start":{"character":0,"line":438}},"selectionRange":{"end":{"character":14,"line":439},"start":{"character":0,"line":439}}},{"detail":"swig_cast_info *(const char *, swig_type_info *)","kind":12,"name":"SWIG_TypeCheck","range":{"end":{"character":1,"line":468},"start":{"character":0,"line":446}},"selectionRange":{"end":{"character":14,"line":447},"start":{"character":0,"line":447}}},{"detail":"swig_cast_info *(const swig_type_info *, swig_type_info *)","kind":12,"name":"SWIG_TypeCheckStruct","range":{"end":{"character":1,"line":495},"start":{"character":0,"line":473}},"selectionRange":{"end":{"character":20,"line":474},"start":{"character":0,"line":474}}},{"detail":"void *(swig_cast_info *, void *, int *)","kind":12,"name":"SWIG_TypeCast","range":{"end":{"character":1,"line":503},"start":{"character":0,"line":500}},"selectionRange":{"end":{"character":13,"line":501},"start":{"character":0,"line":501}}},{"detail":"swig_type_info *(swig_type_info *, void **)","kind":12,"name":"SWIG_TypeDynamicCast","range":{"end":{"character":1,"line":517},"start":{"character":0,"line":508}},"selectionRange":{"end":{"character":20,"line":509},"start":{"character":0,"line":509}}},{"detail":"const char *(const swig_type_info *)","kind":12,"name":"SWIG_TypeName","range":{"end":{"character":1,"line":525},"start":{"character":0,"line":522}},"selectionRange":{"end":{"character":13,"line":523},"start":{"character":0,"line":523}}},{"detail":"const char *(const swig_type_info *)","kind":12,"name":"SWIG_TypePrettyName","range":{"end":{"character":1,"line":547},"start":{"character":0,"line":531}},"selectionRange":{"end":{"character":19,"line":532},"start":{"character":0,"line":532}}},{"detail":"void (swig_type_info *, void *)","kind":12,"name":"SWIG_TypeClientData","range":{"end":{"character":1,"line":567},"start":{"character":0,"line":552}},"selectionRange":{"end":{"character":19,"line":553},"start":{"character":0,"line":553}}},{"detail":"void (swig_type_info *, void *)","kind":12,"name":"SWIG_TypeNewClientData","range":{"end":{"character":1,"line":572},"start":{"character":0,"line":568}},"selectionRange":{"end":{"character":22,"line":569},"start":{"character":0,"line":569}}},{"detail":"swig_type_info *(swig_module_info *, swig_module_info *, const char *)","kind":12,"name":"SWIG_MangledTypeQueryModule","range":{"end":{"character":1,"line":616},"start":{"character":0,"line":582}},"selectionRange":{"end":{"character":27,"line":583},"start":{"character":0,"line":583}}},{"detail":"swig_type_info *(swig_module_info *, swig_module_info *, const char *)","kind":12,"name":"SWIG_TypeQueryModule","range":{"end":{"character":1,"line":651},"start":{"character":0,"line":627}},"selectionRange":{"end":{"character":20,"line":628},"start":{"character":0,"line":628}}},{"detail":"char *(char *, void *, size_t)","kind":12,"name":"SWIG_PackData","range":{"end":{"character":1,"line":667},"start":{"character":0,"line":656}},"selectionRange":{"end":{"character":13,"line":657},"start":{"character":0,"line":657}}},{"detail":"const char *(const char *, void *, size_t)","kind":12,"name":"SWIG_UnpackData","range":{"end":{"character":1,"line":695},"start":{"character":0,"line":672}},"selectionRange":{"end":{"character":15,"line":673},"start":{"character":0,"line":673}}},{"detail":"char *(char *, void *, const char *, size_t)","kind":12,"name":"SWIG_PackVoidPtr","range":{"end":{"character":1,"line":709},"start":{"character":0,"line":700}},"selectionRange":{"end":{"character":16,"line":701},"start":{"character":0,"line":701}}},{"detail":"const char *(const char *, void **, const char *)","kind":12,"name":"SWIG_UnpackVoidPtr","range":{"end":{"character":1,"line":722},"start":{"character":0,"line":711}},"selectionRange":{"end":{"character":18,"line":712},"start":{"character":0,"line":712}}},{"detail":"char *(char *, void *, size_t, const char *, size_t)","kind":12,"name":"SWIG_PackDataName","range":{"end":{"character":1,"line":737},"start":{"character":0,"line":724}},"selectionRange":{"end":{"character":17,"line":725},"start":{"character":0,"line":725}}},{"detail":"const char *(const char *, void *, size_t, const char *)","kind":12,"name":"SWIG_UnpackDataName","range":{"end":{"character":1,"line":750},"start":{"character":0,"line":739}},"selectionRange":{"end":{"character":19,"line":740},"start":{"character":0,"line":740}}},{"detail":"char *(int *)","kind":12,"name":"SWIG_Python_str_AsChar","range":{"end":{"character":1,"line":812},"start":{"character":0,"line":804}},"selectionRange":{"end":{"character":22,"line":805},"start":{"character":0,"line":805}}},{"detail":"int *(const char *)","kind":12,"name":"SWIG_Python_str_FromChar","range":{"end":{"character":1,"line":827},"start":{"character":0,"line":819}},"selectionRange":{"end":{"character":24,"line":820},"start":{"character":0,"line":820}}},{"detail":"int *(int)","kind":12,"name":"SWIG_Python_ErrorType","range":{"end":{"character":1,"line":893},"start":{"character":0,"line":852}},"selectionRange":{"end":{"character":21,"line":853},"start":{"character":0,"line":853}}},{"detail":"void (const char *)","kind":12,"name":"SWIG_Python_AddErrorMsg","range":{"end":{"character":1,"line":919},"start":{"character":0,"line":896}},"selectionRange":{"end":{"character":23,"line":897},"start":{"character":0,"line":897}}},{"detail":"int (int *)","kind":12,"name":"SWIG_Python_TypeErrorOccurred","range":{"end":{"character":1,"line":929},"start":{"character":0,"line":921}},"selectionRange":{"end":{"character":29,"line":922},"start":{"character":0,"line":922}}},{"detail":"void (const char *)","kind":12,"name":"SWIG_Python_RaiseOrModifyTypeError","range":{"end":{"character":1,"line":954},"start":{"character":0,"line":931}},"selectionRange":{"end":{"character":34,"line":932},"start":{"character":0,"line":932}}},{"children":[{"detail":"int","kind":8,"name":"type","range":{"end":{"character":10,"line":1043},"start":{"character":2,"line":1043}},"selectionRange":{"end":{"character":10,"line":1043},"start":{"character":6,"line":1043}}},{"detail":"const char *","kind":8,"name":"name","range":{"end":{"character":18,"line":1044},"start":{"character":2,"line":1044}},"selectionRange":{"end":{"character":18,"line":1044},"start":{"character":14,"line":1044}}},{"detail":"long","kind":8,"name":"lvalue","range":{"end":{"character":13,"line":1045},"start":{"character":2,"line":1045}},"selectionRange":{"end":{"character":13,"line":1045},"start":{"character":7,"line":1045}}},{"detail":"double","kind":8,"name":"dvalue","range":{"end":{"character":15,"line":1046},"start":{"character":2,"line":1046}},"selectionRange":{"end":{"character":15,"line":1046},"start":{"character":9,"line":1046}}},{"detail":"void *","kind":8,"name":"pvalue","range":{"end":{"character":16,"line":1047},"start":{"character":2,"line":1047}},"selectionRange":{"end":{"character":16,"line":1047},"start":{"character":10,"line":1047}}},{"detail":"swig_type_info **","kind":8,"name":"ptype","range":{"end":{"character":24,"line":1048},"start":{"character":2,"line":1048}},"selectionRange":{"end":{"character":24,"line":1048},"start":{"character":19,"line":1048}}}],"detail":"struct","kind":23,"name":"swig_const_info","range":{"end":{"character":1,"line":1049},"start":{"character":8,"line":1042}},"selectionRange":{"end":{"character":30,"line":1042},"start":{"character":15,"line":1042}}},{"detail":"type alias","kind":5,"name":"swig_const_info","range":{"end":{"character":17,"line":1049},"start":{"character":0,"line":1042}},"selectionRange":{"end":{"character":17,"line":1049},"start":{"character":2,"line":1049}}},{"detail":"void (int *, int *)","kind":12,"name":"SWIG_Python_SetErrorObj","range":{"end":{"character":1,"line":1132},"start":{"character":0,"line":1126}},"selectionRange":{"end":{"character":23,"line":1127},"start":{"character":0,"line":1127}}},{"detail":"void (int *, const char *)","kind":12,"name":"SWIG_Python_SetErrorMsg","range":{"end":{"character":1,"line":1139},"start":{"character":0,"line":1134}},"selectionRange":{"end":{"character":23,"line":1135},"start":{"character":0,"line":1135}}},{"detail":"void (int *, const char *, int *)","kind":12,"name":"SWIG_Python_SetConstant","range":{"end":{"character":1,"line":1168},"start":{"character":0,"line":1164}},"selectionRange":{"end":{"character":23,"line":1165},"start":{"character":0,"line":1165}}},{"detail":"int *(int *, int *)","kind":12,"name":"SWIG_Python_AppendOutput","range":{"end":{"character":1,"line":1196},"start":{"character":0,"line":1174}},"selectionRange":{"end":{"character":24,"line":1175},"start":{"character":0,"line":1175}}},{"detail":"int (int *, const char *, int, int, int **)","kind":12,"name":"SWIG_Python_UnpackTuple","range":{"end":{"character":1,"line":1244},"start":{"character":0,"line":1200}},"selectionRange":{"end":{"character":23,"line":1201},"start":{"character":0,"line":1201}}},{"detail":"int (int *, const char *)","kind":12,"name":"SWIG_Python_CheckNoKeywords","range":{"end":{"character":1,"line":1257},"start":{"character":0,"line":1246}},"selectionRange":{"end":{"character":27,"line":1247},"start":{"character":0,"line":1247}}},{"children":[{"detail":"char *","kind":8,"name":"name","range":{"end":{"character":18,"line":1286},"start":{"character":2,"line":1286}},"selectionRange":{"end":{"character":18,"line":1286},"start":{"character":14,"line":1286}}},{"detail":"int *(*)()","kind":8,"name":"get_attr","range":{"end":{"character":29,"line":1287},"start":{"character":2,"line":1287}},"selectionRange":{"end":{"character":22,"line":1287},"start":{"character":14,"line":1287}}},{"detail":"int (*)(int *)","kind":8,"name":"set_attr","range":{"end":{"character":35,"line":1288},"start":{"character":2,"line":1288}},"selectionRange":{"end":{"character":22,"line":1288},"start":{"character":14,"line":1288}}},{"detail":"struct swig_globalvar *","kind":8,"name":"next","range":{"end":{"character":29,"line":1289},"start":{"character":2,"line":1289}},"selectionRange":{"end":{"character":29,"line":1289},"start":{"character":25,"line":1289}}}],"detail":"struct","kind":23,"name":"swig_globalvar","range":{"end":{"character":1,"line":1290},"start":{"character":8,"line":1285}},"selectionRange":{"end":{"character":29,"line":1285},"start":{"character":15,"line":1285}}},{"detail":"type alias","kind":5,"name":"swig_globalvar","range":{"end":{"character":16,"line":1290},"start":{"character":0,"line":1285}},"selectionRange":{"end":{"character":16,"line":1290},"start":{"character":2,"line":1290}}},{"children":[{"detail":"int","kind":8,"name":"swig_globalvar","range":{"end":{"character":16,"line":1294},"start":{"character":2,"line":1293}},"selectionRange":{"end":{"character":16,"line":1294},"start":{"character":2,"line":1294}}}],"detail":"struct","kind":23,"name":"swig_varlinkobject","range":{"end":{"character":1,"line":1295},"start":{"character":8,"line":1292}},"selectionRange":{"end":{"character":33,"line":1292},"start":{"character":15,"line":1292}}},{"detail":"type alias","kind":5,"name":"swig_varlinkobject","range":{"end":{"character":20,"line":1295},"start":{"character":0,"line":1292}},"selectionRange":{"end":{"character":20,"line":1295},"start":{"character":2,"line":1295}}},{"detail":"int *(int *)","kind":12,"name":"swig_varlink_repr","range":{"end":{"character":1,"line":1304},"start":{"character":0,"line":1297}},"selectionRange":{"end":{"character":17,"line":1298},"start":{"character":0,"line":1298}}},{"detail":"int *(int *)","kind":12,"name":"swig_varlink_str","range":{"end":{"character":1,"line":1343},"start":{"character":0,"line":1306}},"selectionRange":{"end":{"character":16,"line":1307},"start":{"character":0,"line":1307}}},{"detail":"void (int *)","kind":12,"name":"swig_varlink_dealloc","range":{"end":{"character":1,"line":1355},"start":{"character":0,"line":1345}},"selectionRange":{"end":{"character":20,"line":1346},"start":{"character":0,"line":1346}}},{"detail":"int *(int *, char *)","kind":12,"name":"swig_varlink_getattr","range":{"end":{"character":1,"line":1373},"start":{"character":0,"line":1357}},"selectionRange":{"end":{"character":20,"line":1358},"start":{"character":0,"line":1358}}},{"detail":"int (int *, char *, int *)","kind":12,"name":"swig_varlink_setattr","range":{"end":{"character":1,"line":1391},"start":{"character":0,"line":1375}},"selectionRange":{"end":{"character":20,"line":1376},"start":{"character":0,"line":1376}}},{"detail":"int *()","kind":12,"name":"swig_varlink_type","range":{"end":{"character":1,"line":1460},"start":{"character":0,"line":1393}},"selectionRange":{"end":{"character":17,"line":1394},"start":{"character":0,"line":1394}}},{"detail":"int *()","kind":12,"name":"SWIG_Python_newvarlink","range":{"end":{"character":1,"line":1470},"start":{"character":0,"line":1463}},"selectionRange":{"end":{"character":22,"line":1464},"start":{"character":0,"line":1464}}},{"detail":"void (int *, const char *, int *(*)(), int (*)(int *))","kind":12,"name":"SWIG_Python_addvarlink","range":{"end":{"character":1,"line":1487},"start":{"character":0,"line":1472}},"selectionRange":{"end":{"character":22,"line":1473},"start":{"character":0,"line":1473}}},{"detail":"int *","kind":13,"name":"Swig_Globals_global","range":{"end":{"character":36,"line":1490},"start":{"character":0,"line":1490}},"selectionRange":{"end":{"character":36,"line":1490},"start":{"character":17,"line":1490}}},{"detail":"int *()","kind":12,"name":"SWIG_globals","range":{"end":{"character":1,"line":1498},"start":{"character":0,"line":1492}},"selectionRange":{"end":{"character":12,"line":1493},"start":{"character":0,"line":1493}}},{"detail":"int *()","kind":12,"name":"SWIG_Py_Void","range":{"end":{"character":1,"line":1529},"start":{"character":0,"line":1523}},"selectionRange":{"end":{"character":12,"line":1524},"start":{"character":0,"line":1524}}},{"children":[{"detail":"int *","kind":8,"name":"klass","range":{"end":{"character":17,"line":1534},"start":{"character":2,"line":1534}},"selectionRange":{"end":{"character":17,"line":1534},"start":{"character":12,"line":1534}}},{"detail":"int *","kind":8,"name":"newraw","range":{"end":{"character":18,"line":1535},"start":{"character":2,"line":1535}},"selectionRange":{"end":{"character":18,"line":1535},"start":{"character":12,"line":1535}}},{"detail":"int *","kind":8,"name":"newargs","range":{"end":{"character":19,"line":1536},"start":{"character":2,"line":1536}},"selectionRange":{"end":{"character":19,"line":1536},"start":{"character":12,"line":1536}}},{"detail":"int *","kind":8,"name":"destroy","range":{"end":{"character":19,"line":1537},"start":{"character":2,"line":1537}},"selectionRange":{"end":{"character":19,"line":1537},"start":{"character":12,"line":1537}}},{"detail":"int","kind":8,"name":"delargs","range":{"end":{"character":13,"line":1538},"start":{"character":2,"line":1538}},"selectionRange":{"end":{"character":13,"line":1538},"start":{"character":6,"line":1538}}},{"detail":"int","kind":8,"name":"implicitconv","range":{"end":{"character":18,"line":1539},"start":{"character":2,"line":1539}},"selectionRange":{"end":{"character":18,"line":1539},"start":{"character":6,"line":1539}}},{"detail":"int *","kind":8,"name":"pytype","range":{"end":{"character":22,"line":1540},"start":{"character":2,"line":1540}},"selectionRange":{"end":{"character":22,"line":1540},"start":{"character":16,"line":1540}}}],"detail":"struct","kind":23,"name":"(anonymous struct)","range":{"end":{"character":1,"line":1541},"start":{"character":8,"line":1533}},"selectionRange":{"end":{"character":14,"line":1533},"start":{"character":8,"line":1533}}},{"detail":"type alias","kind":5,"name":"SwigPyClientData","range":{"end":{"character":18,"line":1541},"start":{"character":0,"line":1533}},"selectionRange":{"end":{"character":18,"line":1541},"start":{"character":2,"line":1541}}},{"detail":"int (swig_type_info *)","kind":12,"name":"SWIG_Python_CheckImplicit","range":{"end":{"character":1,"line":1551},"start":{"character":0,"line":1543}},"selectionRange":{"end":{"character":25,"line":1544},"start":{"character":0,"line":1544}}},{"detail":"int *(swig_type_info *)","kind":12,"name":"SWIG_Python_ExceptionType","range":{"end":{"character":1,"line":1558},"start":{"character":0,"line":1553}},"selectionRange":{"end":{"character":25,"line":1554},"start":{"character":0,"line":1554}}},{"detail":"SwigPyClientData *(int *)","kind":12,"name":"SwigPyClientData_New","range":{"end":{"character":1,"line":1609},"start":{"character":0,"line":1561}},"selectionRange":{"end":{"character":20,"line":1562},"start":{"character":0,"line":1562}}},{"detail":"void (SwigPyClientData *)","kind":12,"name":"SwigPyClientData_Del","range":{"end":{"character":1,"line":1619},"start":{"character":0,"line":1611}},"selectionRange":{"end":{"character":20,"line":1612},"start":{"character":0,"line":1612}}},{"children":[{"detail":"int *","kind":8,"name":"ptr","range":{"end":{"character":11,"line":1625},"start":{"character":2,"line":1624}},"selectionRange":{"end":{"character":11,"line":1625},"start":{"character":8,"line":1625}}},{"detail":"swig_type_info *","kind":8,"name":"ty","range":{"end":{"character":20,"line":1626},"start":{"character":2,"line":1626}},"selectionRange":{"end":{"character":20,"line":1626},"start":{"character":18,"line":1626}}},{"detail":"int","kind":8,"name":"own","range":{"end":{"character":9,"line":1627},"start":{"character":2,"line":1627}},"selectionRange":{"end":{"character":9,"line":1627},"start":{"character":6,"line":1627}}},{"detail":"int *","kind":8,"name":"next","range":{"end":{"character":16,"line":1628},"start":{"character":2,"line":1628}},"selectionRange":{"end":{"character":16,"line":1628},"start":{"character":12,"line":1628}}}],"detail":"struct","kind":23,"name":"(anonymous struct)","range":{"end":{"character":1,"line":1632},"start":{"character":8,"line":1623}},"selectionRange":{"end":{"character":14,"line":1623},"start":{"character":8,"line":1623}}},{"detail":"type alias","kind":5,"name":"SwigPyObject","range":{"end":{"character":14,"line":1632},"start":{"character":0,"line":1623}},"selectionRange":{"end":{"character":14,"line":1632},"start":{"character":2,"line":1632}}},{"detail":"int *(SwigPyObject *)","kind":12,"name":"SwigPyObject_long","range":{"end":{"character":1,"line":1655},"start":{"character":0,"line":1651}},"selectionRange":{"end":{"character":17,"line":1652},"start":{"character":0,"line":1652}}},{"detail":"int *(const char *, SwigPyObject *)","kind":12,"name":"SwigPyObject_format","range":{"end":{"character":1,"line":1680},"start":{"character":0,"line":1657}},"selectionRange":{"end":{"character":19,"line":1658},"start":{"character":0,"line":1658}}},{"detail":"int *(SwigPyObject *)","kind":12,"name":"SwigPyObject_oct","range":{"end":{"character":1,"line":1686},"start":{"character":0,"line":1682}},"selectionRange":{"end":{"character":16,"line":1683},"start":{"character":0,"line":1683}}},{"detail":"int *(SwigPyObject *)","kind":12,"name":"SwigPyObject_hex","range":{"end":{"character":1,"line":1692},"start":{"character":0,"line":1688}},"selectionRange":{"end":{"character":16,"line":1689},"start":{"character":0,"line":1689}}},{"detail":"int *(SwigPyObject *)","kind":12,"name":"SwigPyObject_repr","range":{"end":{"character":1,"line":1716},"start":{"character":0,"line":1694}},"selectionRange":{"end":{"character":17,"line":1695},"start":{"character":0,"line":1695}}},{"detail":"int *(int *, int *)","kind":12,"name":"SwigPyObject_repr2","range":{"end":{"character":1,"line":1724},"start":{"character":0,"line":1720}},"selectionRange":{"end":{"character":18,"line":1721},"start":{"character":0,"line":1721}}},{"detail":"int (SwigPyObject *, SwigPyObject *)","kind":12,"name":"SwigPyObject_compare","range":{"end":{"character":1,"line":1732},"start":{"character":0,"line":1726}},"selectionRange":{"end":{"character":20,"line":1727},"start":{"character":0,"line":1727}}},{"detail":"int *(SwigPyObject *, SwigPyObject *, int)","kind":12,"name":"SwigPyObject_richcompare","range":{"end":{"character":1,"line":1745},"start":{"character":0,"line":1735}},"selectionRange":{"end":{"character":24,"line":1736},"start":{"character":0,"line":1736}}},{"detail":"int *()","kind":12,"name":"SwigPyObject_TypeOnce","range":{"end":{"character":53,"line":1748},"start":{"character":0,"line":1748}},"selectionRange":{"end":{"character":47,"line":1748},"start":{"character":26,"line":1748}}},{"detail":"int *()","kind":12,"name":"SwigPyObject_type","range":{"end":{"character":1,"line":1766},"start":{"character":0,"line":1762}},"selectionRange":{"end":{"character":17,"line":1763},"start":{"character":0,"line":1763}}},{"detail":"int (int *)","kind":12,"name":"SwigPyObject_Check","range":{"end":{"character":1,"line":1780},"start":{"character":0,"line":1769}},"selectionRange":{"end":{"character":18,"line":1770},"start":{"character":0,"line":1770}}},{"detail":"int *(void *, swig_type_info *, int)","kind":12,"name":"SwigPyObject_New","range":{"end":{"character":56,"line":1783},"start":{"character":0,"line":1782}},"selectionRange":{"end":{"character":16,"line":1783},"start":{"character":0,"line":1783}}},{"detail":"int *","kind":13,"name":"Swig_Capsule_global","range":{"end":{"character":36,"line":1785},"start":{"character":0,"line":1785}},"selectionRange":{"end":{"character":36,"line":1785},"start":{"character":17,"line":1785}}},{"detail":"void (int *)","kind":12,"name":"SwigPyObject_dealloc","range":{"end":{"character":1,"line":1844},"start":{"character":0,"line":1787}},"selectionRange":{"end":{"character":20,"line":1788},"start":{"character":0,"line":1788}}},{"detail":"int *(int *, int *)","kind":12,"name":"SwigPyObject_append","range":{"end":{"character":1,"line":1858},"start":{"character":0,"line":1846}},"selectionRange":{"end":{"character":19,"line":1847},"start":{"character":0,"line":1847}}},{"detail":"int *(int *, int *)","kind":12,"name":"SwigPyObject_next","range":{"end":{"character":1,"line":1870},"start":{"character":0,"line":1860}},"selectionRange":{"end":{"character":17,"line":1861},"start":{"character":0,"line":1861}}},{"detail":"int *(int *, int *)","kind":12,"name":"SwigPyObject_disown","range":{"end":{"character":1,"line":1878},"start":{"character":0,"line":1872}},"selectionRange":{"end":{"character":19,"line":1873},"start":{"character":0,"line":1873}}},{"detail":"int *(int *, int *)","kind":12,"name":"SwigPyObject_acquire","range":{"end":{"character":1,"line":1886},"start":{"character":0,"line":1880}},"selectionRange":{"end":{"character":20,"line":1881},"start":{"character":0,"line":1881}}},{"detail":"int *(int *, int *)","kind":12,"name":"SwigPyObject_own","range":{"end":{"character":1,"line":1906},"start":{"character":0,"line":1888}},"selectionRange":{"end":{"character":16,"line":1889},"start":{"character":0,"line":1889}}},{"detail":"int[]","kind":13,"name":"swigobject_methods","range":{"end":{"character":20,"line":1909},"start":{"character":0,"line":1908}},"selectionRange":{"end":{"character":18,"line":1909},"start":{"character":0,"line":1909}}},{"detail":"int *()","kind":12,"name":"SwigPyObject_TypeOnce","range":{"end":{"character":1,"line":2054},"start":{"character":0,"line":1919}},"selectionRange":{"end":{"character":21,"line":1920},"start":{"character":0,"line":1920}}},{"detail":"int *(void *, swig_type_info *, int)","kind":12,"name":"SwigPyObject_New","range":{"end":{"character":1,"line":2076},"start":{"character":0,"line":2056}},"selectionRange":{"end":{"character":16,"line":2057},"start":{"character":0,"line":2057}}},{"children":[{"detail":"int *","kind":8,"name":"pack","range":{"end":{"character":12,"line":2084},"start":{"character":2,"line":2083}},"selectionRange":{"end":{"character":12,"line":2084},"start":{"character":8,"line":2084}}},{"detail":"swig_type_info *","kind":8,"name":"ty","range":{"end":{"character":20,"line":2085},"start":{"character":2,"line":2085}},"selectionRange":{"end":{"character":20,"line":2085},"start":{"character":18,"line":2085}}},{"detail":"size_t","kind":8,"name":"size","range":{"end":{"character":13,"line":2086},"start":{"character":2,"line":2086}},"selectionRange":{"end":{"character":13,"line":2086},"start":{"character":9,"line":2086}}}],"detail":"struct","kind":23,"name":"(anonymous struct)","range":{"end":{"character":1,"line":2087},"start":{"character":8,"line":2082}},"selectionRange":{"end":{"character":14,"line":2082},"start":{"character":8,"line":2082}}},{"detail":"type alias","kind":5,"name":"SwigPyPacked","range":{"end":{"character":14,"line":2087},"start":{"character":0,"line":2082}},"selectionRange":{"end":{"character":14,"line":2087},"start":{"character":2,"line":2087}}},{"detail":"int *(SwigPyPacked *)","kind":12,"name":"SwigPyPacked_repr","range":{"end":{"character":1,"line":2098},"start":{"character":0,"line":2089}},"selectionRange":{"end":{"character":17,"line":2090},"start":{"character":0,"line":2090}}},{"detail":"int *(SwigPyPacked *)","kind":12,"name":"SwigPyPacked_str","range":{"end":{"character":1,"line":2109},"start":{"character":0,"line":2100}},"selectionRange":{"end":{"character":16,"line":2101},"start":{"character":0,"line":2101}}},{"detail":"int (SwigPyPacked *, SwigPyPacked *)","kind":12,"name":"SwigPyPacked_compare","range":{"end":{"character":1,"line":2118},"start":{"character":0,"line":2111}},"selectionRange":{"end":{"character":20,"line":2112},"start":{"character":0,"line":2112}}},{"detail":"int *()","kind":12,"name":"SwigPyPacked_TypeOnce","range":{"end":{"character":53,"line":2120},"start":{"character":0,"line":2120}},"selectionRange":{"end":{"character":47,"line":2120},"start":{"character":26,"line":2120}}},{"detail":"int *()","kind":12,"name":"SwigPyPacked_type","range":{"end":{"character":1,"line":2126},"start":{"character":0,"line":2122}},"selectionRange":{"end":{"character":17,"line":2123},"start":{"character":0,"line":2123}}},{"detail":"int (int *)","kind":12,"name":"SwigPyPacked_Check","range":{"end":{"character":1,"line":2132},"start":{"character":0,"line":2128}},"selectionRange":{"end":{"character":18,"line":2129},"start":{"character":0,"line":2129}}},{"detail":"void (int *)","kind":12,"name":"SwigPyPacked_dealloc","range":{"end":{"character":1,"line":2142},"start":{"character":0,"line":2134}},"selectionRange":{"end":{"character":20,"line":2135},"start":{"character":0,"line":2135}}},{"detail":"int *()","kind":12,"name":"SwigPyPacked_TypeOnce","range":{"end":{"character":1,"line":2234},"start":{"character":0,"line":2144}},"selectionRange":{"end":{"character":21,"line":2145},"start":{"character":0,"line":2145}}},{"detail":"int *(void *, size_t, swig_type_info *)","kind":12,"name":"SwigPyPacked_New","range":{"end":{"character":1,"line":2253},"start":{"character":0,"line":2236}},"selectionRange":{"end":{"character":16,"line":2237},"start":{"character":0,"line":2237}}},{"detail":"swig_type_info *(int *, void *, size_t)","kind":12,"name":"SwigPyPacked_UnpackData","range":{"end":{"character":1,"line":2266},"start":{"character":0,"line":2255}},"selectionRange":{"end":{"character":23,"line":2256},"start":{"character":0,"line":2256}}},{"detail":"int *","kind":13,"name":"Swig_This_global","range":{"end":{"character":33,"line":2272},"start":{"character":0,"line":2272}},"selectionRange":{"end":{"character":33,"line":2272},"start":{"character":17,"line":2272}}},{"detail":"int *()","kind":12,"name":"SWIG_This","range":{"end":{"character":1,"line":2280},"start":{"character":0,"line":2274}},"selectionRange":{"end":{"character":9,"line":2275},"start":{"character":0,"line":2275}}},{"detail":"SwigPyObject *(int *)","kind":12,"name":"SWIG_Python_GetSwigThis","range":{"end":{"character":1,"line":2351},"start":{"character":0,"line":2289}},"selectionRange":{"end":{"character":23,"line":2290},"start":{"character":0,"line":2290}}},{"detail":"int (int *, int)","kind":12,"name":"SWIG_Python_AcquirePtr","range":{"end":{"character":1,"line":2366},"start":{"character":0,"line":2355}},"selectionRange":{"end":{"character":22,"line":2356},"start":{"character":0,"line":2356}}},{"detail":"int (int *, void **, swig_type_info *, int, int *)","kind":12,"name":"SWIG_Python_ConvertPtrAndOwn","range":{"end":{"character":1,"line":2478},"start":{"character":0,"line":2370}},"selectionRange":{"end":{"character":28,"line":2371},"start":{"character":0,"line":2371}}},{"detail":"int (int *, void **, swig_type_info *)","kind":12,"name":"SWIG_Python_ConvertFunctionPtr","range":{"end":{"character":1,"line":2507},"start":{"character":0,"line":2482}},"selectionRange":{"end":{"character":30,"line":2483},"start":{"character":0,"line":2483}}},{"detail":"int (int *, void *, size_t, swig_type_info *)","kind":12,"name":"SWIG_Python_ConvertPacked","range":{"end":{"character":1,"line":2523},"start":{"character":0,"line":2511}},"selectionRange":{"end":{"character":25,"line":2512},"start":{"character":0,"line":2512}}},{"detail":"int *(SwigPyClientData *, int *)","kind":12,"name":"SWIG_Python_NewShadowInstance","range":{"end":{"character":1,"line":2593},"start":{"character":0,"line":2534}},"selectionRange":{"end":{"character":29,"line":2535},"start":{"character":0,"line":2535}}},{"detail":"int (int *, int *)","kind":12,"name":"SWIG_Python_SetSwigThis","range":{"end":{"character":1,"line":2614},"start":{"character":0,"line":2595}},"selectionRange":{"end":{"character":23,"line":2596},"start":{"character":0,"line":2596}}},{"detail":"int *(int *)","kind":12,"name":"SWIG_Python_InitShadowInstance","range":{"end":{"character":1,"line":2632},"start":{"character":0,"line":2617}},"selectionRange":{"end":{"character":30,"line":2618},"start":{"character":0,"line":2618}}},{"detail":"int *(int *, void *, swig_type_info *, int)","kind":12,"name":"SWIG_Python_NewPointerObj","range":{"end":{"character":1,"line":2688},"start":{"character":0,"line":2636}},"selectionRange":{"end":{"character":25,"line":2637},"start":{"character":0,"line":2637}}},{"detail":"int *(void *, size_t, swig_type_info *)","kind":12,"name":"SWIG_Python_NewPackedObj","range":{"end":{"character":1,"line":2695},"start":{"character":0,"line":2692}},"selectionRange":{"end":{"character":24,"line":2693},"start":{"character":0,"line":2693}}},{"detail":"int *","kind":13,"name":"Swig_TypeCache_global","range":{"end":{"character":38,"line":2705},"start":{"character":0,"line":2705}},"selectionRange":{"end":{"character":38,"line":2705},"start":{"character":17,"line":2705}}},{"detail":"int *()","kind":12,"name":"SWIG_Python_TypeCache","range":{"end":{"character":1,"line":2714},"start":{"character":0,"line":2708}},"selectionRange":{"end":{"character":21,"line":2709},"start":{"character":0,"line":2709}}},{"detail":"swig_module_info *(void *)","kind":12,"name":"SWIG_Python_GetModule","range":{"end":{"character":1,"line":2732},"start":{"character":0,"line":2716}},"selectionRange":{"end":{"character":21,"line":2717},"start":{"character":0,"line":2717}}},{"detail":"int","kind":13,"name":"interpreter_counter","range":{"end":{"character":34,"line":2735},"start":{"character":0,"line":2735}},"selectionRange":{"end":{"character":30,"line":2735},"start":{"character":11,"line":2735}}},{"detail":"void (int *)","kind":12,"name":"SWIG_Python_DestroyModule","range":{"end":{"character":1,"line":2760},"start":{"character":0,"line":2737}},"selectionRange":{"end":{"character":25,"line":2738},"start":{"character":0,"line":2738}}},{"detail":"void (swig_module_info *)","kind":12,"name":"SWIG_Python_SetModule","range":{"end":{"character":1,"line":2782},"start":{"character":0,"line":2762}},"selectionRange":{"end":{"character":21,"line":2763},"start":{"character":0,"line":2763}}},{"detail":"swig_type_info *(const char *)","kind":12,"name":"SWIG_Python_TypeQuery","range":{"end":{"character":1,"line":2806},"start":{"character":0,"line":2784}},"selectionRange":{"end":{"character":21,"line":2785},"start":{"character":0,"line":2785}}},{"detail":"int (const char *, int)","kind":12,"name":"SWIG_Python_AddErrMesg","range":{"end":{"character":1,"line":2840},"start":{"character":0,"line":2815}},"selectionRange":{"end":{"character":22,"line":2816},"start":{"character":0,"line":2816}}},{"detail":"int (int)","kind":12,"name":"SWIG_Python_ArgFail","range":{"end":{"character":1,"line":2853},"start":{"character":0,"line":2842}},"selectionRange":{"end":{"character":19,"line":2843},"start":{"character":0,"line":2843}}},{"detail":"const char *(int *)","kind":12,"name":"SwigPyObject_GetDesc","range":{"end":{"character":1,"line":2861},"start":{"character":0,"line":2855}},"selectionRange":{"end":{"character":20,"line":2856},"start":{"character":0,"line":2856}}},{"detail":"void (const char *, int *)","kind":12,"name":"SWIG_Python_TypeError","range":{"end":{"character":1,"line":2897},"start":{"character":0,"line":2863}},"selectionRange":{"end":{"character":21,"line":2864},"start":{"character":0,"line":2864}}},{"detail":"void *(int *, swig_type_info *, int, int)","kind":12,"name":"SWIG_Python_MustGetPtr","range":{"end":{"character":1,"line":2908},"start":{"character":0,"line":2901}},"selectionRange":{"end":{"character":22,"line":2902},"start":{"character":0,"line":2902}}},{"detail":"swig_type_info *[23]","kind":13,"name":"swig_types","range":{"end":{"character":37,"line":3005},"start":{"character":0,"line":3005}},"selectionRange":{"end":{"character":33,"line":3005},"start":{"character":23,"line":3005}}},{"detail":"swig_module_info","kind":13,"name":"swig_module","range":{"end":{"character":66,"line":3006},"start":{"character":0,"line":3006}},"selectionRange":{"end":{"character":35,"line":3006},"start":{"character":24,"line":3006}}},{"children":[{"children":[{"detail":"T *","kind":8,"name":"ptr","range":{"end":{"character":10,"line":3034},"start":{"character":4,"line":3034}},"selectionRange":{"end":{"character":10,"line":3034},"start":{"character":7,"line":3034}}},{"detail":"(T *)","kind":9,"name":"SwigSmartPointer","range":{"end":{"character":39,"line":3035},"start":{"character":4,"line":3035}},"selectionRange":{"end":{"character":20,"line":3035},"start":{"character":4,"line":3035}}},{"kind":9,"name":"~SwigSmartPointer","range":{"end":{"character":39,"line":3036},"start":{"character":4,"line":3036}},"selectionRange":{"end":{"character":5,"line":3036},"start":{"character":4,"line":3036}}},{"detail":"SwigSmartPointer &(SwigSmartPointer &)","kind":6,"name":"operator=","range":{"end":{"character":141,"line":3037},"start":{"character":4,"line":3037}},"selectionRange":{"end":{"character":30,"line":3037},"start":{"character":22,"line":3037}}},{"detail":"void (T *)","kind":6,"name":"reset","range":{"end":{"character":74,"line":3038},"start":{"character":4,"line":3038}},"selectionRange":{"end":{"character":14,"line":3038},"start":{"character":9,"line":3038}}}],"detail":"struct","kind":23,"name":"SwigSmartPointer","range":{"end":{"character":3,"line":3039},"start":{"character":2,"line":3033}},"selectionRange":{"end":{"character":25,"line":3033},"start":{"character":9,"line":3033}}},{"detail":"struct SwigSmartPointer","kind":8,"name":"pointer","range":{"end":{"character":11,"line":3039},"start":{"character":2,"line":3033}},"selectionRange":{"end":{"character":11,"line":3039},"start":{"character":4,"line":3039}}},{"detail":"SwigValueWrapper<T> &(const SwigValueWrapper<T> &)","kind":6,"name":"operator=","range":{"end":{"character":61,"line":3040},"start":{"character":2,"line":3040}},"selectionRange":{"end":{"character":28,"line":3040},"start":{"character":20,"line":3040}}},{"detail":"(const SwigValueWrapper<T> &)","kind":9,"name":"SwigValueWrapper","range":{"end":{"character":50,"line":3041},"start":{"character":2,"line":3041}},"selectionRange":{"end":{"character":18,"line":3041},"start":{"character":2,"line":3041}}},{"detail":"()","kind":9,"name":"SwigValueWrapper","range":{"end":{"character":37,"line":3043},"start":{"character":2,"line":3043}},"selectionRange":{"end":{"character":18,"line":3043},"start":{"character":2,"line":3043}}},{"detail":"SwigValueWrapper<T> &(const T &)","kind":6,"name":"operator=","range":{"end":{"character":106,"line":3044},"start":{"character":2,"line":3044}},"selectionRange":{"end":{"character":28,"line":3044},"start":{"character":20,"line":3044}}},{"detail":"SwigValueWrapper<T> &(T &&)","kind":6,"name":"operator=","range":{"end":{"character":112,"line":3046},"start":{"character":2,"line":3046}},"selectionRange":{"end":{"character":28,"line":3046},"start":{"character":20,"line":3046}}},{"detail":"T &&() const","kind":12,"name":"operator type-parameter-0-0 &&","range":{"end":{"character":58,"line":3047},"start":{"character":2,"line":3047}},"selectionRange":{"end":{"character":10,"line":3047},"start":{"character":2,"line":3047}}},{"detail":"T *() const","kind":6,"name":"operator&","range":{"end":{"character":46,"line":3051},"start":{"character":2,"line":3051}},"selectionRange":{"end":{"character":13,"line":3051},"start":{"character":5,"line":3051}}},{"detail":"void (SwigValueWrapper<T> &, T *)","kind":6,"name":"reset","range":{"end":{"character":70,"line":3052},"start":{"character":2,"line":3052}},"selectionRange":{"end":{"character":19,"line":3052},"start":{"character":14,"line":3052}}}],"detail":"template class","kind":5,"name":"SwigValueWrapper","range":{"end":{"character":1,"line":3053},"start":{"character":21,"line":3032}},"selectionRange":{"end":{"character":43,"line":3032},"start":{"character":27,"line":3032}}},{"detail":"template T ()","kind":12,"name":"SwigValueInit","range":{"end":{"character":1,"line":3066},"start":{"character":22,"line":3064}},"selectionRange":{"end":{"character":37,"line":3064},"start":{"character":24,"line":3064}}},{"children":[{"children":[{"detail":"int *","kind":8,"name":"_obj","range":{"end":{"character":18,"line":3087},"start":{"character":4,"line":3087}},"selectionRange":{"end":{"character":18,"line":3087},"start":{"character":14,"line":3087}}},{"detail":"()","kind":9,"name":"SwigPtr_PyObject","range":{"end":{"character":5,"line":3092},"start":{"character":4,"line":3090}},"selectionRange":{"end":{"character":20,"line":3090},"start":{"character":4,"line":3090}}},{"detail":"(const SwigPtr_PyObject &)","kind":9,"name":"SwigPtr_PyObject","range":{"end":{"character":5,"line":3099},"start":{"character":4,"line":3094}},"selectionRange":{"end":{"character":20,"line":3094},"start":{"character":4,"line":3094}}},{"detail":"(int *, bool)","kind":9,"name":"SwigPtr_PyObject","range":{"end":{"character":5,"line":3108},"start":{"character":4,"line":3101}},"selectionRange":{"end":{"character":20,"line":3101},"start":{"character":4,"line":3101}}},{"detail":"SwigPtr_PyObject &(const SwigPtr_PyObject &)","kind":6,"name":"operator=","range":{"end":{"character":5,"line":3118},"start":{"character":4,"line":3110}},"selectionRange":{"end":{"character":31,"line":3110},"start":{"character":23,"line":3110}}},{"kind":9,"name":"~SwigPtr_PyObject","range":{"end":{"character":5,"line":3125},"start":{"character":4,"line":3120}},"selectionRange":{"end":{"character":5,"line":3120},"start":{"character":4,"line":3120}}}],"detail":"class","kind":5,"name":"SwigPtr_PyObject","range":{"end":{"character":3,"line":3136},"start":{"character":2,"line":3085}},"selectionRange":{"end":{"character":24,"line":3085},"start":{"character":8,"line":3085}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":3137},"start":{"character":0,"line":3084}},"selectionRange":{"end":{"character":14,"line":3084},"start":{"character":10,"line":3084}}},{"children":[{"children":[{"detail":"(int *)","kind":9,"name":"SwigVar_PyObject","range":{"end":{"character":74,"line":3142},"start":{"character":4,"line":3142}},"selectionRange":{"end":{"character":20,"line":3142},"start":{"character":4,"line":3142}}},{"detail":"SwigVar_PyObject &(int *)","kind":6,"name":"operator=","range":{"end":{"character":5,"line":3149},"start":{"character":4,"line":3144}},"selectionRange":{"end":{"character":31,"line":3144},"start":{"character":23,"line":3144}}}],"detail":"struct","kind":23,"name":"SwigVar_PyObject","range":{"end":{"character":3,"line":3150},"start":{"character":2,"line":3141}},"selectionRange":{"end":{"character":25,"line":3141},"start":{"character":9,"line":3141}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":3151},"start":{"character":0,"line":3140}},"selectionRange":{"end":{"character":14,"line":3140},"start":{"character":10,"line":3140}}},{"children":[{"detail":"struct","kind":23,"name":"stop_iteration","range":{"end":{"character":3,"line":3188},"start":{"character":2,"line":3187}},"selectionRange":{"end":{"character":23,"line":3187},"start":{"character":9,"line":3187}}},{"children":[{"detail":"SwigPtr_PyObject","kind":8,"name":"_seq","range":{"end":{"character":25,"line":3192},"start":{"character":4,"line":3192}},"selectionRange":{"end":{"character":25,"line":3192},"start":{"character":21,"line":3192}}},{"detail":"(int *)","kind":9,"name":"SwigPyIterator","range":{"end":{"character":5,"line":3197},"start":{"character":4,"line":3195}},"selectionRange":{"end":{"character":18,"line":3195},"start":{"character":4,"line":3195}}},{"kind":9,"name":"~SwigPyIterator","range":{"end":{"character":32,"line":3200},"start":{"character":4,"line":3200}},"selectionRange":{"end":{"character":13,"line":3200},"start":{"character":12,"line":3200}}},{"detail":"int *() const","kind":6,"name":"value","range":{"end":{"character":39,"line":3203},"start":{"character":4,"line":3203}},"selectionRange":{"end":{"character":27,"line":3203},"start":{"character":22,"line":3203}}},{"detail":"SwigPyIterator *(size_t)","kind":6,"name":"incr","range":{"end":{"character":50,"line":3206},"start":{"character":4,"line":3206}},"selectionRange":{"end":{"character":32,"line":3206},"start":{"character":28,"line":3206}}},{"detail":"SwigPyIterator *(size_t)","kind":6,"name":"decr","range":{"end":{"character":5,"line":3212},"start":{"character":4,"line":3209}},"selectionRange":{"end":{"character":32,"line":3209},"start":{"character":28,"line":3209}}},{"detail":"ptrdiff_t (const SwigPyIterator &) const","kind":6,"name":"distance","range":{"end":{"character":5,"line":3218},"start":{"character":4,"line":3215}},"selectionRange":{"end":{"character":30,"line":3215},"start":{"character":22,"line":3215}}},{"detail":"bool (const SwigPyIterator &) const","kind":6,"name":"equal","range":{"end":{"character":5,"line":3223},"start":{"character":4,"line":3220}},"selectionRange":{"end":{"character":22,"line":3220},"start":{"character":17,"line":3220}}},{"detail":"SwigPyIterator *() const","kind":6,"name":"copy","range":{"end":{"character":44,"line":3226},"start":{"character":4,"line":3226}},"selectionRange":{"end":{"character":32,"line":3226},"start":{"character":28,"line":3226}}},{"detail":"int *()","kind":6,"name":"next","range":{"end":{"character":5,"line":3235},"start":{"character":4,"line":3228}},"selectionRange":{"end":{"character":18,"line":3228},"start":{"character":14,"line":3228}}},{"detail":"int *()","kind":6,"name":"__next__","range":{"end":{"character":5,"line":3241},"start":{"character":4,"line":3238}},"selectionRange":{"end":{"character":22,"line":3238},"start":{"character":14,"line":3238}}},{"detail":"int *()","kind":6,"name":"previous","range":{"end":{"character":5,"line":3250},"start":{"character":4,"line":3243}},"selectionRange":{"end":{"character":22,"line":3243},"start":{"character":14,"line":3243}}},{"detail":"SwigPyIterator *(ptrdiff_t)","kind":6,"name":"advance","range":{"end":{"character":5,"line":3255},"start":{"character":4,"line":3252}},"selectionRange":{"end":{"character":27,"line":3252},"start":{"character":20,"line":3252}}},{"detail":"bool (const SwigPyIterator &) const","kind":6,"name":"operator==","range":{"end":{"character":5,"line":3260},"start":{"character":4,"line":3257}},"selectionRange":{"end":{"character":17,"line":3257},"start":{"character":9,"line":3257}}},{"detail":"bool (const SwigPyIterator &) const","kind":6,"name":"operator!=","range":{"end":{"character":5,"line":3265},"start":{"character":4,"line":3262}},"selectionRange":{"end":{"character":17,"line":3262},"start":{"character":9,"line":3262}}},{"detail":"SwigPyIterator &(ptrdiff_t)","kind":6,"name":"operator+=","range":{"end":{"character":5,"line":3270},"start":{"character":4,"line":3267}},"selectionRange":{"end":{"character":28,"line":3267},"start":{"character":20,"line":3267}}},{"detail":"SwigPyIterator &(ptrdiff_t)","kind":6,"name":"operator-=","range":{"end":{"character":5,"line":3275},"start":{"character":4,"line":3272}},"selectionRange":{"end":{"character":28,"line":3272},"start":{"character":20,"line":3272}}},{"detail":"SwigPyIterator *(ptrdiff_t) const","kind":6,"name":"operator+","range":{"end":{"character":5,"line":3280},"start":{"character":4,"line":3277}},"selectionRange":{"end":{"character":28,"line":3277},"start":{"character":20,"line":3277}}},{"detail":"SwigPyIterator *(ptrdiff_t) const","kind":6,"name":"operator-","range":{"end":{"character":5,"line":3285},"start":{"character":4,"line":3282}},"selectionRange":{"end":{"character":28,"line":3282},"start":{"character":20,"line":3282}}},{"detail":"ptrdiff_t (const SwigPyIterator &) const","kind":6,"name":"operator-","range":{"end":{"character":5,"line":3290},"start":{"character":4,"line":3287}},"selectionRange":{"end":{"character":22,"line":3287},"start":{"character":14,"line":3287}}},{"detail":"swig_type_info *()","kind":6,"name":"descriptor","range":{"end":{"character":5,"line":3300},"start":{"character":4,"line":3292}},"selectionRange":{"end":{"character":37,"line":3292},"start":{"character":27,"line":3292}}}],"detail":"struct","kind":23,"name":"SwigPyIterator","range":{"end":{"character":3,"line":3301},"start":{"character":2,"line":3190}},"selectionRange":{"end":{"character":23,"line":3190},"start":{"character":9,"line":3190}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":3310},"start":{"character":0,"line":3186}},"selectionRange":{"end":{"character":14,"line":3186},"start":{"character":10,"line":3186}}},{"detail":"int (int *, double *)","kind":12,"name":"SWIG_AsVal_double","range":{"end":{"character":1,"line":3356},"start":{"character":0,"line":3313}},"selectionRange":{"end":{"character":17,"line":3314},"start":{"character":0,"line":3314}}},{"detail":"int (double *, double, double)","kind":12,"name":"SWIG_CanCastAsInteger","range":{"end":{"character":1,"line":3392},"start":{"character":0,"line":3365}},"selectionRange":{"end":{"character":21,"line":3366},"start":{"character":0,"line":3366}}},{"detail":"int (int *, unsigned long *)","kind":12,"name":"SWIG_AsVal_unsigned_SS_long","range":{"end":{"character":1,"line":3440},"start":{"character":0,"line":3395}},"selectionRange":{"end":{"character":27,"line":3396},"start":{"character":0,"line":3396}}},{"detail":"int (int *, unsigned long long *)","kind":12,"name":"SWIG_AsVal_unsigned_SS_long_SS_long","range":{"end":{"character":1,"line":3495},"start":{"character":0,"line":3459}},"selectionRange":{"end":{"character":35,"line":3460},"start":{"character":0,"line":3460}}},{"detail":"int (int *, size_t *)","kind":12,"name":"SWIG_AsVal_size_t","range":{"end":{"character":1,"line":3517},"start":{"character":0,"line":3499}},"selectionRange":{"end":{"character":17,"line":3500},"start":{"character":0,"line":3500}}},{"detail":"int *(long long)","kind":12,"name":"SWIG_From_long_SS_long","range":{"end":{"character":1,"line":3529},"start":{"character":0,"line":3524}},"selectionRange":{"end":{"character":22,"line":3525},"start":{"character":0,"line":3525}}},{"detail":"int *(ptrdiff_t)","kind":12,"name":"SWIG_From_ptrdiff_t","range":{"end":{"character":1,"line":3546},"start":{"character":0,"line":3533}},"selectionRange":{"end":{"character":19,"line":3534},"start":{"character":0,"line":3534}}},{"detail":"int *(bool)","kind":12,"name":"SWIG_From_bool","range":{"end":{"character":1,"line":3553},"start":{"character":0,"line":3549}},"selectionRange":{"end":{"character":16,"line":3550},"start":{"character":2,"line":3550}}},{"detail":"int (int *, long *)","kind":12,"name":"SWIG_AsVal_long","range":{"end":{"character":1,"line":3596},"start":{"character":0,"line":3556}},"selectionRange":{"end":{"character":15,"line":3557},"start":{"character":0,"line":3557}}},{"detail":"int (int *, long long *)","kind":12,"name":"SWIG_AsVal_long_SS_long","range":{"end":{"character":1,"line":3637},"start":{"character":0,"line":3600}},"selectionRange":{"end":{"character":23,"line":3601},"start":{"character":0,"line":3601}}},{"detail":"int (int *, ptrdiff_t *)","kind":12,"name":"SWIG_AsVal_ptrdiff_t","range":{"end":{"character":1,"line":3659},"start":{"character":0,"line":3641}},"selectionRange":{"end":{"character":20,"line":3642},"start":{"character":0,"line":3642}}},{"children":[{"children":[{"detail":"type alias","kind":5,"name":"noconst_type","range":{"end":{"character":29,"line":3680},"start":{"character":4,"line":3680}},"selectionRange":{"end":{"character":29,"line":3680},"start":{"character":17,"line":3680}}}],"detail":"template struct","kind":23,"name":"noconst_traits","range":{"end":{"character":3,"line":3681},"start":{"character":2,"line":3679}},"selectionRange":{"end":{"character":23,"line":3679},"start":{"character":9,"line":3679}}},{"children":[{"detail":"type alias","kind":5,"name":"noconst_type","range":{"end":{"character":29,"line":3685},"start":{"character":4,"line":3685}},"selectionRange":{"end":{"character":29,"line":3685},"start":{"character":17,"line":3685}}}],"detail":"template struct","kind":23,"name":"noconst_traits<const Type>","range":{"end":{"character":3,"line":3686},"start":{"character":2,"line":3683}},"selectionRange":{"end":{"character":23,"line":3684},"start":{"character":9,"line":3684}}},{"detail":"struct","kind":23,"name":"pointer_category","range":{"end":{"character":29,"line":3691},"start":{"character":2,"line":3691}},"selectionRange":{"end":{"character":25,"line":3691},"start":{"character":9,"line":3691}}},{"detail":"struct","kind":23,"name":"value_category","range":{"end":{"character":27,"line":3692},"start":{"character":2,"line":3692}},"selectionRange":{"end":{"character":23,"line":3692},"start":{"character":9,"line":3692}}},{"detail":"template struct","kind":23,"name":"traits","range":{"end":{"character":41,"line":3697},"start":{"character":24,"line":3697}},"selectionRange":{"end":{"character":37,"line":3697},"start":{"character":31,"line":3697}}},{"detail":"template const char *()","kind":12,"name":"type_name","range":{"end":{"character":3,"line":3702},"start":{"character":2,"line":3700}},"selectionRange":{"end":{"character":30,"line":3700},"start":{"character":21,"line":3700}}},{"children":[{"detail":"swig_type_info *(std::string)","kind":6,"name":"type_query","range":{"end":{"character":5,"line":3708},"start":{"character":4,"line":3705}},"selectionRange":{"end":{"character":37,"line":3705},"start":{"character":27,"line":3705}}},{"detail":"swig_type_info *()","kind":6,"name":"type_info","range":{"end":{"character":5,"line":3712},"start":{"character":4,"line":3709}},"selectionRange":{"end":{"character":36,"line":3709},"start":{"character":27,"line":3709}}}],"detail":"template struct","kind":23,"name":"traits_info","range":{"end":{"character":3,"line":3713},"start":{"character":24,"line":3704}},"selectionRange":{"end":{"character":42,"line":3704},"start":{"character":31,"line":3704}}},{"children":[{"detail":"swig_type_info *(std::string)","kind":6,"name":"type_query","range":{"end":{"character":5,"line":3722},"start":{"character":4,"line":3719}},"selectionRange":{"end":{"character":37,"line":3719},"start":{"character":27,"line":3719}}},{"detail":"swig_type_info *()","kind":6,"name":"type_info","range":{"end":{"character":5,"line":3726},"start":{"character":4,"line":3723}},"selectionRange":{"end":{"character":36,"line":3723},"start":{"character":27,"line":3723}}}],"detail":"template struct","kind":23,"name":"traits_info<Type *>","range":{"end":{"character":3,"line":3727},"start":{"character":2,"line":3718}},"selectionRange":{"end":{"character":42,"line":3718},"start":{"character":31,"line":3718}}},{"detail":"template swig_type_info *()","kind":12,"name":"type_info","range":{"end":{"character":3,"line":3732},"start":{"character":2,"line":3730}},"selectionRange":{"end":{"character":34,"line":3730},"start":{"character":25,"line":3730}}},{"children":[{"detail":"type alias","kind":5,"name":"category","range":{"end":{"character":37,"line":3738},"start":{"character":4,"line":3738}},"selectionRange":{"end":{"character":37,"line":3738},"start":{"character":29,"line":3738}}},{"detail":"std::string (const char *)","kind":6,"name":"make_ptr_name","range":{"end":{"character":5,"line":3743},"start":{"character":4,"line":3739}},"selectionRange":{"end":{"character":36,"line":3739},"start":{"character":23,"line":3739}}},{"detail":"const char *()","kind":6,"name":"type_name","range":{"end":{"character":5,"line":3747},"start":{"character":4,"line":3744}},"selectionRange":{"end":{"character":32,"line":3744},"start":{"character":23,"line":3744}}}],"detail":"template struct","kind":23,"name":"traits<Type *>","range":{"end":{"character":3,"line":3748},"start":{"character":2,"line":3737}},"selectionRange":{"end":{"character":37,"line":3737},"start":{"character":31,"line":3737}}},{"detail":"template struct","kind":23,"name":"traits_as","range":{"end":{"character":22,"line":3751},"start":{"character":2,"line":3751}},"selectionRange":{"end":{"character":18,"line":3751},"start":{"character":9,"line":3751}}},{"detail":"template struct","kind":23,"name":"traits_check","range":{"end":{"character":25,"line":3754},"start":{"character":2,"line":3754}},"selectionRange":{"end":{"character":21,"line":3754},"start":{"character":9,"line":3754}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":3756},"start":{"character":0,"line":3677}},"selectionRange":{"end":{"character":14,"line":3677},"start":{"character":10,"line":3677}}},{"children":[{"children":[{"detail":"int *(Type *, int)","kind":6,"name":"from","range":{"end":{"character":5,"line":3766},"start":{"character":4,"line":3764}},"selectionRange":{"end":{"character":25,"line":3764},"start":{"character":21,"line":3764}}}],"detail":"template struct","kind":23,"name":"traits_from_ptr","range":{"end":{"character":3,"line":3767},"start":{"character":24,"line":3763}},"selectionRange":{"end":{"character":46,"line":3763},"start":{"character":31,"line":3763}}},{"children":[{"detail":"int *(const Type &)","kind":6,"name":"from","range":{"end":{"character":5,"line":3772},"start":{"character":4,"line":3770}},"selectionRange":{"end":{"character":25,"line":3770},"start":{"character":21,"line":3770}}}],"detail":"template struct","kind":23,"name":"traits_from","range":{"end":{"character":3,"line":3773},"start":{"character":24,"line":3769}},"selectionRange":{"end":{"character":42,"line":3769},"start":{"character":31,"line":3769}}},{"children":[{"detail":"int *(Type *)","kind":6,"name":"from","range":{"end":{"character":5,"line":3778},"start":{"character":4,"line":3776}},"selectionRange":{"end":{"character":25,"line":3776},"start":{"character":21,"line":3776}}}],"detail":"template struct","kind":23,"name":"traits_from<Type *>","range":{"end":{"character":3,"line":3779},"start":{"character":2,"line":3775}},"selectionRange":{"end":{"character":42,"line":3775},"start":{"character":31,"line":3775}}},{"children":[{"detail":"int *(const Type *)","kind":6,"name":"from","range":{"end":{"character":5,"line":3784},"start":{"character":4,"line":3782}},"selectionRange":{"end":{"character":25,"line":3782},"start":{"character":21,"line":3782}}}],"detail":"template struct","kind":23,"name":"traits_from<const Type *>","range":{"end":{"character":3,"line":3785},"start":{"character":2,"line":3781}},"selectionRange":{"end":{"character":42,"line":3781},"start":{"character":31,"line":3781}}},{"detail":"template int *(const Type &)","kind":12,"name":"from","range":{"end":{"character":3,"line":3791},"start":{"character":2,"line":3789}},"selectionRange":{"end":{"character":23,"line":3789},"start":{"character":19,"line":3789}}},{"detail":"template int *(Type *, int)","kind":12,"name":"from_ptr","range":{"end":{"character":3,"line":3796},"start":{"character":2,"line":3794}},"selectionRange":{"end":{"character":27,"line":3794},"start":{"character":19,"line":3794}}},{"children":[{"detail":"int (int *, Type **)","kind":6,"name":"asptr","range":{"end":{"character":5,"line":3820},"start":{"character":4,"line":3803}},"selectionRange":{"end":{"character":20,"line":3803},"start":{"character":15,"line":3803}}}],"detail":"template struct","kind":23,"name":"traits_asptr","range":{"end":{"character":3,"line":3821},"start":{"character":2,"line":3802}},"selectionRange":{"end":{"character":21,"line":3802},"start":{"character":9,"line":3802}}},{"detail":"template int (int *, Type **)","kind":12,"name":"asptr","range":{"end":{"character":3,"line":3826},"start":{"character":2,"line":3824}},"selectionRange":{"end":{"character":18,"line":3824},"start":{"character":13,"line":3824}}},{"children":[{"detail":"int (int *, Type *)","kind":6,"name":"asval","range":{"end":{"character":5,"line":3849},"start":{"character":4,"line":3830}},"selectionRange":{"end":{"character":20,"line":3830},"start":{"character":15,"line":3830}}}],"detail":"template struct","kind":23,"name":"traits_asval","range":{"end":{"character":3,"line":3850},"start":{"character":2,"line":3829}},"selectionRange":{"end":{"character":21,"line":3829},"start":{"character":9,"line":3829}}},{"children":[{"detail":"int (int *, Type **)","kind":6,"name":"asval","range":{"end":{"character":5,"line":3865},"start":{"character":4,"line":3853}},"selectionRange":{"end":{"character":20,"line":3853},"start":{"character":15,"line":3853}}}],"detail":"template struct","kind":23,"name":"traits_asval<Type *>","range":{"end":{"character":3,"line":3866},"start":{"character":2,"line":3852}},"selectionRange":{"end":{"character":43,"line":3852},"start":{"character":31,"line":3852}}},{"detail":"template int (int *, Type *)","kind":12,"name":"asval","range":{"end":{"character":3,"line":3871},"start":{"character":2,"line":3869}},"selectionRange":{"end":{"character":18,"line":3869},"start":{"character":13,"line":3869}}},{"children":[{"detail":"Type (int *)","kind":6,"name":"as","range":{"end":{"character":5,"line":3885},"start":{"character":4,"line":3875}},"selectionRange":{"end":{"character":18,"line":3875},"start":{"character":16,"line":3875}}}],"detail":"template struct","kind":23,"name":"traits_as<Type, value_category>","range":{"end":{"character":3,"line":3886},"start":{"character":2,"line":3873}},"selectionRange":{"end":{"character":18,"line":3874},"start":{"character":9,"line":3874}}},{"children":[{"detail":"Type (int *)","kind":6,"name":"as","range":{"end":{"character":5,"line":3907},"start":{"character":4,"line":3890}},"selectionRange":{"end":{"character":18,"line":3890},"start":{"character":16,"line":3890}}}],"detail":"template struct","kind":23,"name":"traits_as<Type, pointer_category>","range":{"end":{"character":3,"line":3908},"start":{"character":2,"line":3888}},"selectionRange":{"end":{"character":18,"line":3889},"start":{"character":9,"line":3889}}},{"children":[{"detail":"Type *(int *)","kind":6,"name":"as","range":{"end":{"character":5,"line":3923},"start":{"character":4,"line":3912}},"selectionRange":{"end":{"character":19,"line":3912},"start":{"character":17,"line":3912}}}],"detail":"template struct","kind":23,"name":"traits_as<Type *, pointer_category>","range":{"end":{"character":3,"line":3924},"start":{"character":2,"line":3910}},"selectionRange":{"end":{"character":18,"line":3911},"start":{"character":9,"line":3911}}},{"detail":"template Type (int *)","kind":12,"name":"as","range":{"end":{"character":3,"line":3929},"start":{"character":2,"line":3927}},"selectionRange":{"end":{"character":16,"line":3927},"start":{"character":14,"line":3927}}},{"children":[{"detail":"bool (int *)","kind":6,"name":"check","range":{"end":{"character":5,"line":3936},"start":{"character":4,"line":3933}},"selectionRange":{"end":{"character":21,"line":3933},"start":{"character":16,"line":3933}}}],"detail":"template struct","kind":23,"name":"traits_check<Type, value_category>","range":{"end":{"character":3,"line":3937},"start":{"character":2,"line":3931}},"selectionRange":{"end":{"character":21,"line":3932},"start":{"character":9,"line":3932}}},{"children":[{"detail":"bool (int *)","kind":6,"name":"check","range":{"end":{"character":5,"line":3944},"start":{"character":4,"line":3941}},"selectionRange":{"end":{"character":21,"line":3941},"start":{"character":16,"line":3941}}}],"detail":"template struct","kind":23,"name":"traits_check<Type, pointer_category>","range":{"end":{"character":3,"line":3945},"start":{"character":2,"line":3939}},"selectionRange":{"end":{"character":21,"line":3940},"start":{"character":9,"line":3940}}},{"detail":"template bool (int *)","kind":12,"name":"check","range":{"end":{"character":3,"line":3950},"start":{"character":2,"line":3948}},"selectionRange":{"end":{"character":19,"line":3948},"start":{"character":14,"line":3948}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":3951},"start":{"character":0,"line":3759}},"selectionRange":{"end":{"character":14,"line":3759},"start":{"character":10,"line":3759}}},{"children":[{"children":[{"detail":"bool (const swig::SwigPtr_PyObject &, const swig::SwigPtr_PyObject &) const","kind":6,"name":"operator()","range":{"end":{"character":5,"line":3989},"start":{"character":4,"line":3985}},"selectionRange":{"end":{"character":12,"line":3986},"start":{"character":4,"line":3986}}}],"detail":"struct","kind":23,"name":"less<swig::SwigPtr_PyObject>","range":{"end":{"character":3,"line":3990},"start":{"character":2,"line":3982}},"selectionRange":{"end":{"character":13,"line":3983},"start":{"character":9,"line":3983}}},{"children":[{"detail":"bool (const swig::SwigVar_PyObject &, const swig::SwigVar_PyObject &) const","kind":6,"name":"operator()","range":{"end":{"character":5,"line":3999},"start":{"character":4,"line":3995}},"selectionRange":{"end":{"character":12,"line":3996},"start":{"character":4,"line":3996}}}],"detail":"struct","kind":23,"name":"less<swig::SwigVar_PyObject>","range":{"end":{"character":3,"line":4000},"start":{"character":2,"line":3992}},"selectionRange":{"end":{"character":13,"line":3993},"start":{"character":9,"line":3993}}}],"kind":3,"name":"std","range":{"end":{"character":1,"line":4002},"start":{"character":0,"line":3956}},"selectionRange":{"end":{"character":13,"line":3956},"start":{"character":10,"line":3956}}},{"kind":3,"name":"swig","range":{"end":{"character":1,"line":4033},"start":{"character":0,"line":4004}},"selectionRange":{"end":{"character":14,"line":4004},"start":{"character":10,"line":4004}}},{"children":[{"detail":"template size_t (Difference, size_t, bool)","kind":12,"name":"check_index","range":{"end":{"character":3,"line":4048},"start":{"character":2,"line":4037}},"selectionRange":{"end":{"character":13,"line":4038},"start":{"character":2,"line":4038}}},{"detail":"template void (Difference, Difference, int, size_t, Difference &, Difference &, bool)","kind":12,"name":"slice_adjust","range":{"end":{"character":3,"line":4088},"start":{"character":2,"line":4051}},"selectionRange":{"end":{"character":14,"line":4052},"start":{"character":2,"line":4052}}},{"detail":"template typename Sequence::iterator (Sequence *, Difference)","kind":12,"name":"getpos","range":{"end":{"character":3,"line":4096},"start":{"character":2,"line":4091}},"selectionRange":{"end":{"character":8,"line":4092},"start":{"character":2,"line":4092}}},{"detail":"template typename Sequence::const_iterator (const Sequence *, Difference)","kind":12,"name":"cgetpos","range":{"end":{"character":3,"line":4104},"start":{"character":2,"line":4099}},"selectionRange":{"end":{"character":9,"line":4100},"start":{"character":2,"line":4100}}},{"detail":"template void (Sequence *, const typename Sequence::iterator &)","kind":12,"name":"erase","range":{"end":{"character":3,"line":4110},"start":{"character":2,"line":4107}},"selectionRange":{"end":{"character":7,"line":4108},"start":{"character":2,"line":4108}}},{"children":[{"detail":"void (Sequence &, typename Sequence::size_type)","kind":6,"name":"reserve","range":{"end":{"character":5,"line":4116},"start":{"character":4,"line":4114}},"selectionRange":{"end":{"character":23,"line":4114},"start":{"character":16,"line":4114}}}],"detail":"template struct","kind":23,"name":"traits_reserve","range":{"end":{"character":3,"line":4117},"start":{"character":2,"line":4113}},"selectionRange":{"end":{"character":23,"line":4113},"start":{"character":9,"line":4113}}},{"detail":"template Sequence *(const Sequence *, Difference, Difference, int)","kind":12,"name":"getslice","range":{"end":{"character":3,"line":4160},"start":{"character":2,"line":4120}},"selectionRange":{"end":{"character":10,"line":4121},"start":{"character":2,"line":4121}}},{"detail":"template void (Sequence *, Difference, Difference, int, const InputSeq &)","kind":12,"name":"setslice","range":{"end":{"character":3,"line":4223},"start":{"character":2,"line":4163}},"selectionRange":{"end":{"character":10,"line":4164},"start":{"character":2,"line":4164}}},{"detail":"template void (Sequence *, Difference, Difference, int)","kind":12,"name":"delslice","range":{"end":{"character":3,"line":4261},"start":{"character":2,"line":4226}},"selectionRange":{"end":{"character":10,"line":4227},"start":{"character":2,"line":4227}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":4262},"start":{"character":0,"line":4035}},"selectionRange":{"end":{"character":14,"line":4035},"start":{"character":10,"line":4035}}},{"children":[{"children":[{"detail":"type alias","kind":5,"name":"out_iterator","range":{"end":{"character":36,"line":4312},"start":{"character":4,"line":4312}},"selectionRange":{"end":{"character":36,"line":4312},"start":{"character":24,"line":4312}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":78,"line":4313},"start":{"character":4,"line":4313}},"selectionRange":{"end":{"character":78,"line":4313},"start":{"character":68,"line":4313}}},{"detail":"type alias","kind":5,"name":"self_type","range":{"end":{"character":52,"line":4314},"start":{"character":4,"line":4314}},"selectionRange":{"end":{"character":52,"line":4314},"start":{"character":43,"line":4314}}},{"detail":"(out_iterator, int *)","kind":9,"name":"SwigPyIterator_T","range":{"end":{"character":5,"line":4319},"start":{"character":4,"line":4316}},"selectionRange":{"end":{"character":20,"line":4316},"start":{"character":4,"line":4316}}},{"detail":"const out_iterator &() const","kind":6,"name":"get_current","range":{"end":{"character":5,"line":4324},"start":{"character":4,"line":4321}},"selectionRange":{"end":{"character":35,"line":4321},"start":{"character":24,"line":4321}}},{"detail":"bool (const SwigPyIterator &) const","kind":6,"name":"equal","range":{"end":{"character":5,"line":4335},"start":{"character":4,"line":4327}},"selectionRange":{"end":{"character":14,"line":4327},"start":{"character":9,"line":4327}}},{"detail":"ptrdiff_t (const SwigPyIterator &) const","kind":6,"name":"distance","range":{"end":{"character":5,"line":4345},"start":{"character":4,"line":4337}},"selectionRange":{"end":{"character":22,"line":4337},"start":{"character":14,"line":4337}}},{"detail":"out_iterator","kind":8,"name":"current","range":{"end":{"character":24,"line":4348},"start":{"character":4,"line":4348}},"selectionRange":{"end":{"character":24,"line":4348},"start":{"character":17,"line":4348}}}],"detail":"template class","kind":5,"name":"SwigPyIterator_T","range":{"end":{"character":3,"line":4349},"start":{"character":2,"line":4309}},"selectionRange":{"end":{"character":24,"line":4309},"start":{"character":8,"line":4309}}},{"children":[{"detail":"type alias","kind":5,"name":"argument_type","range":{"end":{"character":42,"line":4354},"start":{"character":4,"line":4354}},"selectionRange":{"end":{"character":42,"line":4354},"start":{"character":29,"line":4354}}},{"detail":"type alias","kind":5,"name":"result_type","range":{"end":{"character":33,"line":4355},"start":{"character":4,"line":4355}},"selectionRange":{"end":{"character":33,"line":4355},"start":{"character":22,"line":4355}}},{"detail":"result_type (argument_type) const","kind":6,"name":"operator()","range":{"end":{"character":5,"line":4359},"start":{"character":4,"line":4356}},"selectionRange":{"end":{"character":24,"line":4356},"start":{"character":16,"line":4356}}}],"detail":"template struct","kind":23,"name":"from_oper","range":{"end":{"character":3,"line":4360},"start":{"character":2,"line":4352}},"selectionRange":{"end":{"character":18,"line":4352},"start":{"character":9,"line":4352}}},{"children":[{"detail":"FromOper","kind":8,"name":"from","range":{"end":{"character":17,"line":4368},"start":{"character":4,"line":4368}},"selectionRange":{"end":{"character":17,"line":4368},"start":{"character":13,"line":4368}}},{"detail":"type alias","kind":5,"name":"out_iterator","range":{"end":{"character":36,"line":4369},"start":{"character":4,"line":4369}},"selectionRange":{"end":{"character":36,"line":4369},"start":{"character":24,"line":4369}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":32,"line":4370},"start":{"character":4,"line":4370}},"selectionRange":{"end":{"character":32,"line":4370},"start":{"character":22,"line":4370}}},{"detail":"type alias","kind":5,"name":"base","range":{"end":{"character":48,"line":4371},"start":{"character":4,"line":4371}},"selectionRange":{"end":{"character":48,"line":4371},"start":{"character":44,"line":4371}}},{"detail":"type alias","kind":5,"name":"self_type","range":{"end":{"character":83,"line":4372},"start":{"character":4,"line":4372}},"selectionRange":{"end":{"character":83,"line":4372},"start":{"character":74,"line":4372}}},{"detail":"(out_iterator, int *)","kind":9,"name":"SwigPyForwardIteratorOpen_T","range":{"end":{"character":5,"line":4377},"start":{"character":4,"line":4374}},"selectionRange":{"end":{"character":31,"line":4374},"start":{"character":4,"line":4374}}},{"detail":"int *() const","kind":6,"name":"value","range":{"end":{"character":5,"line":4381},"start":{"character":4,"line":4379}},"selectionRange":{"end":{"character":19,"line":4379},"start":{"character":14,"line":4379}}},{"detail":"SwigPyIterator *() const","kind":6,"name":"copy","range":{"end":{"character":5,"line":4386},"start":{"character":4,"line":4383}},"selectionRange":{"end":{"character":24,"line":4383},"start":{"character":20,"line":4383}}},{"detail":"SwigPyIterator *(size_t)","kind":6,"name":"incr","range":{"end":{"character":5,"line":4394},"start":{"character":4,"line":4388}},"selectionRange":{"end":{"character":24,"line":4388},"start":{"character":20,"line":4388}}}],"detail":"template class","kind":5,"name":"SwigPyForwardIteratorOpen_T","range":{"end":{"character":3,"line":4396},"start":{"character":2,"line":4365}},"selectionRange":{"end":{"character":35,"line":4365},"start":{"character":8,"line":4365}}},{"children":[{"detail":"FromOper","kind":8,"name":"from","range":{"end":{"character":17,"line":4404},"start":{"character":4,"line":4404}},"selectionRange":{"end":{"character":17,"line":4404},"start":{"character":13,"line":4404}}},{"detail":"type alias","kind":5,"name":"out_iterator","range":{"end":{"character":36,"line":4405},"start":{"character":4,"line":4405}},"selectionRange":{"end":{"character":36,"line":4405},"start":{"character":24,"line":4405}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":32,"line":4406},"start":{"character":4,"line":4406}},"selectionRange":{"end":{"character":32,"line":4406},"start":{"character":22,"line":4406}}},{"detail":"type alias","kind":5,"name":"base","range":{"end":{"character":48,"line":4407},"start":{"character":4,"line":4407}},"selectionRange":{"end":{"character":48,"line":4407},"start":{"character":44,"line":4407}}},{"detail":"type alias","kind":5,"name":"self_type","range":{"end":{"character":76,"line":4408},"start":{"character":4,"line":4408}},"selectionRange":{"end":{"character":76,"line":4408},"start":{"character":67,"line":4408}}},{"detail":"(out_iterator, int *)","kind":9,"name":"SwigPyIteratorOpen_T","range":{"end":{"character":5,"line":4413},"start":{"character":4,"line":4410}},"selectionRange":{"end":{"character":24,"line":4410},"start":{"character":4,"line":4410}}},{"detail":"SwigPyIterator *(size_t)","kind":6,"name":"decr","range":{"end":{"character":5,"line":4421},"start":{"character":4,"line":4415}},"selectionRange":{"end":{"character":24,"line":4415},"start":{"character":20,"line":4415}}}],"detail":"template class","kind":5,"name":"SwigPyIteratorOpen_T","range":{"end":{"character":3,"line":4422},"start":{"character":2,"line":4401}},"selectionRange":{"end":{"character":28,"line":4401},"start":{"character":8,"line":4401}}},{"children":[{"detail":"FromOper","kind":8,"name":"from","range":{"end":{"character":17,"line":4430},"start":{"character":4,"line":4430}},"selectionRange":{"end":{"character":17,"line":4430},"start":{"character":13,"line":4430}}},{"detail":"type alias","kind":5,"name":"out_iterator","range":{"end":{"character":36,"line":4431},"start":{"character":4,"line":4431}},"selectionRange":{"end":{"character":36,"line":4431},"start":{"character":24,"line":4431}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":32,"line":4432},"start":{"character":4,"line":4432}},"selectionRange":{"end":{"character":32,"line":4432},"start":{"character":22,"line":4432}}},{"detail":"type alias","kind":5,"name":"base","range":{"end":{"character":48,"line":4433},"start":{"character":4,"line":4433}},"selectionRange":{"end":{"character":48,"line":4433},"start":{"character":44,"line":4433}}},{"detail":"type alias","kind":5,"name":"self_type","range":{"end":{"character":85,"line":4434},"start":{"character":4,"line":4434}},"selectionRange":{"end":{"character":85,"line":4434},"start":{"character":76,"line":4434}}},{"detail":"(out_iterator, out_iterator, out_iterator, int *)","kind":9,"name":"SwigPyForwardIteratorClosed_T","range":{"end":{"character":5,"line":4439},"start":{"character":4,"line":4436}},"selectionRange":{"end":{"character":33,"line":4436},"start":{"character":4,"line":4436}}},{"detail":"int *() const","kind":6,"name":"value","range":{"end":{"character":5,"line":4447},"start":{"character":4,"line":4441}},"selectionRange":{"end":{"character":19,"line":4441},"start":{"character":14,"line":4441}}},{"detail":"SwigPyIterator *() const","kind":6,"name":"copy","range":{"end":{"character":5,"line":4452},"start":{"character":4,"line":4449}},"selectionRange":{"end":{"character":24,"line":4449},"start":{"character":20,"line":4449}}},{"detail":"SwigPyIterator *(size_t)","kind":6,"name":"incr","range":{"end":{"character":5,"line":4464},"start":{"character":4,"line":4454}},"selectionRange":{"end":{"character":24,"line":4454},"start":{"character":20,"line":4454}}},{"detail":"out_iterator","kind":8,"name":"begin","range":{"end":{"character":22,"line":4467},"start":{"character":4,"line":4467}},"selectionRange":{"end":{"character":22,"line":4467},"start":{"character":17,"line":4467}}},{"detail":"out_iterator","kind":8,"name":"end","range":{"end":{"character":20,"line":4468},"start":{"character":4,"line":4468}},"selectionRange":{"end":{"character":20,"line":4468},"start":{"character":17,"line":4468}}}],"detail":"template class","kind":5,"name":"SwigPyForwardIteratorClosed_T","range":{"end":{"character":3,"line":4469},"start":{"character":2,"line":4427}},"selectionRange":{"end":{"character":37,"line":4427},"start":{"character":8,"line":4427}}},{"children":[{"detail":"FromOper","kind":8,"name":"from","range":{"end":{"character":17,"line":4477},"start":{"character":4,"line":4477}},"selectionRange":{"end":{"character":17,"line":4477},"start":{"character":13,"line":4477}}},{"detail":"type alias","kind":5,"name":"out_iterator","range":{"end":{"character":36,"line":4478},"start":{"character":4,"line":4478}},"selectionRange":{"end":{"character":36,"line":4478},"start":{"character":24,"line":4478}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":32,"line":4479},"start":{"character":4,"line":4479}},"selectionRange":{"end":{"character":32,"line":4479},"start":{"character":22,"line":4479}}},{"detail":"type alias","kind":5,"name":"base","range":{"end":{"character":48,"line":4480},"start":{"character":4,"line":4480}},"selectionRange":{"end":{"character":48,"line":4480},"start":{"character":44,"line":4480}}},{"detail":"type alias","kind":5,"name":"base0","range":{"end":{"character":81,"line":4481},"start":{"character":4,"line":4481}},"selectionRange":{"end":{"character":81,"line":4481},"start":{"character":76,"line":4481}}},{"detail":"type alias","kind":5,"name":"self_type","range":{"end":{"character":78,"line":4482},"start":{"character":4,"line":4482}},"selectionRange":{"end":{"character":78,"line":4482},"start":{"character":69,"line":4482}}},{"detail":"(out_iterator, out_iterator, out_iterator, int *)","kind":9,"name":"SwigPyIteratorClosed_T","range":{"end":{"character":5,"line":4487},"start":{"character":4,"line":4484}},"selectionRange":{"end":{"character":26,"line":4484},"start":{"character":4,"line":4484}}},{"detail":"SwigPyIterator *(size_t)","kind":6,"name":"decr","range":{"end":{"character":5,"line":4499},"start":{"character":4,"line":4489}},"selectionRange":{"end":{"character":24,"line":4489},"start":{"character":20,"line":4489}}}],"detail":"template class","kind":5,"name":"SwigPyIteratorClosed_T","range":{"end":{"character":3,"line":4500},"start":{"character":2,"line":4474}},"selectionRange":{"end":{"character":30,"line":4474},"start":{"character":8,"line":4474}}},{"detail":"template SwigPyIterator *(const OutIter &, const OutIter &, const OutIter &, int *)","kind":12,"name":"make_output_forward_iterator","range":{"end":{"character":3,"line":4508},"start":{"character":2,"line":4504}},"selectionRange":{"end":{"character":30,"line":4505},"start":{"character":2,"line":4505}}},{"detail":"template SwigPyIterator *(const OutIter &, const OutIter &, const OutIter &, int *)","kind":12,"name":"make_output_iterator","range":{"end":{"character":3,"line":4515},"start":{"character":2,"line":4511}},"selectionRange":{"end":{"character":22,"line":4512},"start":{"character":2,"line":4512}}},{"detail":"template SwigPyIterator *(const OutIter &, int *)","kind":12,"name":"make_output_forward_iterator","range":{"end":{"character":3,"line":4522},"start":{"character":2,"line":4518}},"selectionRange":{"end":{"character":30,"line":4519},"start":{"character":2,"line":4519}}},{"detail":"template SwigPyIterator *(const OutIter &, int *)","kind":12,"name":"make_output_iterator","range":{"end":{"character":3,"line":4529},"start":{"character":2,"line":4525}},"selectionRange":{"end":{"character":22,"line":4526},"start":{"character":2,"line":4526}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":4531},"start":{"character":0,"line":4307}},"selectionRange":{"end":{"character":14,"line":4307},"start":{"character":10,"line":4307}}},{"children":[{"children":[{"detail":"(int *, int)","kind":9,"name":"SwigPySequence_Ref","range":{"end":{"character":5,"line":4542},"start":{"character":4,"line":4539}},"selectionRange":{"end":{"character":22,"line":4539},"start":{"character":4,"line":4539}}},{"detail":"T () const","kind":12,"name":"operator type-parameter-0-0","range":{"end":{"character":5,"line":4559},"start":{"character":4,"line":4544}},"selectionRange":{"end":{"character":12,"line":4544},"start":{"character":4,"line":4544}}},{"detail":"SwigPySequence_Ref<T> &(const T &)","kind":6,"name":"operator=","range":{"end":{"character":5,"line":4565},"start":{"character":4,"line":4561}},"selectionRange":{"end":{"character":32,"line":4561},"start":{"character":24,"line":4561}}},{"detail":"int *","kind":8,"name":"_seq","range":{"end":{"character":18,"line":4568},"start":{"character":4,"line":4568}},"selectionRange":{"end":{"character":18,"line":4568},"start":{"character":14,"line":4568}}},{"detail":"int","kind":8,"name":"_index","range":{"end":{"character":21,"line":4569},"start":{"character":4,"line":4569}},"selectionRange":{"end":{"character":21,"line":4569},"start":{"character":15,"line":4569}}}],"detail":"template struct","kind":23,"name":"SwigPySequence_Ref","range":{"end":{"character":3,"line":4570},"start":{"character":2,"line":4537}},"selectionRange":{"end":{"character":27,"line":4537},"start":{"character":9,"line":4537}}},{"children":[{"detail":"(const T &)","kind":9,"name":"SwigPySequence_ArrowProxy","range":{"end":{"character":56,"line":4575},"start":{"character":4,"line":4575}},"selectionRange":{"end":{"character":29,"line":4575},"start":{"character":4,"line":4575}}},{"detail":"const T *() const","kind":6,"name":"operator->","range":{"end":{"character":52,"line":4576},"start":{"character":4,"line":4576}},"selectionRange":{"end":{"character":21,"line":4576},"start":{"character":13,"line":4576}}},{"detail":"const T *() const","kind":12,"name":"operator const type-parameter-0-0 *","range":{"end":{"character":50,"line":4577},"start":{"character":4,"line":4577}},"selectionRange":{"end":{"character":12,"line":4577},"start":{"character":4,"line":4577}}},{"detail":"T","kind":8,"name":"m_value","range":{"end":{"character":13,"line":4578},"start":{"character":4,"line":4578}},"selectionRange":{"end":{"character":13,"line":4578},"start":{"character":6,"line":4578}}}],"detail":"template struct","kind":23,"name":"SwigPySequence_ArrowProxy","range":{"end":{"character":3,"line":4579},"start":{"character":2,"line":4573}},"selectionRange":{"end":{"character":34,"line":4573},"start":{"character":9,"line":4573}}},{"children":[{"detail":"type alias","kind":5,"name":"self","range":{"end":{"character":60,"line":4584},"start":{"character":4,"line":4584}},"selectionRange":{"end":{"character":60,"line":4584},"start":{"character":56,"line":4584}}},{"detail":"type alias","kind":5,"name":"iterator_category","range":{"end":{"character":61,"line":4586},"start":{"character":4,"line":4586}},"selectionRange":{"end":{"character":61,"line":4586},"start":{"character":44,"line":4586}}},{"detail":"type alias","kind":5,"name":"reference","range":{"end":{"character":31,"line":4587},"start":{"character":4,"line":4587}},"selectionRange":{"end":{"character":31,"line":4587},"start":{"character":22,"line":4587}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":24,"line":4588},"start":{"character":4,"line":4588}},"selectionRange":{"end":{"character":24,"line":4588},"start":{"character":14,"line":4588}}},{"detail":"type alias","kind":5,"name":"pointer","range":{"end":{"character":22,"line":4589},"start":{"character":4,"line":4589}},"selectionRange":{"end":{"character":22,"line":4589},"start":{"character":15,"line":4589}}},{"detail":"type alias","kind":5,"name":"difference_type","range":{"end":{"character":38,"line":4590},"start":{"character":4,"line":4590}},"selectionRange":{"end":{"character":38,"line":4590},"start":{"character":23,"line":4590}}},{"detail":"()","kind":9,"name":"SwigPySequence_InputIterator","range":{"end":{"character":5,"line":4594},"start":{"character":4,"line":4592}},"selectionRange":{"end":{"character":32,"line":4592},"start":{"character":4,"line":4592}}},{"detail":"(int *, int)","kind":9,"name":"SwigPySequence_InputIterator","range":{"end":{"character":5,"line":4599},"start":{"character":4,"line":4596}},"selectionRange":{"end":{"character":32,"line":4596},"start":{"character":4,"line":4596}}},{"detail":"reference () const","kind":6,"name":"operator*","range":{"end":{"character":5,"line":4604},"start":{"character":4,"line":4601}},"selectionRange":{"end":{"character":22,"line":4601},"start":{"character":14,"line":4601}}},{"detail":"SwigPySequence_ArrowProxy<T> () const","kind":6,"name":"operator->","range":{"end":{"character":5,"line":4609},"start":{"character":4,"line":4606}},"selectionRange":{"end":{"character":12,"line":4607},"start":{"character":4,"line":4607}}},{"detail":"bool (const self &) const","kind":6,"name":"operator==","range":{"end":{"character":5,"line":4614},"start":{"character":4,"line":4611}},"selectionRange":{"end":{"character":17,"line":4611},"start":{"character":9,"line":4611}}},{"detail":"bool (const self &) const","kind":6,"name":"operator!=","range":{"end":{"character":5,"line":4619},"start":{"character":4,"line":4616}},"selectionRange":{"end":{"character":17,"line":4616},"start":{"character":9,"line":4616}}},{"detail":"self &()","kind":6,"name":"operator++","range":{"end":{"character":5,"line":4625},"start":{"character":4,"line":4621}},"selectionRange":{"end":{"character":18,"line":4621},"start":{"character":10,"line":4621}}},{"detail":"self &()","kind":6,"name":"operator--","range":{"end":{"character":5,"line":4631},"start":{"character":4,"line":4627}},"selectionRange":{"end":{"character":18,"line":4627},"start":{"character":10,"line":4627}}},{"detail":"self &(difference_type)","kind":6,"name":"operator+=","range":{"end":{"character":5,"line":4637},"start":{"character":4,"line":4633}},"selectionRange":{"end":{"character":18,"line":4633},"start":{"character":10,"line":4633}}},{"detail":"self (difference_type) const","kind":6,"name":"operator+","range":{"end":{"character":5,"line":4642},"start":{"character":4,"line":4639}},"selectionRange":{"end":{"character":17,"line":4639},"start":{"character":9,"line":4639}}},{"detail":"self &(difference_type)","kind":6,"name":"operator-=","range":{"end":{"character":5,"line":4648},"start":{"character":4,"line":4644}},"selectionRange":{"end":{"character":18,"line":4644},"start":{"character":10,"line":4644}}},{"detail":"self (difference_type) const","kind":6,"name":"operator-","range":{"end":{"character":5,"line":4653},"start":{"character":4,"line":4650}},"selectionRange":{"end":{"character":17,"line":4650},"start":{"character":9,"line":4650}}},{"detail":"difference_type (const self &) const","kind":6,"name":"operator-","range":{"end":{"character":5,"line":4658},"start":{"character":4,"line":4655}},"selectionRange":{"end":{"character":28,"line":4655},"start":{"character":20,"line":4655}}},{"detail":"bool (const self &) const","kind":6,"name":"operator<","range":{"end":{"character":5,"line":4663},"start":{"character":4,"line":4660}},"selectionRange":{"end":{"character":17,"line":4660},"start":{"character":9,"line":4660}}},{"detail":"reference (difference_type) const","kind":6,"name":"operator[]","range":{"end":{"character":5,"line":4669},"start":{"character":4,"line":4665}},"selectionRange":{"end":{"character":12,"line":4666},"start":{"character":4,"line":4666}}},{"detail":"int *","kind":8,"name":"_seq","range":{"end":{"character":18,"line":4672},"start":{"character":4,"line":4672}},"selectionRange":{"end":{"character":18,"line":4672},"start":{"character":14,"line":4672}}},{"detail":"difference_type","kind":8,"name":"_index","range":{"end":{"character":26,"line":4673},"start":{"character":4,"line":4673}},"selectionRange":{"end":{"character":26,"line":4673},"start":{"character":20,"line":4673}}}],"detail":"template struct","kind":23,"name":"SwigPySequence_InputIterator","range":{"end":{"character":3,"line":4674},"start":{"character":2,"line":4582}},"selectionRange":{"end":{"character":37,"line":4582},"start":{"character":9,"line":4582}}},{"children":[{"detail":"type alias","kind":5,"name":"reference","range":{"end":{"character":43,"line":4680},"start":{"character":4,"line":4680}},"selectionRange":{"end":{"character":43,"line":4680},"start":{"character":34,"line":4680}}},{"detail":"type alias","kind":5,"name":"const_reference","range":{"end":{"character":55,"line":4681},"start":{"character":4,"line":4681}},"selectionRange":{"end":{"character":55,"line":4681},"start":{"character":40,"line":4681}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":24,"line":4682},"start":{"character":4,"line":4682}},"selectionRange":{"end":{"character":24,"line":4682},"start":{"character":14,"line":4682}}},{"detail":"type alias","kind":5,"name":"pointer","range":{"end":{"character":22,"line":4683},"start":{"character":4,"line":4683}},"selectionRange":{"end":{"character":22,"line":4683},"start":{"character":15,"line":4683}}},{"detail":"type alias","kind":5,"name":"difference_type","range":{"end":{"character":38,"line":4684},"start":{"character":4,"line":4684}},"selectionRange":{"end":{"character":38,"line":4684},"start":{"character":23,"line":4684}}},{"detail":"type alias","kind":5,"name":"size_type","range":{"end":{"character":28,"line":4685},"start":{"character":4,"line":4685}},"selectionRange":{"end":{"character":28,"line":4685},"start":{"character":19,"line":4685}}},{"detail":"type alias","kind":5,"name":"const_pointer","range":{"end":{"character":39,"line":4686},"start":{"character":4,"line":4686}},"selectionRange":{"end":{"character":39,"line":4686},"start":{"character":26,"line":4686}}},{"detail":"type alias","kind":5,"name":"iterator","range":{"end":{"character":63,"line":4687},"start":{"character":4,"line":4687}},"selectionRange":{"end":{"character":63,"line":4687},"start":{"character":55,"line":4687}}},{"detail":"type alias","kind":5,"name":"const_iterator","range":{"end":{"character":75,"line":4688},"start":{"character":4,"line":4688}},"selectionRange":{"end":{"character":75,"line":4688},"start":{"character":61,"line":4688}}},{"detail":"(int *)","kind":9,"name":"SwigPySequence_Cont","range":{"end":{"character":5,"line":4697},"start":{"character":4,"line":4690}},"selectionRange":{"end":{"character":23,"line":4690},"start":{"character":4,"line":4690}}},{"kind":9,"name":"~SwigPySequence_Cont","range":{"end":{"character":5,"line":4702},"start":{"character":4,"line":4699}},"selectionRange":{"end":{"character":5,"line":4699},"start":{"character":4,"line":4699}}},{"detail":"size_type () const","kind":6,"name":"size","range":{"end":{"character":5,"line":4707},"start":{"character":4,"line":4704}},"selectionRange":{"end":{"character":18,"line":4704},"start":{"character":14,"line":4704}}},{"detail":"bool () const","kind":6,"name":"empty","range":{"end":{"character":5,"line":4712},"start":{"character":4,"line":4709}},"selectionRange":{"end":{"character":14,"line":4709},"start":{"character":9,"line":4709}}},{"detail":"iterator ()","kind":6,"name":"begin","range":{"end":{"character":5,"line":4717},"start":{"character":4,"line":4714}},"selectionRange":{"end":{"character":18,"line":4714},"start":{"character":13,"line":4714}}},{"detail":"const_iterator () const","kind":6,"name":"begin","range":{"end":{"character":5,"line":4722},"start":{"character":4,"line":4719}},"selectionRange":{"end":{"character":24,"line":4719},"start":{"character":19,"line":4719}}},{"detail":"iterator ()","kind":6,"name":"end","range":{"end":{"character":5,"line":4727},"start":{"character":4,"line":4724}},"selectionRange":{"end":{"character":16,"line":4724},"start":{"character":13,"line":4724}}},{"detail":"const_iterator () const","kind":6,"name":"end","range":{"end":{"character":5,"line":4732},"start":{"character":4,"line":4729}},"selectionRange":{"end":{"character":22,"line":4729},"start":{"character":19,"line":4729}}},{"detail":"reference (difference_type)","kind":6,"name":"operator[]","range":{"end":{"character":5,"line":4737},"start":{"character":4,"line":4734}},"selectionRange":{"end":{"character":22,"line":4734},"start":{"character":14,"line":4734}}},{"detail":"const_reference (difference_type) const","kind":6,"name":"operator[]","range":{"end":{"character":5,"line":4742},"start":{"character":4,"line":4739}},"selectionRange":{"end":{"character":28,"line":4739},"start":{"character":20,"line":4739}}},{"detail":"bool () const","kind":6,"name":"check","range":{"end":{"character":5,"line":4753},"start":{"character":4,"line":4744}},"selectionRange":{"end":{"character":14,"line":4744},"start":{"character":9,"line":4744}}},{"detail":"int *","kind":8,"name":"_seq","range":{"end":{"character":18,"line":4756},"start":{"character":4,"line":4756}},"selectionRange":{"end":{"character":18,"line":4756},"start":{"character":14,"line":4756}}}],"detail":"template struct","kind":23,"name":"SwigPySequence_Cont","range":{"end":{"character":3,"line":4757},"start":{"character":2,"line":4678}},"selectionRange":{"end":{"character":28,"line":4678},"start":{"character":9,"line":4678}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":4759},"start":{"character":0,"line":4534}},"selectionRange":{"end":{"character":14,"line":4534},"start":{"character":10,"line":4534}}},{"children":[{"children":[{"detail":"type alias","kind":5,"name":"category","range":{"end":{"character":35,"line":4767},"start":{"character":4,"line":4767}},"selectionRange":{"end":{"character":35,"line":4767},"start":{"character":27,"line":4767}}},{"detail":"const char *()","kind":6,"name":"type_name","range":{"end":{"character":54,"line":4768},"start":{"character":4,"line":4768}},"selectionRange":{"end":{"character":32,"line":4768},"start":{"character":23,"line":4768}}}],"detail":"struct","kind":23,"name":"traits<double>","range":{"end":{"character":3,"line":4769},"start":{"character":2,"line":4766}},"selectionRange":{"end":{"character":27,"line":4766},"start":{"character":21,"line":4766}}},{"children":[{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":29,"line":4771},"start":{"character":4,"line":4771}},"selectionRange":{"end":{"character":29,"line":4771},"start":{"character":19,"line":4771}}},{"detail":"int (int *, value_type *)","kind":6,"name":"asval","range":{"end":{"character":5,"line":4774},"start":{"character":4,"line":4772}},"selectionRange":{"end":{"character":20,"line":4772},"start":{"character":15,"line":4772}}}],"detail":"struct","kind":23,"name":"traits_asval<double>","range":{"end":{"character":3,"line":4775},"start":{"character":2,"line":4770}},"selectionRange":{"end":{"character":34,"line":4770},"start":{"character":22,"line":4770}}},{"children":[{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":29,"line":4777},"start":{"character":4,"line":4777}},"selectionRange":{"end":{"character":29,"line":4777},"start":{"character":19,"line":4777}}},{"detail":"int *(const value_type &)","kind":6,"name":"from","range":{"end":{"character":5,"line":4780},"start":{"character":4,"line":4778}},"selectionRange":{"end":{"character":25,"line":4778},"start":{"character":21,"line":4778}}}],"detail":"struct","kind":23,"name":"traits_from<double>","range":{"end":{"character":3,"line":4781},"start":{"character":2,"line":4776}},"selectionRange":{"end":{"character":33,"line":4776},"start":{"character":22,"line":4776}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":4782},"start":{"character":0,"line":4765}},"selectionRange":{"end":{"character":14,"line":4765},"start":{"character":10,"line":4765}}},{"children":[{"detail":"template void (const SwigPySeq &, Seq *)","kind":12,"name":"assign","range":{"end":{"character":3,"line":4795},"start":{"character":2,"line":4787}},"selectionRange":{"end":{"character":8,"line":4788},"start":{"character":2,"line":4788}}},{"children":[{"detail":"type alias","kind":5,"name":"sequence","range":{"end":{"character":24,"line":4799},"start":{"character":4,"line":4799}},"selectionRange":{"end":{"character":24,"line":4799},"start":{"character":16,"line":4799}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":24,"line":4800},"start":{"character":4,"line":4800}},"selectionRange":{"end":{"character":24,"line":4800},"start":{"character":14,"line":4800}}},{"detail":"int (int *, sequence **)","kind":6,"name":"asptr","range":{"end":{"character":5,"line":4831},"start":{"character":4,"line":4802}},"selectionRange":{"end":{"character":20,"line":4802},"start":{"character":15,"line":4802}}}],"detail":"template struct","kind":23,"name":"traits_asptr_stdseq","range":{"end":{"character":3,"line":4832},"start":{"character":2,"line":4798}},"selectionRange":{"end":{"character":28,"line":4798},"start":{"character":9,"line":4798}}},{"children":[{"detail":"type alias","kind":5,"name":"sequence","range":{"end":{"character":24,"line":4836},"start":{"character":4,"line":4836}},"selectionRange":{"end":{"character":24,"line":4836},"start":{"character":16,"line":4836}}},{"detail":"type alias","kind":5,"name":"value_type","range":{"end":{"character":24,"line":4837},"start":{"character":4,"line":4837}},"selectionRange":{"end":{"character":24,"line":4837},"start":{"character":14,"line":4837}}},{"detail":"type alias","kind":5,"name":"size_type","range":{"end":{"character":45,"line":4838},"start":{"character":4,"line":4838}},"selectionRange":{"end":{"character":45,"line":4838},"start":{"character":36,"line":4838}}},{"detail":"type alias","kind":5,"name":"const_iterator","range":{"end":{"character":60,"line":4839},"start":{"character":4,"line":4839}},"selectionRange":{"end":{"character":60,"line":4839},"start":{"character":46,"line":4839}}},{"detail":"int *(const sequence &)","kind":6,"name":"from","range":{"end":{"character":5,"line":4860},"start":{"character":4,"line":4841}},"selectionRange":{"end":{"character":25,"line":4841},"start":{"character":21,"line":4841}}}],"detail":"template struct","kind":23,"name":"traits_from_stdseq","range":{"end":{"character":3,"line":4861},"start":{"character":2,"line":4835}},"selectionRange":{"end":{"character":27,"line":4835},"start":{"character":9,"line":4835}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":4862},"start":{"character":0,"line":4785}},"selectionRange":{"end":{"character":14,"line":4785},"start":{"character":10,"line":4785}}},{"kind":3,"name":"swig","range":{"end":{"character":3,"line":4886},"start":{"character":2,"line":4865}},"selectionRange":{"end":{"character":16,"line":4865},"start":{"character":12,"line":4865}}},{"children":[{"children":[{"detail":"type alias","kind":5,"name":"category","range":{"end":{"character":36,"line":4891},"start":{"character":3,"line":4891}},"selectionRange":{"end":{"character":36,"line":4891},"start":{"character":28,"line":4891}}},{"detail":"const char *()","kind":6,"name":"type_name","range":{"end":{"character":4,"line":4894},"start":{"character":3,"line":4892}},"selectionRange":{"end":{"character":31,"line":4892},"start":{"character":22,"line":4892}}}],"detail":"struct","kind":23,"name":"traits<std::vector<double, std::allocator<double>>>","range":{"end":{"character":2,"line":4895},"start":{"character":1,"line":4890}},"selectionRange":{"end":{"character":27,"line":4890},"start":{"character":21,"line":4890}}}],"kind":3,"name":"swig","range":{"end":{"character":7,"line":4896},"start":{"character":6,"line":4889}},"selectionRange":{"end":{"character":20,"line":4889},"start":{"character":16,"line":4889}}},{"detail":"swig::SwigPyIterator *(int *, int **)","kind":12,"name":"std_vector_Sl_double_Sg__iterator","range":{"end":{"character":5,"line":4900},"start":{"character":0,"line":4898}},"selectionRange":{"end":{"character":66,"line":4898},"start":{"character":33,"line":4898}}},{"detail":"bool (const int *)","kind":12,"name":"std_vector_Sl_double_Sg____nonzero__","range":{"end":{"character":5,"line":4903},"start":{"character":0,"line":4901}},"selectionRange":{"end":{"character":52,"line":4901},"start":{"character":16,"line":4901}}},{"detail":"bool (const int *)","kind":12,"name":"std_vector_Sl_double_Sg____bool__","range":{"end":{"character":5,"line":4906},"start":{"character":0,"line":4904}},"selectionRange":{"end":{"character":49,"line":4904},"start":{"character":16,"line":4904}}},{"detail":"int (const int *)","kind":12,"name":"std_vector_Sl_double_Sg____len__","range":{"end":{"character":5,"line":4909},"start":{"character":0,"line":4907}},"selectionRange":{"end":{"character":76,"line":4907},"start":{"character":44,"line":4907}}},{"detail":"int *(unsigned long)","kind":12,"name":"SWIG_From_unsigned_SS_long","range":{"end":{"character":1,"line":4916},"start":{"character":0,"line":4911}},"selectionRange":{"end":{"character":26,"line":4912},"start":{"character":0,"line":4912}}},{"detail":"int *(unsigned long long)","kind":12,"name":"SWIG_From_unsigned_SS_long_SS_long","range":{"end":{"character":1,"line":4925},"start":{"character":0,"line":4920}},"selectionRange":{"end":{"character":34,"line":4921},"start":{"character":0,"line":4921}}},{"detail":"int *(size_t)","kind":12,"name":"SWIG_From_size_t","range":{"end":{"character":1,"line":4942},"start":{"character":0,"line":4929}},"selectionRange":{"end":{"character":16,"line":4930},"start":{"character":0,"line":4930}}},{"detail":"std::vector<double, std::allocator<double>> *(int *, int, int)","kind":12,"name":"std_vector_Sl_double_Sg____getslice__","range":{"end":{"character":5,"line":4946},"start":{"character":0,"line":4944}},"selectionRange":{"end":{"character":96,"line":4944},"start":{"character":59,"line":4944}}},{"detail":"void (int *, int, int)","kind":12,"name":"std_vector_Sl_double_Sg____setslice____SWIG_0","range":{"end":{"character":5,"line":4949},"start":{"character":0,"line":4947}},"selectionRange":{"end":{"character":61,"line":4947},"start":{"character":16,"line":4947}}},{"detail":"void (int *, int, int, const std::vector<double, std::allocator<double>> &)","kind":12,"name":"std_vector_Sl_double_Sg____setslice____SWIG_1","range":{"end":{"character":5,"line":4952},"start":{"character":0,"line":4950}},"selectionRange":{"end":{"character":61,"line":4950},"start":{"character":16,"line":4950}}},{"detail":"void (int *, int, int)","kind":12,"name":"std_vector_Sl_double_Sg____delslice__","range":{"end":{"character":5,"line":4955},"start":{"character":0,"line":4953}},"selectionRange":{"end":{"character":53,"line":4953},"start":{"character":16,"line":4953}}},{"detail":"void (int *, int)","kind":12,"name":"std_vector_Sl_double_Sg____delitem____SWIG_0","range":{"end":{"character":5,"line":4958},"start":{"character":0,"line":4956}},"selectionRange":{"end":{"character":60,"line":4956},"start":{"character":16,"line":4956}}},{"detail":"std::vector<double, std::allocator<double>> *(int *, int *)","kind":12,"name":"std_vector_Sl_double_Sg____getitem____SWIG_0","range":{"end":{"character":5,"line":4969},"start":{"character":0,"line":4959}},"selectionRange":{"end":{"character":103,"line":4959},"start":{"character":59,"line":4959}}},{"detail":"void (int *, int *, const std::vector<double, std::allocator<double>> &)","kind":12,"name":"std_vector_Sl_double_Sg____setitem____SWIG_0","range":{"end":{"character":5,"line":4980},"start":{"character":0,"line":4970}},"selectionRange":{"end":{"character":60,"line":4970},"start":{"character":16,"line":4970}}},{"detail":"void (int *, int *)","kind":12,"name":"std_vector_Sl_double_Sg____setitem____SWIG_1","range":{"end":{"character":5,"line":4991},"start":{"character":0,"line":4981}},"selectionRange":{"end":{"character":60,"line":4981},"start":{"character":16,"line":4981}}},{"detail":"void (int *, int *)","kind":12,"name":"std_vector_Sl_double_Sg____delitem____SWIG_1","range":{"end":{"character":5,"line":5002},"start":{"character":0,"line":4992}},"selectionRange":{"end":{"character":60,"line":4992},"start":{"character":16,"line":4992}}},{"detail":"const int &(const int *, int)","kind":12,"name":"std_vector_Sl_double_Sg____getitem____SWIG_1","range":{"end":{"character":5,"line":5005},"start":{"character":0,"line":5003}},"selectionRange":{"end":{"character":96,"line":5003},"start":{"character":52,"line":5003}}},{"children":[{"detail":"int *()","kind":12,"name":"container_owner_attribute","range":{"end":{"character":3,"line":5011},"start":{"character":2,"line":5008}},"selectionRange":{"end":{"character":44,"line":5008},"start":{"character":19,"line":5008}}},{"children":[{"detail":"bool (int *, int *)","kind":6,"name":"back_reference","range":{"end":{"character":5,"line":5019},"start":{"character":4,"line":5017}},"selectionRange":{"end":{"character":30,"line":5017},"start":{"character":16,"line":5017}}}],"detail":"template struct","kind":23,"name":"container_owner","range":{"end":{"character":3,"line":5020},"start":{"character":2,"line":5014}},"selectionRange":{"end":{"character":24,"line":5014},"start":{"character":9,"line":5014}}},{"children":[{"detail":"bool (int *, int *)","kind":6,"name":"back_reference","range":{"end":{"character":5,"line":5037},"start":{"character":4,"line":5031}},"selectionRange":{"end":{"character":30,"line":5031},"start":{"character":16,"line":5031}}}],"detail":"struct","kind":23,"name":"container_owner<swig::pointer_category>","range":{"end":{"character":3,"line":5038},"start":{"character":2,"line":5022}},"selectionRange":{"end":{"character":24,"line":5023},"start":{"character":9,"line":5023}}}],"kind":3,"name":"swig","range":{"end":{"character":1,"line":5039},"start":{"character":0,"line":5007}},"selectionRange":{"end":{"character":14,"line":5007},"start":{"character":10,"line":5007}}},{"detail":"void (int *, int, const int &)","kind":12,"name":"std_vector_Sl_double_Sg____setitem____SWIG_2","range":{"end":{"character":5,"line":5043},"start":{"character":0,"line":5041}},"selectionRange":{"end":{"character":60,"line":5041},"start":{"character":16,"line":5041}}},{"detail":"int (int *)","kind":12,"name":"std_vector_Sl_double_Sg__pop","range":{"end":{"character":5,"line":5050},"start":{"character":0,"line":5044}},"selectionRange":{"end":{"character":73,"line":5044},"start":{"character":45,"line":5044}}},{"detail":"void (int *, const int &)","kind":12,"name":"std_vector_Sl_double_Sg__append","range":{"end":{"character":5,"line":5053},"start":{"character":0,"line":5051}},"selectionRange":{"end":{"character":47,"line":5051},"start":{"character":16,"line":5051}}},{"detail":"int (int *, int)","kind":12,"name":"std_vector_Sl_double_Sg__erase__SWIG_0","range":{"end":{"character":174,"line":5054},"start":{"character":0,"line":5054}},"selectionRange":{"end":{"character":81,"line":5054},"start":{"character":43,"line":5054}}},{"detail":"int (int *, int, int)","kind":12,"name":"std_vector_Sl_double_Sg__erase__SWIG_1","range":{"end":{"character":221,"line":5055},"start":{"character":0,"line":5055}},"selectionRange":{"end":{"character":81,"line":5055},"start":{"character":43,"line":5055}}},{"detail":"int (int *, int, const int &)","kind":12,"name":"std_vector_Sl_double_Sg__insert__SWIG_0","range":{"end":{"character":222,"line":5056},"start":{"character":0,"line":5056}},"selectionRange":{"end":{"character":82,"line":5056},"start":{"character":43,"line":5056}}},{"detail":"void (int *, int, int, const int &)","kind":12,"name":"std_vector_Sl_double_Sg__insert__SWIG_1","range":{"end":{"character":226,"line":5057},"start":{"character":0,"line":5057}},"selectionRange":{"end":{"character":55,"line":5057},"start":{"character":16,"line":5057}}},{"detail":"int *(int)","kind":12,"name":"SWIG_From_int","range":{"end":{"character":1,"line":5063},"start":{"character":0,"line":5059}},"selectionRange":{"end":{"character":15,"line":5060},"start":{"character":2,"line":5060}}},{"detail":"int (int *, int *)","kind":12,"name":"SWIG_AsVal_int","range":{"end":{"character":1,"line":5079},"start":{"character":0,"line":5066}},"selectionRange":{"end":{"character":14,"line":5067},"start":{"character":0,"line":5067}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_delete_SwigPyIterator","range":{"end":{"character":1,"line":5103},"start":{"character":0,"line":5084}},"selectionRange":{"end":{"character":48,"line":5084},"start":{"character":21,"line":5084}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_value","range":{"end":{"character":1,"line":5134},"start":{"character":0,"line":5106}},"selectionRange":{"end":{"character":47,"line":5106},"start":{"character":21,"line":5106}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_SwigPyIterator_incr__SWIG_0","range":{"end":{"character":1,"line":5171},"start":{"character":0,"line":5137}},"selectionRange":{"end":{"character":54,"line":5137},"start":{"character":21,"line":5137}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_SwigPyIterator_incr__SWIG_1","range":{"end":{"character":1,"line":5200},"start":{"character":0,"line":5174}},"selectionRange":{"end":{"character":54,"line":5174},"start":{"character":21,"line":5174}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_incr","range":{"end":{"character":1,"line":5242},"start":{"character":0,"line":5203}},"selectionRange":{"end":{"character":46,"line":5203},"start":{"character":21,"line":5203}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_SwigPyIterator_decr__SWIG_0","range":{"end":{"character":1,"line":5279},"start":{"character":0,"line":5245}},"selectionRange":{"end":{"character":54,"line":5245},"start":{"character":21,"line":5245}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_SwigPyIterator_decr__SWIG_1","range":{"end":{"character":1,"line":5308},"start":{"character":0,"line":5282}},"selectionRange":{"end":{"character":54,"line":5282},"start":{"character":21,"line":5282}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_decr","range":{"end":{"character":1,"line":5350},"start":{"character":0,"line":5311}},"selectionRange":{"end":{"character":46,"line":5311},"start":{"character":21,"line":5311}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_distance","range":{"end":{"character":1,"line":5387},"start":{"character":0,"line":5353}},"selectionRange":{"end":{"character":50,"line":5353},"start":{"character":21,"line":5353}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_equal","range":{"end":{"character":1,"line":5424},"start":{"character":0,"line":5390}},"selectionRange":{"end":{"character":47,"line":5390},"start":{"character":21,"line":5390}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_copy","range":{"end":{"character":1,"line":5447},"start":{"character":0,"line":5427}},"selectionRange":{"end":{"character":46,"line":5427},"start":{"character":21,"line":5427}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_next","range":{"end":{"character":1,"line":5478},"start":{"character":0,"line":5450}},"selectionRange":{"end":{"character":46,"line":5450},"start":{"character":21,"line":5450}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator___next__","range":{"end":{"character":1,"line":5509},"start":{"character":0,"line":5481}},"selectionRange":{"end":{"character":50,"line":5481},"start":{"character":21,"line":5481}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_previous","range":{"end":{"character":1,"line":5540},"start":{"character":0,"line":5512}},"selectionRange":{"end":{"character":50,"line":5512},"start":{"character":21,"line":5512}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator_advance","range":{"end":{"character":1,"line":5578},"start":{"character":0,"line":5543}},"selectionRange":{"end":{"character":49,"line":5543},"start":{"character":21,"line":5543}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator___eq__","range":{"end":{"character":1,"line":5613},"start":{"character":0,"line":5581}},"selectionRange":{"end":{"character":48,"line":5581},"start":{"character":21,"line":5581}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator___ne__","range":{"end":{"character":1,"line":5648},"start":{"character":0,"line":5616}},"selectionRange":{"end":{"character":48,"line":5616},"start":{"character":21,"line":5616}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator___iadd__","range":{"end":{"character":1,"line":5686},"start":{"character":0,"line":5651}},"selectionRange":{"end":{"character":50,"line":5651},"start":{"character":21,"line":5651}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator___isub__","range":{"end":{"character":1,"line":5724},"start":{"character":0,"line":5689}},"selectionRange":{"end":{"character":50,"line":5689},"start":{"character":21,"line":5689}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator___add__","range":{"end":{"character":1,"line":5764},"start":{"character":0,"line":5727}},"selectionRange":{"end":{"character":49,"line":5727},"start":{"character":21,"line":5727}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_SwigPyIterator___sub____SWIG_0","range":{"end":{"character":1,"line":5803},"start":{"character":0,"line":5767}},"selectionRange":{"end":{"character":57,"line":5767},"start":{"character":21,"line":5767}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_SwigPyIterator___sub____SWIG_1","range":{"end":{"character":1,"line":5837},"start":{"character":0,"line":5806}},"selectionRange":{"end":{"character":57,"line":5806},"start":{"character":21,"line":5806}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_SwigPyIterator___sub__","range":{"end":{"character":1,"line":5880},"start":{"character":0,"line":5840}},"selectionRange":{"end":{"character":49,"line":5840},"start":{"character":21,"line":5840}}},{"detail":"int *(int *, int *)","kind":12,"name":"SwigPyIterator_swigregister","range":{"end":{"character":1,"line":5888},"start":{"character":0,"line":5883}},"selectionRange":{"end":{"character":48,"line":5883},"start":{"character":21,"line":5883}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_iterator","range":{"end":{"character":1,"line":5912},"start":{"character":0,"line":5890}},"selectionRange":{"end":{"character":48,"line":5890},"start":{"character":21,"line":5890}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___nonzero__","range":{"end":{"character":1,"line":5935},"start":{"character":0,"line":5915}},"selectionRange":{"end":{"character":51,"line":5915},"start":{"character":21,"line":5915}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___bool__","range":{"end":{"character":1,"line":5958},"start":{"character":0,"line":5938}},"selectionRange":{"end":{"character":48,"line":5938},"start":{"character":21,"line":5938}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___len__","range":{"end":{"character":1,"line":5981},"start":{"character":0,"line":5961}},"selectionRange":{"end":{"character":47,"line":5961},"start":{"character":21,"line":5961}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___getslice__","range":{"end":{"character":1,"line":6025},"start":{"character":0,"line":5984}},"selectionRange":{"end":{"character":52,"line":5984},"start":{"character":21,"line":5984}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___setslice____SWIG_0","range":{"end":{"character":1,"line":6067},"start":{"character":0,"line":6028}},"selectionRange":{"end":{"character":60,"line":6028},"start":{"character":21,"line":6028}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___setslice____SWIG_1","range":{"end":{"character":1,"line":6124},"start":{"character":0,"line":6070}},"selectionRange":{"end":{"character":60,"line":6070},"start":{"character":21,"line":6070}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___setslice__","range":{"end":{"character":1,"line":6186},"start":{"character":0,"line":6127}},"selectionRange":{"end":{"character":52,"line":6127},"start":{"character":21,"line":6127}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___delslice__","range":{"end":{"character":1,"line":6229},"start":{"character":0,"line":6189}},"selectionRange":{"end":{"character":52,"line":6189},"start":{"character":21,"line":6189}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___delitem____SWIG_0","range":{"end":{"character":1,"line":6263},"start":{"character":0,"line":6232}},"selectionRange":{"end":{"character":59,"line":6232},"start":{"character":21,"line":6232}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___getitem____SWIG_0","range":{"end":{"character":1,"line":6297},"start":{"character":0,"line":6266}},"selectionRange":{"end":{"character":59,"line":6266},"start":{"character":21,"line":6266}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___setitem____SWIG_0","range":{"end":{"character":1,"line":6345},"start":{"character":0,"line":6300}},"selectionRange":{"end":{"character":59,"line":6300},"start":{"character":21,"line":6300}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___setitem____SWIG_1","range":{"end":{"character":1,"line":6378},"start":{"character":0,"line":6348}},"selectionRange":{"end":{"character":59,"line":6348},"start":{"character":21,"line":6348}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___delitem____SWIG_1","range":{"end":{"character":1,"line":6411},"start":{"character":0,"line":6381}},"selectionRange":{"end":{"character":59,"line":6381},"start":{"character":21,"line":6381}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___delitem__","range":{"end":{"character":1,"line":6456},"start":{"character":0,"line":6414}},"selectionRange":{"end":{"character":51,"line":6414},"start":{"character":21,"line":6414}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___getitem____SWIG_1","range":{"end":{"character":1,"line":6490},"start":{"character":0,"line":6459}},"selectionRange":{"end":{"character":59,"line":6459},"start":{"character":21,"line":6459}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___getitem__","range":{"end":{"character":1,"line":6535},"start":{"character":0,"line":6493}},"selectionRange":{"end":{"character":51,"line":6493},"start":{"character":21,"line":6493}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector___setitem____SWIG_2","range":{"end":{"character":1,"line":6577},"start":{"character":0,"line":6538}},"selectionRange":{"end":{"character":59,"line":6538},"start":{"character":21,"line":6538}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector___setitem__","range":{"end":{"character":1,"line":6646},"start":{"character":0,"line":6580}},"selectionRange":{"end":{"character":51,"line":6580},"start":{"character":21,"line":6580}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_pop","range":{"end":{"character":1,"line":6673},"start":{"character":0,"line":6649}},"selectionRange":{"end":{"character":43,"line":6649},"start":{"character":21,"line":6649}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_append","range":{"end":{"character":1,"line":6704},"start":{"character":0,"line":6676}},"selectionRange":{"end":{"character":46,"line":6676},"start":{"character":21,"line":6676}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_new_DoubleVector__SWIG_0","range":{"end":{"character":1,"line":6717},"start":{"character":0,"line":6707}},"selectionRange":{"end":{"character":51,"line":6707},"start":{"character":21,"line":6707}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_new_DoubleVector__SWIG_1","range":{"end":{"character":1,"line":6745},"start":{"character":0,"line":6720}},"selectionRange":{"end":{"character":51,"line":6720},"start":{"character":21,"line":6720}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_empty","range":{"end":{"character":1,"line":6768},"start":{"character":0,"line":6748}},"selectionRange":{"end":{"character":45,"line":6748},"start":{"character":21,"line":6748}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_size","range":{"end":{"character":1,"line":6791},"start":{"character":0,"line":6771}},"selectionRange":{"end":{"character":44,"line":6771},"start":{"character":21,"line":6771}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_swap","range":{"end":{"character":1,"line":6823},"start":{"character":0,"line":6794}},"selectionRange":{"end":{"character":44,"line":6794},"start":{"character":21,"line":6794}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_begin","range":{"end":{"character":1,"line":6847},"start":{"character":0,"line":6826}},"selectionRange":{"end":{"character":45,"line":6826},"start":{"character":21,"line":6826}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_end","range":{"end":{"character":1,"line":6871},"start":{"character":0,"line":6850}},"selectionRange":{"end":{"character":43,"line":6850},"start":{"character":21,"line":6850}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_rbegin","range":{"end":{"character":1,"line":6895},"start":{"character":0,"line":6874}},"selectionRange":{"end":{"character":46,"line":6874},"start":{"character":21,"line":6874}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_rend","range":{"end":{"character":1,"line":6919},"start":{"character":0,"line":6898}},"selectionRange":{"end":{"character":44,"line":6898},"start":{"character":21,"line":6898}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_clear","range":{"end":{"character":1,"line":6941},"start":{"character":0,"line":6922}},"selectionRange":{"end":{"character":45,"line":6922},"start":{"character":21,"line":6922}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_get_allocator","range":{"end":{"character":1,"line":6964},"start":{"character":0,"line":6944}},"selectionRange":{"end":{"character":53,"line":6944},"start":{"character":21,"line":6944}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_new_DoubleVector__SWIG_2","range":{"end":{"character":1,"line":6985},"start":{"character":0,"line":6967}},"selectionRange":{"end":{"character":51,"line":6967},"start":{"character":21,"line":6967}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_pop_back","range":{"end":{"character":1,"line":7007},"start":{"character":0,"line":6988}},"selectionRange":{"end":{"character":48,"line":6988},"start":{"character":21,"line":6988}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector_resize__SWIG_0","range":{"end":{"character":1,"line":7035},"start":{"character":0,"line":7010}},"selectionRange":{"end":{"character":54,"line":7010},"start":{"character":21,"line":7010}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector_erase__SWIG_0","range":{"end":{"character":1,"line":7071},"start":{"character":0,"line":7038}},"selectionRange":{"end":{"character":53,"line":7038},"start":{"character":21,"line":7038}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector_erase__SWIG_1","range":{"end":{"character":1,"line":7121},"start":{"character":0,"line":7074}},"selectionRange":{"end":{"character":53,"line":7074},"start":{"character":21,"line":7074}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_erase","range":{"end":{"character":1,"line":7170},"start":{"character":0,"line":7124}},"selectionRange":{"end":{"character":45,"line":7124},"start":{"character":21,"line":7124}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_new_DoubleVector__SWIG_3","range":{"end":{"character":1,"line":7201},"start":{"character":0,"line":7173}},"selectionRange":{"end":{"character":51,"line":7173},"start":{"character":21,"line":7173}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_new_DoubleVector","range":{"end":{"character":1,"line":7258},"start":{"character":0,"line":7204}},"selectionRange":{"end":{"character":43,"line":7204},"start":{"character":21,"line":7204}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_push_back","range":{"end":{"character":1,"line":7289},"start":{"character":0,"line":7261}},"selectionRange":{"end":{"character":49,"line":7261},"start":{"character":21,"line":7261}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_front","range":{"end":{"character":1,"line":7313},"start":{"character":0,"line":7292}},"selectionRange":{"end":{"character":45,"line":7292},"start":{"character":21,"line":7292}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_back","range":{"end":{"character":1,"line":7337},"start":{"character":0,"line":7316}},"selectionRange":{"end":{"character":44,"line":7316},"start":{"character":21,"line":7316}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_assign","range":{"end":{"character":1,"line":7376},"start":{"character":0,"line":7340}},"selectionRange":{"end":{"character":46,"line":7340},"start":{"character":21,"line":7340}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector_resize__SWIG_1","range":{"end":{"character":1,"line":7414},"start":{"character":0,"line":7379}},"selectionRange":{"end":{"character":54,"line":7379},"start":{"character":21,"line":7379}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_resize","range":{"end":{"character":1,"line":7466},"start":{"character":0,"line":7417}},"selectionRange":{"end":{"character":46,"line":7417},"start":{"character":21,"line":7417}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector_insert__SWIG_0","range":{"end":{"character":1,"line":7512},"start":{"character":0,"line":7469}},"selectionRange":{"end":{"character":54,"line":7469},"start":{"character":21,"line":7469}}},{"detail":"int *(int *, int, int **)","kind":12,"name":"_wrap_DoubleVector_insert__SWIG_1","range":{"end":{"character":1,"line":7564},"start":{"character":0,"line":7515}},"selectionRange":{"end":{"character":54,"line":7515},"start":{"character":21,"line":7515}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_insert","range":{"end":{"character":1,"line":7626},"start":{"character":0,"line":7567}},"selectionRange":{"end":{"character":46,"line":7567},"start":{"character":21,"line":7567}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_reserve","range":{"end":{"character":1,"line":7655},"start":{"character":0,"line":7629}},"selectionRange":{"end":{"character":47,"line":7629},"start":{"character":21,"line":7629}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_DoubleVector_capacity","range":{"end":{"character":1,"line":7678},"start":{"character":0,"line":7658}},"selectionRange":{"end":{"character":48,"line":7658},"start":{"character":21,"line":7658}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_delete_DoubleVector","range":{"end":{"character":1,"line":7700},"start":{"character":0,"line":7681}},"selectionRange":{"end":{"character":46,"line":7681},"start":{"character":21,"line":7681}}},{"detail":"int *(int *, int *)","kind":12,"name":"DoubleVector_swigregister","range":{"end":{"character":1,"line":7708},"start":{"character":0,"line":7703}},"selectionRange":{"end":{"character":46,"line":7703},"start":{"character":21,"line":7703}}},{"detail":"int *(int *, int *)","kind":12,"name":"DoubleVector_swiginit","range":{"end":{"character":1,"line":7712},"start":{"character":0,"line":7710}},"selectionRange":{"end":{"character":42,"line":7710},"start":{"character":21,"line":7710}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_data_set","range":{"end":{"character":1,"line":7748},"start":{"character":0,"line":7714}},"selectionRange":{"end":{"character":61,"line":7714},"start":{"character":21,"line":7714}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_data_get","range":{"end":{"character":1,"line":7771},"start":{"character":0,"line":7751}},"selectionRange":{"end":{"character":61,"line":7751},"start":{"character":21,"line":7751}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_data_buffer_set","range":{"end":{"character":1,"line":7808},"start":{"character":0,"line":7774}},"selectionRange":{"end":{"character":68,"line":7774},"start":{"character":21,"line":7774}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_data_buffer_get","range":{"end":{"character":1,"line":7831},"start":{"character":0,"line":7811}},"selectionRange":{"end":{"character":68,"line":7811},"start":{"character":21,"line":7811}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_compute_buffer_set","range":{"end":{"character":1,"line":7868},"start":{"character":0,"line":7834}},"selectionRange":{"end":{"character":71,"line":7834},"start":{"character":21,"line":7834}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_compute_buffer_get","range":{"end":{"character":1,"line":7891},"start":{"character":0,"line":7871}},"selectionRange":{"end":{"character":71,"line":7871},"start":{"character":21,"line":7871}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_compute_buffer2_set","range":{"end":{"character":1,"line":7928},"start":{"character":0,"line":7894}},"selectionRange":{"end":{"character":72,"line":7894},"start":{"character":21,"line":7894}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_compute_buffer2_get","range":{"end":{"character":1,"line":7951},"start":{"character":0,"line":7931}},"selectionRange":{"end":{"character":72,"line":7931},"start":{"character":21,"line":7931}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_modes_set","range":{"end":{"character":1,"line":7980},"start":{"character":0,"line":7954}},"selectionRange":{"end":{"character":62,"line":7954},"start":{"character":21,"line":7954}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_modes_get","range":{"end":{"character":1,"line":8003},"start":{"character":0,"line":7983}},"selectionRange":{"end":{"character":62,"line":7983},"start":{"character":21,"line":7983}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_freqs_set","range":{"end":{"character":1,"line":8032},"start":{"character":0,"line":8006}},"selectionRange":{"end":{"character":67,"line":8006},"start":{"character":21,"line":8006}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_freqs_get","range":{"end":{"character":1,"line":8055},"start":{"character":0,"line":8035}},"selectionRange":{"end":{"character":67,"line":8035},"start":{"character":21,"line":8035}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_ampls_set","range":{"end":{"character":1,"line":8084},"start":{"character":0,"line":8058}},"selectionRange":{"end":{"character":67,"line":8058},"start":{"character":21,"line":8058}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_ampls_get","range":{"end":{"character":1,"line":8107},"start":{"character":0,"line":8087}},"selectionRange":{"end":{"character":67,"line":8087},"start":{"character":21,"line":8087}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_phases_set","range":{"end":{"character":1,"line":8136},"start":{"character":0,"line":8110}},"selectionRange":{"end":{"character":63,"line":8110},"start":{"character":21,"line":8110}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_phases_get","range":{"end":{"character":1,"line":8159},"start":{"character":0,"line":8139}},"selectionRange":{"end":{"character":63,"line":8139},"start":{"character":21,"line":8139}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_freq_conv_set","range":{"end":{"character":1,"line":8188},"start":{"character":0,"line":8162}},"selectionRange":{"end":{"character":66,"line":8162},"start":{"character":21,"line":8162}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_freq_conv_get","range":{"end":{"character":1,"line":8211},"start":{"character":0,"line":8191}},"selectionRange":{"end":{"character":66,"line":8191},"start":{"character":21,"line":8191}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_freq_conv_image_set","range":{"end":{"character":1,"line":8240},"start":{"character":0,"line":8214}},"selectionRange":{"end":{"character":72,"line":8214},"start":{"character":21,"line":8214}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_freq_conv_image_get","range":{"end":{"character":1,"line":8263},"start":{"character":0,"line":8243}},"selectionRange":{"end":{"character":72,"line":8243},"start":{"character":21,"line":8243}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_period_muller_set","range":{"end":{"character":1,"line":8292},"start":{"character":0,"line":8266}},"selectionRange":{"end":{"character":70,"line":8266},"start":{"character":21,"line":8266}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_period_muller_get","range":{"end":{"character":1,"line":8315},"start":{"character":0,"line":8295}},"selectionRange":{"end":{"character":70,"line":8295},"start":{"character":21,"line":8295}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_locality_coeff_set","range":{"end":{"character":1,"line":8344},"start":{"character":0,"line":8318}},"selectionRange":{"end":{"character":71,"line":8318},"start":{"character":21,"line":8318}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_locality_coeff_get","range":{"end":{"character":1,"line":8367},"start":{"character":0,"line":8347}},"selectionRange":{"end":{"character":71,"line":8347},"start":{"character":21,"line":8347}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_integrator_set","range":{"end":{"character":1,"line":8404},"start":{"character":0,"line":8370}},"selectionRange":{"end":{"character":67,"line":8370},"start":{"character":21,"line":8370}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_integrator_get","range":{"end":{"character":1,"line":8427},"start":{"character":0,"line":8407}},"selectionRange":{"end":{"character":67,"line":8407},"start":{"character":21,"line":8407}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_derivator_set","range":{"end":{"character":1,"line":8464},"start":{"character":0,"line":8430}},"selectionRange":{"end":{"character":66,"line":8430},"start":{"character":21,"line":8430}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_derivator_get","range":{"end":{"character":1,"line":8487},"start":{"character":0,"line":8467}},"selectionRange":{"end":{"character":66,"line":8467},"start":{"character":21,"line":8467}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_phase_computer_der_atan_set","range":{"end":{"character":1,"line":8524},"start":{"character":0,"line":8490}},"selectionRange":{"end":{"character":80,"line":8490},"start":{"character":21,"line":8490}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_phase_computer_der_atan_get","range":{"end":{"character":1,"line":8547},"start":{"character":0,"line":8527}},"selectionRange":{"end":{"character":80,"line":8527},"start":{"character":21,"line":8527}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_phase_computer_simple_set","range":{"end":{"character":1,"line":8584},"start":{"character":0,"line":8550}},"selectionRange":{"end":{"character":78,"line":8550},"start":{"character":21,"line":8550}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_phase_computer_simple_get","range":{"end":{"character":1,"line":8607},"start":{"character":0,"line":8587}},"selectionRange":{"end":{"character":78,"line":8587},"start":{"character":21,"line":8587}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_freq_computer_set","range":{"end":{"character":1,"line":8644},"start":{"character":0,"line":8610}},"selectionRange":{"end":{"character":75,"line":8610},"start":{"character":21,"line":8610}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_freq_computer_get","range":{"end":{"character":1,"line":8667},"start":{"character":0,"line":8647}},"selectionRange":{"end":{"character":75,"line":8647},"start":{"character":21,"line":8647}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_ampl_computer_set","range":{"end":{"character":1,"line":8704},"start":{"character":0,"line":8670}},"selectionRange":{"end":{"character":75,"line":8670},"start":{"character":21,"line":8670}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_inst_ampl_computer_get","range":{"end":{"character":1,"line":8727},"start":{"character":0,"line":8707}},"selectionRange":{"end":{"character":75,"line":8707},"start":{"character":21,"line":8707}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_non_opt_filter_set","range":{"end":{"character":1,"line":8764},"start":{"character":0,"line":8730}},"selectionRange":{"end":{"character":71,"line":8730},"start":{"character":21,"line":8730}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_non_opt_filter_get","range":{"end":{"character":1,"line":8787},"start":{"character":0,"line":8767}},"selectionRange":{"end":{"character":71,"line":8767},"start":{"character":21,"line":8767}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_filter_set","range":{"end":{"character":1,"line":8824},"start":{"character":0,"line":8790}},"selectionRange":{"end":{"character":63,"line":8790},"start":{"character":21,"line":8790}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_filter_get","range":{"end":{"character":1,"line":8847},"start":{"character":0,"line":8827}},"selectionRange":{"end":{"character":63,"line":8827},"start":{"character":21,"line":8827}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_getModesCount","range":{"end":{"character":1,"line":8870},"start":{"character":0,"line":8850}},"selectionRange":{"end":{"character":66,"line":8850},"start":{"character":21,"line":8850}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_getDataSize","range":{"end":{"character":1,"line":8893},"start":{"character":0,"line":8873}},"selectionRange":{"end":{"character":64,"line":8873},"start":{"character":21,"line":8873}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_getMode","range":{"end":{"character":1,"line":8923},"start":{"character":0,"line":8896}},"selectionRange":{"end":{"character":60,"line":8896},"start":{"character":21,"line":8896}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_getInstFreq","range":{"end":{"character":1,"line":8953},"start":{"character":0,"line":8926}},"selectionRange":{"end":{"character":64,"line":8926},"start":{"character":21,"line":8926}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_getInstAmpl","range":{"end":{"character":1,"line":8983},"start":{"character":0,"line":8956}},"selectionRange":{"end":{"character":64,"line":8956},"start":{"character":21,"line":8956}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_getPhase","range":{"end":{"character":1,"line":9013},"start":{"character":0,"line":8986}},"selectionRange":{"end":{"character":61,"line":8986},"start":{"character":21,"line":8986}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_InstFreqNormSincExtractor_computeVec","range":{"end":{"character":1,"line":9049},"start":{"character":0,"line":9016}},"selectionRange":{"end":{"character":63,"line":9016},"start":{"character":21,"line":9016}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_new_InstFreqNormSincExtractor","range":{"end":{"character":1,"line":9062},"start":{"character":0,"line":9052}},"selectionRange":{"end":{"character":56,"line":9052},"start":{"character":21,"line":9052}}},{"detail":"int *(int *, int *)","kind":12,"name":"_wrap_delete_InstFreqNormSincExtractor","range":{"end":{"character":1,"line":9084},"start":{"character":0,"line":9065}},"selectionRange":{"end":{"character":59,"line":9065},"start":{"character":21,"line":9065}}},{"detail":"int *(int *, int *)","kind":12,"name":"InstFreqNormSincExtractor_swigregister","range":{"end":{"character":1,"line":9092},"start":{"character":0,"line":9087}},"selectionRange":{"end":{"character":59,"line":9087},"start":{"character":21,"line":9087}}},{"detail":"int *(int *, int *)","kind":12,"name":"InstFreqNormSincExtractor_swiginit","range":{"end":{"character":1,"line":9096},"start":{"character":0,"line":9094}},"selectionRange":{"end":{"character":55,"line":9094},"start":{"character":21,"line":9094}}},{"detail":"int[]","kind":13,"name":"SwigMethods","range":{"end":{"character":32,"line":9098},"start":{"character":0,"line":9098}},"selectionRange":{"end":{"character":30,"line":9098},"start":{"character":19,"line":9098}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t","range":{"end":{"character":295,"line":9209},"start":{"character":0,"line":9209}},"selectionRange":{"end":{"character":108,"line":9209},"start":{"character":22,"line":9209}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_DataType","range":{"end":{"character":91,"line":9210},"start":{"character":0,"line":9210}},"selectionRange":{"end":{"character":40,"line":9210},"start":{"character":22,"line":9210}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_FILTERS__NonOptPeriodBasedFilterT_double_FILTERS__FilteringType__AverageBased_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_FILTERS__InstFreqKind__Average_t","range":{"end":{"character":565,"line":9211},"start":{"character":0,"line":9211}},"selectionRange":{"end":{"character":198,"line":9211},"start":{"character":22,"line":9211}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_FILTERS__SincResLocalFilterT_double_t","range":{"end":{"character":178,"line":9212},"start":{"character":0,"line":9212}},"selectionRange":{"end":{"character":69,"line":9212},"start":{"character":22,"line":9212}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_GenericSignalT_SimpleVecWrapperT_double_t_true_t","range":{"end":{"character":282,"line":9213},"start":{"character":0,"line":9213}},"selectionRange":{"end":{"character":80,"line":9213},"start":{"character":22,"line":9213}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_INST_AMPL_COMPUTERS__HilbertTransformBasedT_UTILITY_MATH__HTKind__Mull_t","range":{"end":{"character":283,"line":9214},"start":{"character":0,"line":9214}},"selectionRange":{"end":{"character":104,"line":9214},"start":{"character":22,"line":9214}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_INST_FREQ_COMPUTERS__ComputedOnPhaseT_double_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_INST_FREQ_COMPUTERS__InstFreqDerivativeBasedKind__TimeAverage_t","range":{"end":{"character":790,"line":9215},"start":{"character":0,"line":9215}},"selectionRange":{"end":{"character":273,"line":9215},"start":{"character":22,"line":9215}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t","range":{"end":{"character":232,"line":9216},"start":{"character":0,"line":9216}},"selectionRange":{"end":{"character":87,"line":9216},"start":{"character":22,"line":9216}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor","range":{"end":{"character":241,"line":9217},"start":{"character":0,"line":9217}},"selectionRange":{"end":{"character":90,"line":9217},"start":{"character":22,"line":9217}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__DerArctg_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t","range":{"end":{"character":562,"line":9218},"start":{"character":0,"line":9218}},"selectionRange":{"end":{"character":197,"line":9218},"start":{"character":22,"line":9218}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__Simple_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t","range":{"end":{"character":556,"line":9219},"start":{"character":0,"line":9219}},"selectionRange":{"end":{"character":195,"line":9219},"start":{"character":22,"line":9219}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_allocator_type","range":{"end":{"character":109,"line":9220},"start":{"character":0,"line":9220}},"selectionRange":{"end":{"character":46,"line":9220},"start":{"character":22,"line":9220}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_char","range":{"end":{"character":79,"line":9221},"start":{"character":0,"line":9221}},"selectionRange":{"end":{"character":36,"line":9221},"start":{"character":22,"line":9221}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_difference_type","range":{"end":{"character":112,"line":9222},"start":{"character":0,"line":9222}},"selectionRange":{"end":{"character":47,"line":9222},"start":{"character":22,"line":9222}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_p_PyObject","range":{"end":{"character":96,"line":9223},"start":{"character":0,"line":9223}},"selectionRange":{"end":{"character":42,"line":9223},"start":{"character":22,"line":9223}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_size_type","range":{"end":{"character":94,"line":9224},"start":{"character":0,"line":9224}},"selectionRange":{"end":{"character":41,"line":9224},"start":{"character":22,"line":9224}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_std__allocatorT_double_t","range":{"end":{"character":179,"line":9225},"start":{"character":0,"line":9225}},"selectionRange":{"end":{"character":56,"line":9225},"start":{"character":22,"line":9225}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_std__invalid_argument","range":{"end":{"character":130,"line":9226},"start":{"character":0,"line":9226}},"selectionRange":{"end":{"character":53,"line":9226},"start":{"character":22,"line":9226}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t","range":{"end":{"character":646,"line":9227},"start":{"character":0,"line":9227}},"selectionRange":{"end":{"character":166,"line":9227},"start":{"character":22,"line":9227}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_std__vectorT_double_std__allocatorT_double_t_t","range":{"end":{"character":229,"line":9228},"start":{"character":0,"line":9228}},"selectionRange":{"end":{"character":78,"line":9228},"start":{"character":22,"line":9228}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_swig__SwigPyIterator","range":{"end":{"character":127,"line":9229},"start":{"character":0,"line":9229}},"selectionRange":{"end":{"character":52,"line":9229},"start":{"character":22,"line":9229}}},{"detail":"swig_type_info","kind":13,"name":"_swigt__p_value_type","range":{"end":{"character":97,"line":9230},"start":{"character":0,"line":9230}},"selectionRange":{"end":{"character":42,"line":9230},"start":{"character":22,"line":9230}}},{"detail":"swig_type_info *[22]","kind":13,"name":"swig_type_initial","range":{"end":{"character":1,"line":9255},"start":{"character":0,"line":9232}},"selectionRange":{"end":{"character":40,"line":9232},"start":{"character":23,"line":9232}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t","range":{"end":{"character":228,"line":9257},"start":{"character":0,"line":9257}},"selectionRange":{"end":{"character":108,"line":9257},"start":{"character":22,"line":9257}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_DataType","range":{"end":{"character":92,"line":9258},"start":{"character":0,"line":9258}},"selectionRange":{"end":{"character":40,"line":9258},"start":{"character":22,"line":9258}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_FILTERS__NonOptPeriodBasedFilterT_double_FILTERS__FilteringType__AverageBased_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_FILTERS__InstFreqKind__Average_t","range":{"end":{"character":408,"line":9259},"start":{"character":0,"line":9259}},"selectionRange":{"end":{"character":198,"line":9259},"start":{"character":22,"line":9259}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_FILTERS__SincResLocalFilterT_double_t","range":{"end":{"character":150,"line":9260},"start":{"character":0,"line":9260}},"selectionRange":{"end":{"character":69,"line":9260},"start":{"character":22,"line":9260}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_GenericSignalT_SimpleVecWrapperT_double_t_true_t","range":{"end":{"character":172,"line":9261},"start":{"character":0,"line":9261}},"selectionRange":{"end":{"character":80,"line":9261},"start":{"character":22,"line":9261}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_INST_AMPL_COMPUTERS__HilbertTransformBasedT_UTILITY_MATH__HTKind__Mull_t","range":{"end":{"character":220,"line":9262},"start":{"character":0,"line":9262}},"selectionRange":{"end":{"character":104,"line":9262},"start":{"character":22,"line":9262}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_INST_FREQ_COMPUTERS__ComputedOnPhaseT_double_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_INST_FREQ_COMPUTERS__InstFreqDerivativeBasedKind__TimeAverage_t","range":{"end":{"character":558,"line":9263},"start":{"character":0,"line":9263}},"selectionRange":{"end":{"character":273,"line":9263},"start":{"character":22,"line":9263}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_INTEGRATORS__RimanT_INTEGRATORS__PolygonType__ByPoint_t","range":{"end":{"character":186,"line":9264},"start":{"character":0,"line":9264}},"selectionRange":{"end":{"character":87,"line":9264},"start":{"character":22,"line":9264}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_NP_DSP__ONE_D__MODES_EXTRACTORS__InstFreqNormSincExtractor","range":{"end":{"character":192,"line":9265},"start":{"character":0,"line":9265}},"selectionRange":{"end":{"character":90,"line":9265},"start":{"character":22,"line":9265}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__DerArctg_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t","range":{"end":{"character":406,"line":9266},"start":{"character":0,"line":9266}},"selectionRange":{"end":{"character":197,"line":9266},"start":{"character":22,"line":9266}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_PHASE_COMPUTERS__ExtremumsBasedNonOptT_double_PHASE_COMPUTERS__ExtremumsKind__Simple_DERIVATORS__FinniteDifferenceT_DERIVATORS__FinniteDifferenceType__Backward_t_t","range":{"end":{"character":402,"line":9267},"start":{"character":0,"line":9267}},"selectionRange":{"end":{"character":195,"line":9267},"start":{"character":22,"line":9267}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_allocator_type","range":{"end":{"character":104,"line":9268},"start":{"character":0,"line":9268}},"selectionRange":{"end":{"character":46,"line":9268},"start":{"character":22,"line":9268}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_char","range":{"end":{"character":84,"line":9269},"start":{"character":0,"line":9269}},"selectionRange":{"end":{"character":36,"line":9269},"start":{"character":22,"line":9269}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_difference_type","range":{"end":{"character":106,"line":9270},"start":{"character":0,"line":9270}},"selectionRange":{"end":{"character":47,"line":9270},"start":{"character":22,"line":9270}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_p_PyObject","range":{"end":{"character":96,"line":9271},"start":{"character":0,"line":9271}},"selectionRange":{"end":{"character":42,"line":9271},"start":{"character":22,"line":9271}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_size_type","range":{"end":{"character":94,"line":9272},"start":{"character":0,"line":9272}},"selectionRange":{"end":{"character":41,"line":9272},"start":{"character":22,"line":9272}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_std__allocatorT_double_t","range":{"end":{"character":124,"line":9273},"start":{"character":0,"line":9273}},"selectionRange":{"end":{"character":56,"line":9273},"start":{"character":22,"line":9273}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_std__invalid_argument","range":{"end":{"character":118,"line":9274},"start":{"character":0,"line":9274}},"selectionRange":{"end":{"character":53,"line":9274},"start":{"character":22,"line":9274}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_std__vectorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_std__allocatorT_GenericSignalT_SimpleVecWrapperT_double_t_true_t_p_t_t","range":{"end":{"character":344,"line":9275},"start":{"character":0,"line":9275}},"selectionRange":{"end":{"character":166,"line":9275},"start":{"character":22,"line":9275}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_std__vectorT_double_std__allocatorT_double_t_t","range":{"end":{"character":168,"line":9276},"start":{"character":0,"line":9276}},"selectionRange":{"end":{"character":78,"line":9276},"start":{"character":22,"line":9276}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_swig__SwigPyIterator","range":{"end":{"character":116,"line":9277},"start":{"character":0,"line":9277}},"selectionRange":{"end":{"character":52,"line":9277},"start":{"character":22,"line":9277}}},{"detail":"swig_cast_info[2]","kind":13,"name":"_swigc__p_value_type","range":{"end":{"character":96,"line":9278},"start":{"character":0,"line":9278}},"selectionRange":{"end":{"character":42,"line":9278},"start":{"character":22,"line":9278}}},{"detail":"swig_cast_info *[22]","kind":13,"name":"swig_cast_initial","range":{"end":{"character":1,"line":9303},"start":{"character":0,"line":9280}},"selectionRange":{"end":{"character":40,"line":9280},"start":{"character":23,"line":9280}}},{"detail":"swig_const_info[1]","kind":13,"name":"swig_const_table","range":{"end":{"character":21,"line":9309},"start":{"character":0,"line":9308}},"selectionRange":{"end":{"character":39,"line":9308},"start":{"character":23,"line":9308}}},{"detail":"void (void *)","kind":12,"name":"SWIG_InitializeModule","range":{"end":{"character":1,"line":9510},"start":{"character":0,"line":9370}},"selectionRange":{"end":{"character":21,"line":9371},"start":{"character":0,"line":9371}}},{"detail":"void ()","kind":12,"name":"SWIG_PropagateClientData","range":{"end":{"character":1,"line":9538},"start":{"character":0,"line":9517}},"selectionRange":{"end":{"character":24,"line":9518},"start":{"character":0,"line":9518}}},{"detail":"void (int *, swig_const_info *)","kind":12,"name":"SWIG_Python_InstallConstants","range":{"end":{"character":3,"line":9580},"start":{"character":2,"line":9559}},"selectionRange":{"end":{"character":30,"line":9560},"start":{"character":2,"line":9560}}},{"detail":"void (int *, const swig_const_info *, swig_type_info **, swig_type_info **)","kind":12,"name":"SWIG_Python_FixMethods","range":{"end":{"character":3,"line":9625},"start":{"character":2,"line":9586}},"selectionRange":{"end":{"character":24,"line":9587},"start":{"character":2,"line":9587}}},{"children":[{"detail":"void ()","kind":12,"name":"init_extractor","range":{"end":{"character":1,"line":9778},"start":{"character":0,"line":9642}},"selectionRange":{"end":{"character":9,"line":9648},"start":{"character":0,"line":9648}}}],"kind":21,"name":"SWIG_init","range":{"end":{"character":1,"line":9778},"start":{"character":0,"line":9642}},"selectionRange":{"end":{"character":9,"line":9648},"start":{"character":0,"line":9648}}}]}},{"pid":0,"ph":"X","name":"Queued:Hover","ts":58153408.023999996,"tid":6130,"dur":6.3720000013709068,"args":{"CurrentRequest":"Build AST","PreambleRequestsNames":[],"RequestsNames":["codeAction","DocumentSymbols","SemanticHighlights","DocumentLinks","InlayHints","DocumentSymbols","DocumentSymbols"]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":58153330.167999998,"tid":6130,"id":61,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":58643434.806000002,"tid":6237,"bp":"e","id":61,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":58643448.130999997,"tid":6237,"dur":31.46900000423193,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58643536.347000003,"tid":6237,"args":{"Message":"--> reply:textDocument/hover(58) 490 ms, error: Task was cancelled."}},{"pid":0,"ph":"X","name":"Hover","ts":58643423.254000001,"tid":6237,"dur":211.84899999946356,"args":{}},{"pid":0,"ph":"X","name":"textDocument/hover","ts":58153330.167999998,"tid":6130,"dur":87.804999999701977,"args":{"Error":"Task was cancelled.","Params":{"position":{"character":10,"line":15},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}}}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":58345960.921999998,"tid":6130,"dur":5.3610000014305115,"args":{"CurrentRequest":"Build AST","PreambleRequestsNames":[],"RequestsNames":["codeAction","DocumentSymbols","SemanticHighlights","DocumentLinks","InlayHints","DocumentSymbols","DocumentSymbols","Hover"]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":58345915.656999998,"tid":6130,"id":62,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":58643691.049000002,"tid":6237,"bp":"e","id":62,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":58643834.920000002,"tid":6237,"dur":17.052000001072884,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58647154.848999999,"tid":6237,"args":{"Message":"--> reply:textDocument/inlayHint(59) 301 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":58643684.887000002,"tid":6237,"dur":3518.3929999992251,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":58345915.656999998,"tid":6130,"dur":53.972000002861023,"args":{"Params":{"range":{"end":{"character":28,"line":134},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":58647238.206,"tid":6237,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":58668640.614,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(60)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":58668698.973999999,"tid":6130,"dur":3.936999998986721,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":58668612.291000001,"tid":6130,"id":63,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":58668778.614,"tid":6237,"bp":"e","id":63,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":58668785.045999996,"tid":6237,"dur":10.580000005662441,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58671092.056000002,"tid":6237,"args":{"Message":"--> reply:textDocument/inlayHint(60) 2 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":58668770.748999998,"tid":6237,"dur":2354.249000005424,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":58668612.291000001,"tid":6130,"dur":99.416999995708466,"args":{"Params":{"range":{"end":{"character":6,"line":182},"start":{"character":0,"line":28}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":58671153.081,"tid":6237,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":58698531.715999998,"tid":6130,"args":{"Message":"<-- textDocument/codeAction(61)"}},{"pid":0,"ph":"X","name":"Queued:codeAction","ts":58698605.976000004,"tid":6130,"dur":2.5339999943971634,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":58698498.563000001,"tid":6130,"id":64,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":58698674.034000002,"tid":6237,"bp":"e","id":64,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":58698682.229000002,"tid":6237,"dur":11.421999998390675,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58698868.910999998,"tid":6237,"args":{"Message":"--> reply:textDocument/codeAction(61) 0 ms"}},{"pid":0,"ph":"X","name":"codeAction","ts":58698665.478,"tid":6237,"dur":263.60700000077486,"args":{}},{"pid":0,"ph":"X","name":"textDocument/codeAction","ts":58698498.563000001,"tid":6130,"dur":121.33900000154972,"args":{"Params":{"context":{"diagnostics":[{"code":"fatal_too_many_errors","message":"Too many errors emitted, stopping now","range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"relatedInformation":[],"severity":1,"source":"clang"}],"triggerKind":2},"range":{"end":{"character":0,"line":0},"start":{"character":0,"line":0}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":58698963.539999999,"tid":6237,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":58909239.767999999,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(62)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":58909313.226000004,"tid":6130,"dur":2.7859999984502792,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":58909216.303999998,"tid":6130,"id":65,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":58909445.935999997,"tid":6237,"bp":"e","id":65,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":58909451.828000002,"tid":6237,"dur":10.96000000089407,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58911721.285999998,"tid":6237,"args":{"Message":"--> reply:textDocument/inlayHint(62) 2 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":58909438.022,"tid":6237,"dur":2318.2299999967217,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":58909216.303999998,"tid":6130,"dur":106.62099999934435,"args":{"Params":{"range":{"end":{"character":0,"line":233},"start":{"character":0,"line":79}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},"Reply":[]}},{"pid":0,"ph":"i","name":"Log","ts":58911789.424999997,"tid":6237,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":58952366.421999998,"tid":6130,"args":{"Message":"<-- textDocument/semanticTokens/full/delta(63)"}},{"pid":0,"ph":"X","name":"Queued:SemanticHighlights","ts":58952421.785999998,"tid":6130,"dur":3.1260000020265579,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":58952348.327,"tid":6130,"id":66,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":58952499.722999997,"tid":6237,"bp":"e","id":66,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":58952505.384000003,"tid":6237,"dur":10.489000000059605,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":58962741.611000001,"tid":6237,"args":{"Message":"--> reply:textDocument/semanticTokens/full/delta(63) 10 ms"}},{"pid":0,"ph":"X","name":"SemanticHighlights","ts":58952492.489,"tid":6237,"dur":10296.671999998391,"args":{}},{"pid":0,"ph":"X","name":"textDocument/semanticTokens/full/delta","ts":58952348.327,"tid":6130,"dur":83.06700000166893,"args":{"Params":{"previousResultId":"1","textDocument":{"uri":"file:///home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},"Reply":{"edits":[],"resultId":"2"}}},{"pid":0,"ph":"i","name":"Log","ts":58962818.545999996,"tid":6237,"args":{"Message":"--> textDocument/clangd.fileStatus"}},{"pid":0,"ph":"i","name":"Log","ts":59518840.961000003,"tid":6239,"args":{"Message":"Indexed c++17 standard library (incomplete due to errors): 13645 symbols, 1922 filtered"}},{"pid":0,"ph":"X","name":"StandardLibraryIndex","ts":57562169.215999998,"tid":6239,"dur":1959678.313000001,"args":{"symbols":13645}},{"pid":0,"ph":"i","name":"Log","ts":60408654.114,"tid":6130,"args":{"Message":"<-- textDocument/inlayHint(64)"}},{"pid":0,"ph":"X","name":"Queued:InlayHints","ts":60408702.806000002,"tid":6130,"dur":2.614999994635582,"args":{"PreambleRequestsNames":[],"RequestsNames":[]}},{"pid":0,"ph":"s","name":"Context crosses threads","ts":60408635.008000001,"tid":6130,"id":67,"cat":"mock_cat"},{"pid":0,"ph":"f","name":"Context crosses threads","ts":60408777.425999999,"tid":6237,"bp":"e","id":67,"cat":"mock_cat"},{"pid":0,"ph":"X","name":"getConfig","ts":60408782.605999999,"tid":6237,"dur":7.7749999985098839,"args":{"path":"/home/dmitry/projects/hedgehog-tokenizer/linux_x86_64/extractor.cpp"}},{"pid":0,"ph":"i","name":"Log","ts":60410783.637999997,"tid":6237,"args":{"Message":"--> reply:textDocument/inlayHint(64) 2 ms"}},{"pid":0,"ph":"X","name":"InlayHints","ts":60408770.413000003,"tid":6237,"dur":2110.3389999940991,"args":{}},{"pid":0,"ph":"X","name":"textDocument/inlayHint","ts":60408635.008000001,"tid":6130,"dur":76.324000000953674,"args":{"Params":{"range":{"end":{"character":0,"line":6218},"start":{"character":0,"line":6064}},"textDocument":{"uri":"file:///home/dmitry/projects/hedgeho