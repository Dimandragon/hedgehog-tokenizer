# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _extractor
else:
    import _extractor

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _extractor.delete_SwigPyIterator

    def value(self):
        return _extractor.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _extractor.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _extractor.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _extractor.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _extractor.SwigPyIterator_equal(self, x)

    def copy(self):
        return _extractor.SwigPyIterator_copy(self)

    def next(self):
        return _extractor.SwigPyIterator_next(self)

    def __next__(self):
        return _extractor.SwigPyIterator___next__(self)

    def previous(self):
        return _extractor.SwigPyIterator_previous(self)

    def advance(self, n):
        return _extractor.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _extractor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _extractor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _extractor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _extractor.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _extractor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _extractor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _extractor:
_extractor.SwigPyIterator_swigregister(SwigPyIterator)
class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _extractor.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _extractor.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _extractor.DoubleVector___bool__(self)

    def __len__(self):
        return _extractor.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _extractor.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _extractor.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _extractor.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _extractor.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _extractor.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _extractor.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _extractor.DoubleVector_pop(self)

    def append(self, x):
        return _extractor.DoubleVector_append(self, x)

    def empty(self):
        return _extractor.DoubleVector_empty(self)

    def size(self):
        return _extractor.DoubleVector_size(self)

    def swap(self, v):
        return _extractor.DoubleVector_swap(self, v)

    def begin(self):
        return _extractor.DoubleVector_begin(self)

    def end(self):
        return _extractor.DoubleVector_end(self)

    def rbegin(self):
        return _extractor.DoubleVector_rbegin(self)

    def rend(self):
        return _extractor.DoubleVector_rend(self)

    def clear(self):
        return _extractor.DoubleVector_clear(self)

    def get_allocator(self):
        return _extractor.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _extractor.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _extractor.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _extractor.DoubleVector_swiginit(self, _extractor.new_DoubleVector(*args))

    def push_back(self, x):
        return _extractor.DoubleVector_push_back(self, x)

    def front(self):
        return _extractor.DoubleVector_front(self)

    def back(self):
        return _extractor.DoubleVector_back(self)

    def assign(self, n, x):
        return _extractor.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _extractor.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _extractor.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _extractor.DoubleVector_reserve(self, n)

    def capacity(self):
        return _extractor.DoubleVector_capacity(self)
    __swig_destroy__ = _extractor.delete_DoubleVector

# Register DoubleVector in _extractor:
_extractor.DoubleVector_swigregister(DoubleVector)
class InstFreqNormSincExtractor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_extractor.InstFreqNormSincExtractor_data_get, _extractor.InstFreqNormSincExtractor_data_set)
    data_buffer = property(_extractor.InstFreqNormSincExtractor_data_buffer_get, _extractor.InstFreqNormSincExtractor_data_buffer_set)
    compute_buffer = property(_extractor.InstFreqNormSincExtractor_compute_buffer_get, _extractor.InstFreqNormSincExtractor_compute_buffer_set)
    compute_buffer2 = property(_extractor.InstFreqNormSincExtractor_compute_buffer2_get, _extractor.InstFreqNormSincExtractor_compute_buffer2_set)
    modes = property(_extractor.InstFreqNormSincExtractor_modes_get, _extractor.InstFreqNormSincExtractor_modes_set)
    inst_freqs = property(_extractor.InstFreqNormSincExtractor_inst_freqs_get, _extractor.InstFreqNormSincExtractor_inst_freqs_set)
    inst_ampls = property(_extractor.InstFreqNormSincExtractor_inst_ampls_get, _extractor.InstFreqNormSincExtractor_inst_ampls_set)
    phases = property(_extractor.InstFreqNormSincExtractor_phases_get, _extractor.InstFreqNormSincExtractor_phases_set)
    freq_conv = property(_extractor.InstFreqNormSincExtractor_freq_conv_get, _extractor.InstFreqNormSincExtractor_freq_conv_set)
    freq_conv_image = property(_extractor.InstFreqNormSincExtractor_freq_conv_image_get, _extractor.InstFreqNormSincExtractor_freq_conv_image_set)
    period_muller = property(_extractor.InstFreqNormSincExtractor_period_muller_get, _extractor.InstFreqNormSincExtractor_period_muller_set)
    locality_coeff = property(_extractor.InstFreqNormSincExtractor_locality_coeff_get, _extractor.InstFreqNormSincExtractor_locality_coeff_set)
    integrator = property(_extractor.InstFreqNormSincExtractor_integrator_get, _extractor.InstFreqNormSincExtractor_integrator_set)
    derivator = property(_extractor.InstFreqNormSincExtractor_derivator_get, _extractor.InstFreqNormSincExtractor_derivator_set)
    phase_computer_der_atan = property(_extractor.InstFreqNormSincExtractor_phase_computer_der_atan_get, _extractor.InstFreqNormSincExtractor_phase_computer_der_atan_set)
    phase_computer_simple = property(_extractor.InstFreqNormSincExtractor_phase_computer_simple_get, _extractor.InstFreqNormSincExtractor_phase_computer_simple_set)
    inst_freq_computer = property(_extractor.InstFreqNormSincExtractor_inst_freq_computer_get, _extractor.InstFreqNormSincExtractor_inst_freq_computer_set)
    inst_ampl_computer = property(_extractor.InstFreqNormSincExtractor_inst_ampl_computer_get, _extractor.InstFreqNormSincExtractor_inst_ampl_computer_set)
    non_opt_filter = property(_extractor.InstFreqNormSincExtractor_non_opt_filter_get, _extractor.InstFreqNormSincExtractor_non_opt_filter_set)
    filter = property(_extractor.InstFreqNormSincExtractor_filter_get, _extractor.InstFreqNormSincExtractor_filter_set)

    def getModesCount(self):
        return _extractor.InstFreqNormSincExtractor_getModesCount(self)

    def getDataSize(self):
        return _extractor.InstFreqNormSincExtractor_getDataSize(self)

    def getMode(self, idx):
        return _extractor.InstFreqNormSincExtractor_getMode(self, idx)

    def getInstFreq(self, idx):
        return _extractor.InstFreqNormSincExtractor_getInstFreq(self, idx)

    def getInstAmpl(self, idx):
        return _extractor.InstFreqNormSincExtractor_getInstAmpl(self, idx)

    def getPhase(self, idx):
        return _extractor.InstFreqNormSincExtractor_getPhase(self, idx)

    def computeVec(self, data_in):
        return _extractor.InstFreqNormSincExtractor_computeVec(self, data_in)

    def __init__(self):
        _extractor.InstFreqNormSincExtractor_swiginit(self, _extractor.new_InstFreqNormSincExtractor())
    __swig_destroy__ = _extractor.delete_InstFreqNormSincExtractor

# Register InstFreqNormSincExtractor in _extractor:
_extractor.InstFreqNormSincExtractor_swigregister(InstFreqNormSincExtractor)

